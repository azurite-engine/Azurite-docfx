### YamlMime:ManagedReference
items:
- uid: "util.safety.Preconditions"
  id: "Preconditions"
  parent: "util.safety"
  children:
  - "util.safety.Preconditions.<T>nonNull(T)"
  - "util.safety.Preconditions.<T>nonNull(java.lang.String,T)"
  - "util.safety.Preconditions.Preconditions()"
  - "util.safety.Preconditions.ensureMainThread(java.lang.String)"
  langs:
  - "java"
  name: "Preconditions"
  nameWithType: "Preconditions"
  fullName: "util.safety.Preconditions"
  type: "Class"
  package: "util.safety"
  syntax:
    content: "public final class Preconditions"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "util.safety.Preconditions.<T>nonNull(T)"
  id: "<T>nonNull(T)"
  parent: "util.safety.Preconditions"
  langs:
  - "java"
  name: "<T>nonNull(T obj)"
  nameWithType: "Preconditions.<T>nonNull(T obj)"
  fullName: "util.safety.Preconditions.<T>nonNull(T obj)"
  overload: "util.safety.Preconditions.nonNull*"
  type: "Method"
  package: "util.safety"
  summary: "Improve code stability by doing non-null checks inline."
  syntax:
    content: "public static T <T>nonNull(T obj)"
    parameters:
    - id: "obj"
      type: "T"
      description: "any object expected to be non-null"
    return:
      type: "T"
      description: "the object, if and only if its not null. throws a <xref uid=\"\" data-throw-if-not-resolved=\"false\">NullPointerException</xref> otherwise."
- uid: "util.safety.Preconditions.<T>nonNull(java.lang.String,T)"
  id: "<T>nonNull(java.lang.String,T)"
  parent: "util.safety.Preconditions"
  langs:
  - "java"
  name: "<T>nonNull(String name, T obj)"
  nameWithType: "Preconditions.<T>nonNull(String name, T obj)"
  fullName: "util.safety.Preconditions.<T>nonNull(String name, T obj)"
  overload: "util.safety.Preconditions.nonNull*"
  type: "Method"
  package: "util.safety"
  summary: "Improve code stability by doing non-null checks inline."
  syntax:
    content: "public static T <T>nonNull(String name, T obj)"
    parameters:
    - id: "name"
      type: "java.lang.String"
      description: "the name of the object to improve locating process"
    - id: "obj"
      type: "T"
      description: "any object expected to be non-null"
    return:
      type: "T"
      description: "the object, if and only if its not null. throws a <xref uid=\"\" data-throw-if-not-resolved=\"false\">NullPointerException</xref> otherwise."
- uid: "util.safety.Preconditions.Preconditions()"
  id: "Preconditions()"
  parent: "util.safety.Preconditions"
  langs:
  - "java"
  name: "Preconditions()"
  nameWithType: "Preconditions.Preconditions()"
  fullName: "util.safety.Preconditions.Preconditions()"
  overload: "util.safety.Preconditions.Preconditions*"
  type: "Constructor"
  package: "util.safety"
  syntax:
    content: "public Preconditions()"
- uid: "util.safety.Preconditions.ensureMainThread(java.lang.String)"
  id: "ensureMainThread(java.lang.String)"
  parent: "util.safety.Preconditions"
  langs:
  - "java"
  name: "ensureMainThread(String location)"
  nameWithType: "Preconditions.ensureMainThread(String location)"
  fullName: "util.safety.Preconditions.ensureMainThread(String location)"
  overload: "util.safety.Preconditions.ensureMainThread*"
  type: "Method"
  package: "util.safety"
  summary: "Test if the current call is executed in the main thread. This is especially necessary if you run a mac, since mac doesnt like OpenGl calls in ANY thread except the first one. This method does NOT provide a valid exception if the whole program wasnt launched with VM argument -XstartOnFirstThread, because only with this argument, its guaranteed that the main thread is actually is the first."
  syntax:
    content: "public static void ensureMainThread(String location)"
    parameters:
    - id: "location"
      type: "java.lang.String"
references:
- uid: "util.safety.Preconditions.Preconditions*"
  name: "Preconditions"
  nameWithType: "Preconditions.Preconditions"
  fullName: "util.safety.Preconditions.Preconditions"
  package: "util.safety"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "util.safety.Preconditions.ensureMainThread*"
  name: "ensureMainThread"
  nameWithType: "Preconditions.ensureMainThread"
  fullName: "util.safety.Preconditions.ensureMainThread"
  package: "util.safety"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "util.safety.Preconditions.nonNull*"
  name: "<T>nonNull"
  nameWithType: "Preconditions.<T>nonNull"
  fullName: "util.safety.Preconditions.<T>nonNull"
  package: "util.safety"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
