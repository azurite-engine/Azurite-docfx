### YamlMime:ManagedReference
items:
- uid: "ai.path.vector2f.Vector2fPath"
  id: "Vector2fPath"
  parent: "ai.path.vector2f"
  children:
  - "ai.path.vector2f.Vector2fPath.Vector2fPath(ai.path.Node<org.joml.Vector2f>,ai.path.Node<org.joml.Vector2f>,float)"
  - "ai.path.vector2f.Vector2fPath.cost()"
  - "ai.path.vector2f.Vector2fPath.end()"
  - "ai.path.vector2f.Vector2fPath.start()"
  langs:
  - "java"
  name: "Vector2fPath"
  nameWithType: "Vector2fPath"
  fullName: "ai.path.vector2f.Vector2fPath"
  type: "Class"
  package: "ai.path.vector2f"
  syntax:
    content: "public class Vector2fPath implements Path<Vector2f>"
  inheritance:
  - "java.lang.Object"
  implements:
  - "ai.path.Path<org.joml.Vector2f>"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ai.path.vector2f.Vector2fPath.Vector2fPath(ai.path.Node<org.joml.Vector2f>,ai.path.Node<org.joml.Vector2f>,float)"
  id: "Vector2fPath(ai.path.Node<org.joml.Vector2f>,ai.path.Node<org.joml.Vector2f>,float)"
  parent: "ai.path.vector2f.Vector2fPath"
  langs:
  - "java"
  name: "Vector2fPath(Node<Vector2f> start, Node<Vector2f> end, float cost)"
  nameWithType: "Vector2fPath.Vector2fPath(Node<Vector2f> start, Node<Vector2f> end, float cost)"
  fullName: "ai.path.vector2f.Vector2fPath.Vector2fPath(Node<Vector2f> start, Node<Vector2f> end, float cost)"
  overload: "ai.path.vector2f.Vector2fPath.Vector2fPath*"
  type: "Constructor"
  package: "ai.path.vector2f"
  syntax:
    content: "public Vector2fPath(Node<Vector2f> start, Node<Vector2f> end, float cost)"
    parameters:
    - id: "start"
      type: "ai.path.Node<org.joml.Vector2f>"
    - id: "end"
      type: "ai.path.Node<org.joml.Vector2f>"
    - id: "cost"
      type: "float"
- uid: "ai.path.vector2f.Vector2fPath.cost()"
  id: "cost()"
  parent: "ai.path.vector2f.Vector2fPath"
  langs:
  - "java"
  name: "cost()"
  nameWithType: "Vector2fPath.cost()"
  fullName: "ai.path.vector2f.Vector2fPath.cost()"
  overload: "ai.path.vector2f.Vector2fPath.cost*"
  type: "Method"
  package: "ai.path.vector2f"
  summary: "The costs to take this path. An artificial value to order multiple paths by costs and to find a the path with the lowest cost which is considered the shortest."
  syntax:
    content: "public float cost()"
    return:
      type: "float"
- uid: "ai.path.vector2f.Vector2fPath.end()"
  id: "end()"
  parent: "ai.path.vector2f.Vector2fPath"
  langs:
  - "java"
  name: "end()"
  nameWithType: "Vector2fPath.end()"
  fullName: "ai.path.vector2f.Vector2fPath.end()"
  overload: "ai.path.vector2f.Vector2fPath.end*"
  type: "Method"
  package: "ai.path.vector2f"
  summary: "The node where the path ends."
  syntax:
    content: "public Node<Vector2f> end()"
    return:
      type: "ai.path.Node<org.joml.Vector2f>"
- uid: "ai.path.vector2f.Vector2fPath.start()"
  id: "start()"
  parent: "ai.path.vector2f.Vector2fPath"
  langs:
  - "java"
  name: "start()"
  nameWithType: "Vector2fPath.start()"
  fullName: "ai.path.vector2f.Vector2fPath.start()"
  overload: "ai.path.vector2f.Vector2fPath.start*"
  type: "Method"
  package: "ai.path.vector2f"
  summary: "The node where the path starts."
  syntax:
    content: "public Node<Vector2f> start()"
    return:
      type: "ai.path.Node<org.joml.Vector2f>"
references:
- uid: "ai.path.Node<org.joml.Vector2f>"
  spec.java:
  - uid: "ai.path.Node"
    name: "Node"
    fullName: "ai.path.Node"
  - name: "<"
    fullName: "<"
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
  - name: ">"
    fullName: ">"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "ai.path.vector2f.Vector2fPath.Vector2fPath*"
  name: "Vector2fPath"
  nameWithType: "Vector2fPath.Vector2fPath"
  fullName: "ai.path.vector2f.Vector2fPath.Vector2fPath"
  package: "ai.path.vector2f"
- uid: "ai.path.vector2f.Vector2fPath.start*"
  name: "start"
  nameWithType: "Vector2fPath.start"
  fullName: "ai.path.vector2f.Vector2fPath.start"
  package: "ai.path.vector2f"
- uid: "ai.path.vector2f.Vector2fPath.end*"
  name: "end"
  nameWithType: "Vector2fPath.end"
  fullName: "ai.path.vector2f.Vector2fPath.end"
  package: "ai.path.vector2f"
- uid: "ai.path.vector2f.Vector2fPath.cost*"
  name: "cost"
  nameWithType: "Vector2fPath.cost"
  fullName: "ai.path.vector2f.Vector2fPath.cost"
  package: "ai.path.vector2f"
- uid: "ai.path.Path<org.joml.Vector2f>"
  name: "Path<Vector2f>"
  nameWithType: "Path<Vector2f>"
  fullName: "ai.path.Path<org.joml.Vector2f>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "org.joml.Vector2f"
  name: "Vector2f"
  nameWithType: "Vector2f"
  fullName: "org.joml.Vector2f"
- uid: "ai.path.Node"
  name: "Node"
  nameWithType: "Node"
  fullName: "ai.path.Node"
- uid: "ai.path.Path"
  name: "Path"
  nameWithType: "Path"
  fullName: "ai.path.Path"
