### YamlMime:ManagedReference
items:
- uid: "ui.Element"
  id: "Element"
  parent: "ui"
  children:
  - "ui.Element.Element()"
  - "ui.Element.Element(ui.Frame)"
  - "ui.Element.cursor"
  - "ui.Element.draw()"
  - "ui.Element.enabled"
  - "ui.Element.eventHandler"
  - "ui.Element.focused"
  - "ui.Element.font"
  - "ui.Element.frame"
  - "ui.Element.getCursor()"
  - "ui.Element.getEnabled()"
  - "ui.Element.getEventHandler()"
  - "ui.Element.getFocused()"
  - "ui.Element.getFont()"
  - "ui.Element.getFrame()"
  - "ui.Element.getHeight()"
  - "ui.Element.getLayoutInfo()"
  - "ui.Element.getParent()"
  - "ui.Element.getVisible()"
  - "ui.Element.getWidth()"
  - "ui.Element.getX()"
  - "ui.Element.getY()"
  - "ui.Element.hasEventHandler()"
  - "ui.Element.isEnabled()"
  - "ui.Element.isFocused()"
  - "ui.Element.isMouseOnThis()"
  - "ui.Element.isVisible()"
  - "ui.Element.layoutInfo"
  - "ui.Element.mouseOverThis"
  - "ui.Element.postUpdate()"
  - "ui.Element.requestFocus()"
  - "ui.Element.setCursor(int)"
  - "ui.Element.setEnabled(boolean)"
  - "ui.Element.setFocused(boolean)"
  - "ui.Element.setFont(ui.fonts.Font)"
  - "ui.Element.setLayoutInfo(java.lang.Object)"
  - "ui.Element.setParent(ui.Container)"
  - "ui.Element.setVisible(boolean)"
  - "ui.Element.update()"
  - "ui.Element.visible"
  - "ui.Element.zIndex"
  - "ui.Element.zIndex()"
  langs:
  - "java"
  name: "Element"
  nameWithType: "Element"
  fullName: "ui.Element"
  type: "Class"
  package: "ui"
  syntax:
    content: "public abstract class Element"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ui.Element.Element()"
  id: "Element()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "Element()"
  nameWithType: "Element.Element()"
  fullName: "ui.Element.Element()"
  overload: "ui.Element.Element*"
  type: "Constructor"
  package: "ui"
  syntax:
    content: "public Element()"
- uid: "ui.Element.Element(ui.Frame)"
  id: "Element(ui.Frame)"
  parent: "ui.Element"
  langs:
  - "java"
  name: "Element(Frame frame)"
  nameWithType: "Element.Element(Frame frame)"
  fullName: "ui.Element.Element(Frame frame)"
  overload: "ui.Element.Element*"
  type: "Constructor"
  package: "ui"
  syntax:
    content: "public Element(Frame frame)"
    parameters:
    - id: "frame"
      type: "ui.Frame"
- uid: "ui.Element.cursor"
  id: "cursor"
  parent: "ui.Element"
  langs:
  - "java"
  name: "cursor"
  nameWithType: "Element.cursor"
  fullName: "ui.Element.cursor"
  type: "Field"
  package: "ui"
  summary: "The cursor id according to <xref uid=\"ui.CursorManager\" data-throw-if-not-resolved=\"false\">CursorManager</xref>"
  syntax:
    content: "protected int cursor"
    return:
      type: "int"
- uid: "ui.Element.draw()"
  id: "draw()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "draw()"
  nameWithType: "Element.draw()"
  fullName: "ui.Element.draw()"
  overload: "ui.Element.draw*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public void draw()"
- uid: "ui.Element.enabled"
  id: "enabled"
  parent: "ui.Element"
  langs:
  - "java"
  name: "enabled"
  nameWithType: "Element.enabled"
  fullName: "ui.Element.enabled"
  type: "Field"
  package: "ui"
  syntax:
    content: "protected final Observable<Boolean> enabled"
    return:
      type: "util.Observable<java.lang.Boolean>"
- uid: "ui.Element.eventHandler"
  id: "eventHandler"
  parent: "ui.Element"
  langs:
  - "java"
  name: "eventHandler"
  nameWithType: "Element.eventHandler"
  fullName: "ui.Element.eventHandler"
  type: "Field"
  package: "ui"
  summary: "The event handler for mouse events on this component. Is null until \\{@link this\\#getEventHandler()\\} is called for the first time to reduce workload."
  syntax:
    content: "protected EventHandler eventHandler"
    return:
      type: "ui.EventHandler"
- uid: "ui.Element.focused"
  id: "focused"
  parent: "ui.Element"
  langs:
  - "java"
  name: "focused"
  nameWithType: "Element.focused"
  fullName: "ui.Element.focused"
  type: "Field"
  package: "ui"
  syntax:
    content: "protected final Observable<Boolean> focused"
    return:
      type: "util.Observable<java.lang.Boolean>"
- uid: "ui.Element.font"
  id: "font"
  parent: "ui.Element"
  langs:
  - "java"
  name: "font"
  nameWithType: "Element.font"
  fullName: "ui.Element.font"
  type: "Field"
  package: "ui"
  summary: "The font used for text in this element. If the font is null - the parent font is used instead"
  syntax:
    content: "protected Font font"
    return:
      type: "ui.fonts.Font"
- uid: "ui.Element.frame"
  id: "frame"
  parent: "ui.Element"
  langs:
  - "java"
  name: "frame"
  nameWithType: "Element.frame"
  fullName: "ui.Element.frame"
  type: "Field"
  package: "ui"
  summary: "The position and dimension of this component."
  syntax:
    content: "protected Frame frame"
    return:
      type: "ui.Frame"
- uid: "ui.Element.getCursor()"
  id: "getCursor()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getCursor()"
  nameWithType: "Element.getCursor()"
  fullName: "ui.Element.getCursor()"
  overload: "ui.Element.getCursor*"
  type: "Method"
  package: "ui"
  summary: "Get the current cursor."
  syntax:
    content: "public int getCursor()"
    return:
      type: "int"
      description: "the current cursor"
- uid: "ui.Element.getEnabled()"
  id: "getEnabled()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getEnabled()"
  nameWithType: "Element.getEnabled()"
  fullName: "ui.Element.getEnabled()"
  overload: "ui.Element.getEnabled*"
  type: "Method"
  package: "ui"
  summary: "The observable for the enabled state of the component."
  syntax:
    content: "public Observable<Boolean> getEnabled()"
    return:
      type: "util.Observable<java.lang.Boolean>"
      description: "the observable for enabled"
- uid: "ui.Element.getEventHandler()"
  id: "getEventHandler()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getEventHandler()"
  nameWithType: "Element.getEventHandler()"
  fullName: "ui.Element.getEventHandler()"
  overload: "ui.Element.getEventHandler*"
  type: "Method"
  package: "ui"
  summary: "Get and/or create an eventhandler for this method. Do not call this, if you just wanna check the eventhandler, use <xref uid=\"ui.Element.hasEventHandler()\" data-throw-if-not-resolved=\"false\">#hasEventHandler()</xref> for that."
  syntax:
    content: "public EventHandler getEventHandler()"
    return:
      type: "ui.EventHandler"
      description: "the eventhandler of this component."
- uid: "ui.Element.getFocused()"
  id: "getFocused()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getFocused()"
  nameWithType: "Element.getFocused()"
  fullName: "ui.Element.getFocused()"
  overload: "ui.Element.getFocused*"
  type: "Method"
  package: "ui"
  summary: "The observable for the focused state of the component."
  syntax:
    content: "public Observable<Boolean> getFocused()"
    return:
      type: "util.Observable<java.lang.Boolean>"
      description: "the observable for focused"
- uid: "ui.Element.getFont()"
  id: "getFont()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getFont()"
  nameWithType: "Element.getFont()"
  fullName: "ui.Element.getFont()"
  overload: "ui.Element.getFont*"
  type: "Method"
  package: "ui"
  summary: "The font to use for this component."
  syntax:
    content: "public Font getFont()"
    return:
      type: "ui.fonts.Font"
      description: "the font for this component or the parent font, if this component doesnt have its own."
- uid: "ui.Element.getFrame()"
  id: "getFrame()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getFrame()"
  nameWithType: "Element.getFrame()"
  fullName: "ui.Element.getFrame()"
  overload: "ui.Element.getFrame*"
  type: "Method"
  package: "ui"
  summary: "The <xref uid=\"ui.Frame\" data-throw-if-not-resolved=\"false\">Frame</xref> of this component. Contains the position relative to its parent and its size."
  syntax:
    content: "public Frame getFrame()"
    return:
      type: "ui.Frame"
      description: "the <xref uid=\"ui.Frame\" data-throw-if-not-resolved=\"false\">Frame</xref> of this component"
- uid: "ui.Element.getHeight()"
  id: "getHeight()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getHeight()"
  nameWithType: "Element.getHeight()"
  fullName: "ui.Element.getHeight()"
  overload: "ui.Element.getHeight*"
  type: "Method"
  package: "ui"
  summary: "The height of this component."
  syntax:
    content: "public float getHeight()"
    return:
      type: "float"
      description: "the height of this component"
- uid: "ui.Element.getLayoutInfo()"
  id: "getLayoutInfo()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getLayoutInfo()"
  nameWithType: "Element.getLayoutInfo()"
  fullName: "ui.Element.getLayoutInfo()"
  overload: "ui.Element.getLayoutInfo*"
  type: "Method"
  package: "ui"
  summary: "Get optional layout information."
  syntax:
    content: "public Object getLayoutInfo()"
    return:
      type: "java.lang.Object"
      description: "layout information if it has been set for this component, otherwise null"
- uid: "ui.Element.getParent()"
  id: "getParent()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getParent()"
  nameWithType: "Element.getParent()"
  fullName: "ui.Element.getParent()"
  overload: "ui.Element.getParent*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public Container getParent()"
    return:
      type: "ui.Container"
- uid: "ui.Element.getVisible()"
  id: "getVisible()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getVisible()"
  nameWithType: "Element.getVisible()"
  fullName: "ui.Element.getVisible()"
  overload: "ui.Element.getVisible*"
  type: "Method"
  package: "ui"
  summary: "The observable for the visible state of the component."
  syntax:
    content: "public Observable<Boolean> getVisible()"
    return:
      type: "util.Observable<java.lang.Boolean>"
      description: "the observable for visible"
- uid: "ui.Element.getWidth()"
  id: "getWidth()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getWidth()"
  nameWithType: "Element.getWidth()"
  fullName: "ui.Element.getWidth()"
  overload: "ui.Element.getWidth*"
  type: "Method"
  package: "ui"
  summary: "The width of this component."
  syntax:
    content: "public float getWidth()"
    return:
      type: "float"
      description: "the width of this component"
- uid: "ui.Element.getX()"
  id: "getX()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getX()"
  nameWithType: "Element.getX()"
  fullName: "ui.Element.getX()"
  overload: "ui.Element.getX*"
  type: "Method"
  package: "ui"
  summary: "Get the absolute X coordinate of this component. To get relative coordinates use <xref uid=\"ui.Element.getFrame()\" data-throw-if-not-resolved=\"false\">#getFrame()</xref>."
  syntax:
    content: "public float getX()"
    return:
      type: "float"
      description: "the absolute X coordinate"
- uid: "ui.Element.getY()"
  id: "getY()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "getY()"
  nameWithType: "Element.getY()"
  fullName: "ui.Element.getY()"
  overload: "ui.Element.getY*"
  type: "Method"
  package: "ui"
  summary: "Get the absolute Y coordinate of this component. To get relative coordinates use <xref uid=\"ui.Element.getFrame()\" data-throw-if-not-resolved=\"false\">#getFrame()</xref>."
  syntax:
    content: "public float getY()"
    return:
      type: "float"
      description: "the absolute Y coordinate"
- uid: "ui.Element.hasEventHandler()"
  id: "hasEventHandler()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "hasEventHandler()"
  nameWithType: "Element.hasEventHandler()"
  fullName: "ui.Element.hasEventHandler()"
  overload: "ui.Element.hasEventHandler*"
  type: "Method"
  package: "ui"
  summary: "Check whether this component has an eventhandler."
  syntax:
    content: "public boolean hasEventHandler()"
    return:
      type: "boolean"
      description: "true, if and only if this component has an eventhandler"
- uid: "ui.Element.isEnabled()"
  id: "isEnabled()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "isEnabled()"
  nameWithType: "Element.isEnabled()"
  fullName: "ui.Element.isEnabled()"
  overload: "ui.Element.isEnabled*"
  type: "Method"
  package: "ui"
  summary: "A disabled component shall not receive input and might displayed in a greyed out style."
  syntax:
    content: "public boolean isEnabled()"
    return:
      type: "boolean"
      description: "whether the component is enabled."
- uid: "ui.Element.isFocused()"
  id: "isFocused()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "isFocused()"
  nameWithType: "Element.isFocused()"
  fullName: "ui.Element.isFocused()"
  overload: "ui.Element.isFocused*"
  type: "Method"
  package: "ui"
  summary: "A focussed component might react to input differently. e.g. a textfield might only receive input if it is focussed."
  syntax:
    content: "public boolean isFocused()"
    return:
      type: "boolean"
      description: "whether the component is current focused"
- uid: "ui.Element.isMouseOnThis()"
  id: "isMouseOnThis()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "isMouseOnThis()"
  nameWithType: "Element.isMouseOnThis()"
  fullName: "ui.Element.isMouseOnThis()"
  overload: "ui.Element.isMouseOnThis*"
  type: "Method"
  package: "ui"
  summary: "Tells you if the mouse is currently hovering this component."
  syntax:
    content: "public boolean isMouseOnThis()"
    return:
      type: "boolean"
      description: "true, if and only if the mouse is on this component"
- uid: "ui.Element.isVisible()"
  id: "isVisible()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "isVisible()"
  nameWithType: "Element.isVisible()"
  fullName: "ui.Element.isVisible()"
  overload: "ui.Element.isVisible*"
  type: "Method"
  package: "ui"
  summary: "An invisible component shall not be drawn to the screen."
  syntax:
    content: "public boolean isVisible()"
    return:
      type: "boolean"
      description: "whether the component is visible"
- uid: "ui.Element.layoutInfo"
  id: "layoutInfo"
  parent: "ui.Element"
  langs:
  - "java"
  name: "layoutInfo"
  nameWithType: "Element.layoutInfo"
  fullName: "ui.Element.layoutInfo"
  type: "Field"
  package: "ui"
  syntax:
    content: "protected Object layoutInfo"
    return:
      type: "java.lang.Object"
- uid: "ui.Element.mouseOverThis"
  id: "mouseOverThis"
  parent: "ui.Element"
  langs:
  - "java"
  name: "mouseOverThis"
  nameWithType: "Element.mouseOverThis"
  fullName: "ui.Element.mouseOverThis"
  type: "Field"
  package: "ui"
  syntax:
    content: "protected boolean mouseOverThis"
    return:
      type: "boolean"
- uid: "ui.Element.postUpdate()"
  id: "postUpdate()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "postUpdate()"
  nameWithType: "Element.postUpdate()"
  fullName: "ui.Element.postUpdate()"
  overload: "ui.Element.postUpdate*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public void postUpdate()"
- uid: "ui.Element.requestFocus()"
  id: "requestFocus()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "requestFocus()"
  nameWithType: "Element.requestFocus()"
  fullName: "ui.Element.requestFocus()"
  overload: "ui.Element.requestFocus*"
  type: "Method"
  package: "ui"
  summary: "This method requests the focus for this component from <xref uid=\"ui.FocusManager\" data-throw-if-not-resolved=\"false\">FocusManager</xref>. The currently focused component will lose its focus and this component will gain it."
  syntax:
    content: "public void requestFocus()"
- uid: "ui.Element.setCursor(int)"
  id: "setCursor(int)"
  parent: "ui.Element"
  langs:
  - "java"
  name: "setCursor(int id)"
  nameWithType: "Element.setCursor(int id)"
  fullName: "ui.Element.setCursor(int id)"
  overload: "ui.Element.setCursor*"
  type: "Method"
  package: "ui"
  summary: "Set a cursor for this component. The cursor will change for time the mouse is over this component."
  syntax:
    content: "public void setCursor(int id)"
    parameters:
    - id: "id"
      type: "int"
      description: "the id of the cursor as specified in <xref uid=\"ui.CursorManager\" data-throw-if-not-resolved=\"false\">CursorManager</xref>"
- uid: "ui.Element.setEnabled(boolean)"
  id: "setEnabled(boolean)"
  parent: "ui.Element"
  langs:
  - "java"
  name: "setEnabled(boolean enabled)"
  nameWithType: "Element.setEnabled(boolean enabled)"
  fullName: "ui.Element.setEnabled(boolean enabled)"
  overload: "ui.Element.setEnabled*"
  type: "Method"
  package: "ui"
  summary: "Change the enabled state of this component."
  syntax:
    content: "public void setEnabled(boolean enabled)"
    parameters:
    - id: "enabled"
      type: "boolean"
      description: "the new state"
- uid: "ui.Element.setFocused(boolean)"
  id: "setFocused(boolean)"
  parent: "ui.Element"
  langs:
  - "java"
  name: "setFocused(boolean focused)"
  nameWithType: "Element.setFocused(boolean focused)"
  fullName: "ui.Element.setFocused(boolean focused)"
  overload: "ui.Element.setFocused*"
  type: "Method"
  package: "ui"
  summary: "This method shall not be used without thought. Please use <xref uid=\"ui.Element.requestFocus()\" data-throw-if-not-resolved=\"false\">#requestFocus()</xref> instead for most use cases."
  syntax:
    content: "protected void setFocused(boolean focused)"
    parameters:
    - id: "focused"
      type: "boolean"
      description: "the new state"
- uid: "ui.Element.setFont(ui.fonts.Font)"
  id: "setFont(ui.fonts.Font)"
  parent: "ui.Element"
  langs:
  - "java"
  name: "setFont(Font font)"
  nameWithType: "Element.setFont(Font font)"
  fullName: "ui.Element.setFont(Font font)"
  overload: "ui.Element.setFont*"
  type: "Method"
  package: "ui"
  summary: "Set the font for this component. Setting the font to `null` means this component will use the font of its parent container."
  syntax:
    content: "public void setFont(Font font)"
    parameters:
    - id: "font"
      type: "ui.fonts.Font"
      description: "the new font"
- uid: "ui.Element.setLayoutInfo(java.lang.Object)"
  id: "setLayoutInfo(java.lang.Object)"
  parent: "ui.Element"
  langs:
  - "java"
  name: "setLayoutInfo(Object layoutInfo)"
  nameWithType: "Element.setLayoutInfo(Object layoutInfo)"
  fullName: "ui.Element.setLayoutInfo(Object layoutInfo)"
  overload: "ui.Element.setLayoutInfo*"
  type: "Method"
  package: "ui"
  summary: "Set optional layout information."
  syntax:
    content: "public void setLayoutInfo(Object layoutInfo)"
    parameters:
    - id: "layoutInfo"
      type: "java.lang.Object"
      description: "the data required for some layouts"
- uid: "ui.Element.setParent(ui.Container)"
  id: "setParent(ui.Container)"
  parent: "ui.Element"
  langs:
  - "java"
  name: "setParent(Container parent)"
  nameWithType: "Element.setParent(Container parent)"
  fullName: "ui.Element.setParent(Container parent)"
  overload: "ui.Element.setParent*"
  type: "Method"
  package: "ui"
  syntax:
    content: "protected void setParent(Container parent)"
    parameters:
    - id: "parent"
      type: "ui.Container"
- uid: "ui.Element.setVisible(boolean)"
  id: "setVisible(boolean)"
  parent: "ui.Element"
  langs:
  - "java"
  name: "setVisible(boolean visible)"
  nameWithType: "Element.setVisible(boolean visible)"
  fullName: "ui.Element.setVisible(boolean visible)"
  overload: "ui.Element.setVisible*"
  type: "Method"
  package: "ui"
  summary: "Change the visibility state of this component."
  syntax:
    content: "public void setVisible(boolean visible)"
    parameters:
    - id: "visible"
      type: "boolean"
      description: "the new state"
- uid: "ui.Element.update()"
  id: "update()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "update()"
  nameWithType: "Element.update()"
  fullName: "ui.Element.update()"
  overload: "ui.Element.update*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public void update()"
- uid: "ui.Element.visible"
  id: "visible"
  parent: "ui.Element"
  langs:
  - "java"
  name: "visible"
  nameWithType: "Element.visible"
  fullName: "ui.Element.visible"
  type: "Field"
  package: "ui"
  syntax:
    content: "protected final Observable<Boolean> visible"
    return:
      type: "util.Observable<java.lang.Boolean>"
- uid: "ui.Element.zIndex"
  id: "zIndex"
  parent: "ui.Element"
  langs:
  - "java"
  name: "zIndex"
  nameWithType: "Element.zIndex"
  fullName: "ui.Element.zIndex"
  type: "Field"
  package: "ui"
  syntax:
    content: "protected int zIndex"
    return:
      type: "int"
- uid: "ui.Element.zIndex()"
  id: "zIndex()"
  parent: "ui.Element"
  langs:
  - "java"
  name: "zIndex()"
  nameWithType: "Element.zIndex()"
  fullName: "ui.Element.zIndex()"
  overload: "ui.Element.zIndex*"
  type: "Method"
  package: "ui"
  summary: "The z-index, primarily used for the rendering process."
  syntax:
    content: "public int zIndex()"
    return:
      type: "int"
      description: "the z-index"
references:
- uid: "ui.Element.Element*"
  name: "Element"
  nameWithType: "Element.Element"
  fullName: "ui.Element.Element"
  package: "ui"
- uid: "ui.Frame"
  name: "Frame"
  nameWithType: "Frame"
  fullName: "ui.Frame"
- uid: "ui.Element.update*"
  name: "update"
  nameWithType: "Element.update"
  fullName: "ui.Element.update"
  package: "ui"
- uid: "ui.Container"
  name: "Container"
  nameWithType: "Container"
  fullName: "ui.Container"
- uid: "ui.Element.setParent*"
  name: "setParent"
  nameWithType: "Element.setParent"
  fullName: "ui.Element.setParent"
  package: "ui"
- uid: "ui.fonts.Font"
  name: "Font"
  nameWithType: "Font"
  fullName: "ui.fonts.Font"
- uid: "ui.Element.getFont*"
  name: "getFont"
  nameWithType: "Element.getFont"
  fullName: "ui.Element.getFont"
  package: "ui"
- uid: "ui.Element.setFont*"
  name: "setFont"
  nameWithType: "Element.setFont"
  fullName: "ui.Element.setFont"
  package: "ui"
- uid: "util.Observable<java.lang.Boolean>"
  spec.java:
  - uid: "util.Observable"
    name: "Observable"
    fullName: "util.Observable"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Boolean"
    name: "Boolean"
    fullName: "java.lang.Boolean"
  - name: ">"
    fullName: ">"
- uid: "ui.Element.getEnabled*"
  name: "getEnabled"
  nameWithType: "Element.getEnabled"
  fullName: "ui.Element.getEnabled"
  package: "ui"
- uid: "ui.Element.getFocused*"
  name: "getFocused"
  nameWithType: "Element.getFocused"
  fullName: "ui.Element.getFocused"
  package: "ui"
- uid: "ui.Element.getVisible*"
  name: "getVisible"
  nameWithType: "Element.getVisible"
  fullName: "ui.Element.getVisible"
  package: "ui"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "ui.Element.isFocused*"
  name: "isFocused"
  nameWithType: "Element.isFocused"
  fullName: "ui.Element.isFocused"
  package: "ui"
- uid: "ui.Element.isEnabled*"
  name: "isEnabled"
  nameWithType: "Element.isEnabled"
  fullName: "ui.Element.isEnabled"
  package: "ui"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "ui.Element.setCursor*"
  name: "setCursor"
  nameWithType: "Element.setCursor"
  fullName: "ui.Element.setCursor"
  package: "ui"
- uid: "ui.Element.getCursor*"
  name: "getCursor"
  nameWithType: "Element.getCursor"
  fullName: "ui.Element.getCursor"
  package: "ui"
- uid: "ui.Element.setEnabled*"
  name: "setEnabled"
  nameWithType: "Element.setEnabled"
  fullName: "ui.Element.setEnabled"
  package: "ui"
- uid: "ui.Element.setVisible*"
  name: "setVisible"
  nameWithType: "Element.setVisible"
  fullName: "ui.Element.setVisible"
  package: "ui"
- uid: "ui.Element.isVisible*"
  name: "isVisible"
  nameWithType: "Element.isVisible"
  fullName: "ui.Element.isVisible"
  package: "ui"
- uid: "ui.Element.setFocused*"
  name: "setFocused"
  nameWithType: "Element.setFocused"
  fullName: "ui.Element.setFocused"
  package: "ui"
- uid: "ui.Element.requestFocus*"
  name: "requestFocus"
  nameWithType: "Element.requestFocus"
  fullName: "ui.Element.requestFocus"
  package: "ui"
- uid: "ui.Element.getParent*"
  name: "getParent"
  nameWithType: "Element.getParent"
  fullName: "ui.Element.getParent"
  package: "ui"
- uid: "ui.Element.hasEventHandler*"
  name: "hasEventHandler"
  nameWithType: "Element.hasEventHandler"
  fullName: "ui.Element.hasEventHandler"
  package: "ui"
- uid: "ui.EventHandler"
  name: "EventHandler"
  nameWithType: "EventHandler"
  fullName: "ui.EventHandler"
- uid: "ui.Element.getEventHandler*"
  name: "getEventHandler"
  nameWithType: "Element.getEventHandler"
  fullName: "ui.Element.getEventHandler"
  package: "ui"
- uid: "ui.Element.getFrame*"
  name: "getFrame"
  nameWithType: "Element.getFrame"
  fullName: "ui.Element.getFrame"
  package: "ui"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "ui.Element.setLayoutInfo*"
  name: "setLayoutInfo"
  nameWithType: "Element.setLayoutInfo"
  fullName: "ui.Element.setLayoutInfo"
  package: "ui"
- uid: "ui.Element.getLayoutInfo*"
  name: "getLayoutInfo"
  nameWithType: "Element.getLayoutInfo"
  fullName: "ui.Element.getLayoutInfo"
  package: "ui"
- uid: "ui.Element.zIndex*"
  name: "zIndex"
  nameWithType: "Element.zIndex"
  fullName: "ui.Element.zIndex"
  package: "ui"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "ui.Element.getX*"
  name: "getX"
  nameWithType: "Element.getX"
  fullName: "ui.Element.getX"
  package: "ui"
- uid: "ui.Element.getY*"
  name: "getY"
  nameWithType: "Element.getY"
  fullName: "ui.Element.getY"
  package: "ui"
- uid: "ui.Element.getWidth*"
  name: "getWidth"
  nameWithType: "Element.getWidth"
  fullName: "ui.Element.getWidth"
  package: "ui"
- uid: "ui.Element.getHeight*"
  name: "getHeight"
  nameWithType: "Element.getHeight"
  fullName: "ui.Element.getHeight"
  package: "ui"
- uid: "ui.Element.isMouseOnThis*"
  name: "isMouseOnThis"
  nameWithType: "Element.isMouseOnThis"
  fullName: "ui.Element.isMouseOnThis"
  package: "ui"
- uid: "ui.Element.postUpdate*"
  name: "postUpdate"
  nameWithType: "Element.postUpdate"
  fullName: "ui.Element.postUpdate"
  package: "ui"
- uid: "ui.Element.draw*"
  name: "draw"
  nameWithType: "Element.draw"
  fullName: "ui.Element.draw"
  package: "ui"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "util.Observable"
  name: "Observable"
  nameWithType: "Observable"
  fullName: "util.Observable"
- uid: "java.lang.Boolean"
  name: "Boolean"
  nameWithType: "Boolean"
  fullName: "java.lang.Boolean"
