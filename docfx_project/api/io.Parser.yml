### YamlMime:ManagedReference
items:
- uid: "io.Parser"
  id: "Parser"
  parent: "io"
  children:
  - "io.Parser.Parser()"
  - "io.Parser.check(java.util.List<io.token.Token>,int,io.token.TokenReader...)"
  - "io.Parser.get(java.util.List<io.token.Token>,int)"
  - "io.Parser.is(java.util.List<io.token.Token>,int,io.token.TokenReader)"
  - "io.Parser.parse(java.util.List<io.token.Token>)"
  langs:
  - "java"
  name: "Parser<T>"
  nameWithType: "Parser<T>"
  fullName: "io.Parser<T>"
  type: "Class"
  package: "io"
  syntax:
    content: "public abstract class Parser<T>"
    typeParameters:
    - id: "T"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "io.Parser.Parser()"
  id: "Parser()"
  parent: "io.Parser"
  langs:
  - "java"
  name: "Parser()"
  nameWithType: "Parser<T>.Parser()"
  fullName: "io.Parser<T>.Parser()"
  overload: "io.Parser.Parser*"
  type: "Constructor"
  package: "io"
  syntax:
    content: "public Parser()"
- uid: "io.Parser.check(java.util.List<io.token.Token>,int,io.token.TokenReader...)"
  id: "check(java.util.List<io.token.Token>,int,io.token.TokenReader...)"
  parent: "io.Parser"
  langs:
  - "java"
  name: "check(List<Token> tokens, int pos, TokenReader[] readers)"
  nameWithType: "Parser<T>.check(List<Token> tokens, int pos, TokenReader[] readers)"
  fullName: "io.Parser<T>.check(List<Token> tokens, int pos, TokenReader[] readers)"
  overload: "io.Parser.check*"
  type: "Method"
  package: "io"
  summary: "Match a list of tokens at the given position. Starting at pos, executes \\{@link this\\#is(List, int, TokenReader)\\} to test if all tokens are in the right order."
  syntax:
    content: "protected boolean check(List<Token> tokens, int pos, TokenReader[] readers)"
    parameters:
    - id: "tokens"
      type: "java.util.List<io.token.Token>"
      description: "the list of tokens"
    - id: "pos"
      type: "int"
      description: "the position to start matching"
    - id: "readers"
      type: "io.token.TokenReader[]"
      description: "the expected list of tokens by using their <xref uid=\"io.token.TokenReader.type()\" data-throw-if-not-resolved=\"false\">TokenReader#type()</xref>"
    return:
      type: "boolean"
      description: "if the token list matches the expected ones."
- uid: "io.Parser.get(java.util.List<io.token.Token>,int)"
  id: "get(java.util.List<io.token.Token>,int)"
  parent: "io.Parser"
  langs:
  - "java"
  name: "get(List<Token> tokens, int pos)"
  nameWithType: "Parser<T>.get(List<Token> tokens, int pos)"
  fullName: "io.Parser<T>.get(List<Token> tokens, int pos)"
  overload: "io.Parser.get*"
  type: "Method"
  package: "io"
  summary: "Helper method to get a value in of the token list without going out of bounds."
  syntax:
    content: "protected String get(List<Token> tokens, int pos)"
    parameters:
    - id: "tokens"
      type: "java.util.List<io.token.Token>"
      description: "the list of tokens"
    - id: "pos"
      type: "int"
      description: "the position"
    return:
      type: "java.lang.String"
      description: "the value at the given position in the list or <code>null</code> if the position is out of bounds"
- uid: "io.Parser.is(java.util.List<io.token.Token>,int,io.token.TokenReader)"
  id: "is(java.util.List<io.token.Token>,int,io.token.TokenReader)"
  parent: "io.Parser"
  langs:
  - "java"
  name: "is(List<Token> tokens, int pos, TokenReader reader)"
  nameWithType: "Parser<T>.is(List<Token> tokens, int pos, TokenReader reader)"
  fullName: "io.Parser<T>.is(List<Token> tokens, int pos, TokenReader reader)"
  overload: "io.Parser.is*"
  type: "Method"
  package: "io"
  summary: "Match a token."
  syntax:
    content: "protected boolean is(List<Token> tokens, int pos, TokenReader reader)"
    parameters:
    - id: "tokens"
      type: "java.util.List<io.token.Token>"
      description: "the list of tokens"
    - id: "pos"
      type: "int"
      description: "the position to match"
    - id: "reader"
      type: "io.token.TokenReader"
      description: "the expected token to match using its <xref uid=\"io.token.TokenReader.type()\" data-throw-if-not-resolved=\"false\">TokenReader#type()</xref>"
    return:
      type: "boolean"
      description: "true, if and only if the token list has a token at the given position that matches the given type"
- uid: "io.Parser.parse(java.util.List<io.token.Token>)"
  id: "parse(java.util.List<io.token.Token>)"
  parent: "io.Parser"
  langs:
  - "java"
  name: "parse(List<Token> tokens)"
  nameWithType: "Parser<T>.parse(List<Token> tokens)"
  fullName: "io.Parser<T>.parse(List<Token> tokens)"
  overload: "io.Parser.parse*"
  type: "Method"
  package: "io"
  summary: "Parse an object by taking a chronological list of tokens."
  syntax:
    content: "public abstract T parse(List<Token> tokens)"
    parameters:
    - id: "tokens"
      type: "java.util.List<io.token.Token>"
      description: "the chronological list of tokens"
    return:
      type: "T"
      description: "the parsed object"
references:
- uid: "io.Parser.Parser*"
  name: "Parser"
  nameWithType: "Parser<T>.Parser"
  fullName: "io.Parser<T>.Parser"
  package: "io"
- uid: "java.util.List<io.token.Token>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "io.token.Token"
    name: "Token"
    fullName: "io.token.Token"
  - name: ">"
    fullName: ">"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "io.Parser.get*"
  name: "get"
  nameWithType: "Parser<T>.get"
  fullName: "io.Parser<T>.get"
  package: "io"
- uid: "io.token.TokenReader[]"
  spec.java:
  - uid: "io.token.TokenReader"
    name: "TokenReader"
    fullName: "io.token.TokenReader"
  - name: "[]"
    fullName: "[]"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "io.Parser.check*"
  name: "check"
  nameWithType: "Parser<T>.check"
  fullName: "io.Parser<T>.check"
  package: "io"
- uid: "io.token.TokenReader"
  name: "TokenReader"
  nameWithType: "TokenReader"
  fullName: "io.token.TokenReader"
- uid: "io.Parser.is*"
  name: "is"
  nameWithType: "Parser<T>.is"
  fullName: "io.Parser<T>.is"
  package: "io"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "io.Parser.parse*"
  name: "parse"
  nameWithType: "Parser<T>.parse"
  fullName: "io.Parser<T>.parse"
  package: "io"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "io.token.Token"
  name: "Token"
  nameWithType: "Token"
  fullName: "io.token.Token"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
