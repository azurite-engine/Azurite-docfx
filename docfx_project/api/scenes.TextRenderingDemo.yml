### YamlMime:ManagedReference
items:
- uid: "scenes.TextRenderingDemo"
  id: "TextRenderingDemo"
  parent: "scenes"
  children:
  - "scenes.TextRenderingDemo.TextRenderingDemo()"
  - "scenes.TextRenderingDemo.awake()"
  - "scenes.TextRenderingDemo.main(java.lang.String[])"
  - "scenes.TextRenderingDemo.update()"
  langs:
  - "java"
  name: "TextRenderingDemo"
  nameWithType: "TextRenderingDemo"
  fullName: "scenes.TextRenderingDemo"
  type: "Class"
  package: "scenes"
  syntax:
    content: "public class TextRenderingDemo extends Scene"
  inheritance:
  - "java.lang.Object"
  - "scene.Scene"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "scene.Scene.activate()"
  - "scene.Scene.addGameObjectToScene(ecs.GameObject)"
  - "scene.Scene.addText(ui.Text)"
  - "scene.Scene.addToRenderers(ecs.GameObject)"
  - "scene.Scene.addUIElement(ui.Element)"
  - "scene.Scene.awake()"
  - "scene.Scene.camera()"
  - "scene.Scene.clean()"
  - "scene.Scene.deactivate()"
  - "scene.Scene.debugRender()"
  - "scene.Scene.getColliders()"
  - "scene.Scene.getGameObjects()"
  - "scene.Scene.initRenderers()"
  - "scene.Scene.isActive()"
  - "scene.Scene.postProcess(graphics.Texture)"
  - "scene.Scene.registerCollider(ecs.GameObject)"
  - "scene.Scene.registerRenderer(graphics.renderer.Renderer)"
  - "scene.Scene.removeGameObjectFromScene(ecs.GameObject)"
  - "scene.Scene.render()"
  - "scene.Scene.sceneId()"
  - "scene.Scene.startGameObjects()"
  - "scene.Scene.startUi()"
  - "scene.Scene.textRender()"
  - "scene.Scene.unregisterCollider(ecs.GameObject)"
  - "scene.Scene.update()"
  - "scene.Scene.updateGameObjects()"
  - "scene.Scene.updateUI()"
- uid: "scenes.TextRenderingDemo.TextRenderingDemo()"
  id: "TextRenderingDemo()"
  parent: "scenes.TextRenderingDemo"
  langs:
  - "java"
  name: "TextRenderingDemo()"
  nameWithType: "TextRenderingDemo.TextRenderingDemo()"
  fullName: "scenes.TextRenderingDemo.TextRenderingDemo()"
  overload: "scenes.TextRenderingDemo.TextRenderingDemo*"
  type: "Constructor"
  package: "scenes"
  syntax:
    content: "public TextRenderingDemo()"
- uid: "scenes.TextRenderingDemo.awake()"
  id: "awake()"
  parent: "scenes.TextRenderingDemo"
  langs:
  - "java"
  name: "awake()"
  nameWithType: "TextRenderingDemo.awake()"
  fullName: "scenes.TextRenderingDemo.awake()"
  overload: "scenes.TextRenderingDemo.awake*"
  overridden: "scene.Scene.awake()"
  type: "Method"
  package: "scenes"
  summary: "Runs only once on startup, useful for initializing gameObjects or for first time setup."
  syntax:
    content: "public void awake()"
- uid: "scenes.TextRenderingDemo.main(java.lang.String[])"
  id: "main(java.lang.String[])"
  parent: "scenes.TextRenderingDemo"
  langs:
  - "java"
  name: "main(String[] args)"
  nameWithType: "TextRenderingDemo.main(String[] args)"
  fullName: "scenes.TextRenderingDemo.main(String[] args)"
  overload: "scenes.TextRenderingDemo.main*"
  type: "Method"
  package: "scenes"
  syntax:
    content: "public static void main(String[] args)"
    parameters:
    - id: "args"
      type: "java.lang.String[]"
- uid: "scenes.TextRenderingDemo.update()"
  id: "update()"
  parent: "scenes.TextRenderingDemo"
  langs:
  - "java"
  name: "update()"
  nameWithType: "TextRenderingDemo.update()"
  fullName: "scenes.TextRenderingDemo.update()"
  overload: "scenes.TextRenderingDemo.update*"
  overridden: "scene.Scene.update()"
  type: "Method"
  package: "scenes"
  summary: "This method is called every frame, and can be used to update objects."
  syntax:
    content: "public void update()"
references:
- uid: "scenes.TextRenderingDemo.TextRenderingDemo*"
  name: "TextRenderingDemo"
  nameWithType: "TextRenderingDemo.TextRenderingDemo"
  fullName: "scenes.TextRenderingDemo.TextRenderingDemo"
  package: "scenes"
- uid: "java.lang.String[]"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
- uid: "scenes.TextRenderingDemo.main*"
  name: "main"
  nameWithType: "TextRenderingDemo.main"
  fullName: "scenes.TextRenderingDemo.main"
  package: "scenes"
- uid: "scenes.TextRenderingDemo.awake*"
  name: "awake"
  nameWithType: "TextRenderingDemo.awake"
  fullName: "scenes.TextRenderingDemo.awake"
  package: "scenes"
- uid: "scenes.TextRenderingDemo.update*"
  name: "update"
  nameWithType: "TextRenderingDemo.update"
  fullName: "scenes.TextRenderingDemo.update"
  package: "scenes"
- uid: "scene.Scene"
  name: "Scene"
  nameWithType: "Scene"
  fullName: "scene.Scene"
- uid: "scene.Scene.updateGameObjects()"
  name: "Scene.updateGameObjects()"
  nameWithType: "Scene.updateGameObjects()"
  fullName: "scene.Scene.updateGameObjects()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "scene.Scene.update()"
  name: "Scene.update()"
  nameWithType: "Scene.update()"
  fullName: "scene.Scene.update()"
- uid: "scene.Scene.addGameObjectToScene(ecs.GameObject)"
  name: "Scene.addGameObjectToScene(GameObject)"
  nameWithType: "Scene.addGameObjectToScene(GameObject)"
  fullName: "scene.Scene.addGameObjectToScene(ecs.GameObject)"
- uid: "scene.Scene.addToRenderers(ecs.GameObject)"
  name: "Scene.addToRenderers(GameObject)"
  nameWithType: "Scene.addToRenderers(GameObject)"
  fullName: "scene.Scene.addToRenderers(ecs.GameObject)"
- uid: "scene.Scene.startUi()"
  name: "Scene.startUi()"
  nameWithType: "Scene.startUi()"
  fullName: "scene.Scene.startUi()"
- uid: "scene.Scene.startGameObjects()"
  name: "Scene.startGameObjects()"
  nameWithType: "Scene.startGameObjects()"
  fullName: "scene.Scene.startGameObjects()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "scene.Scene.updateUI()"
  name: "Scene.updateUI()"
  nameWithType: "Scene.updateUI()"
  fullName: "scene.Scene.updateUI()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "scene.Scene.addUIElement(ui.Element)"
  name: "Scene.addUIElement(Element)"
  nameWithType: "Scene.addUIElement(Element)"
  fullName: "scene.Scene.addUIElement(ui.Element)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "scene.Scene.removeGameObjectFromScene(ecs.GameObject)"
  name: "Scene.removeGameObjectFromScene(GameObject)"
  nameWithType: "Scene.removeGameObjectFromScene(GameObject)"
  fullName: "scene.Scene.removeGameObjectFromScene(ecs.GameObject)"
- uid: "scene.Scene.registerCollider(ecs.GameObject)"
  name: "Scene.registerCollider(GameObject)"
  nameWithType: "Scene.registerCollider(GameObject)"
  fullName: "scene.Scene.registerCollider(ecs.GameObject)"
- uid: "scene.Scene.getColliders()"
  name: "Scene.getColliders()"
  nameWithType: "Scene.getColliders()"
  fullName: "scene.Scene.getColliders()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "scene.Scene.deactivate()"
  name: "Scene.deactivate()"
  nameWithType: "Scene.deactivate()"
  fullName: "scene.Scene.deactivate()"
- uid: "scene.Scene.getGameObjects()"
  name: "Scene.getGameObjects()"
  nameWithType: "Scene.getGameObjects()"
  fullName: "scene.Scene.getGameObjects()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "scene.Scene.initRenderers()"
  name: "Scene.initRenderers()"
  nameWithType: "Scene.initRenderers()"
  fullName: "scene.Scene.initRenderers()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "scene.Scene.render()"
  name: "Scene.render()"
  nameWithType: "Scene.render()"
  fullName: "scene.Scene.render()"
- uid: "scene.Scene.clean()"
  name: "Scene.clean()"
  nameWithType: "Scene.clean()"
  fullName: "scene.Scene.clean()"
- uid: "scene.Scene.debugRender()"
  name: "Scene.debugRender()"
  nameWithType: "Scene.debugRender()"
  fullName: "scene.Scene.debugRender()"
- uid: "scene.Scene.camera()"
  name: "Scene.camera()"
  nameWithType: "Scene.camera()"
  fullName: "scene.Scene.camera()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "scene.Scene.addText(ui.Text)"
  name: "Scene.addText(Text)"
  nameWithType: "Scene.addText(Text)"
  fullName: "scene.Scene.addText(ui.Text)"
- uid: "scene.Scene.activate()"
  name: "Scene.activate()"
  nameWithType: "Scene.activate()"
  fullName: "scene.Scene.activate()"
- uid: "scene.Scene.isActive()"
  name: "Scene.isActive()"
  nameWithType: "Scene.isActive()"
  fullName: "scene.Scene.isActive()"
- uid: "scene.Scene.postProcess(graphics.Texture)"
  name: "Scene.postProcess(Texture)"
  nameWithType: "Scene.postProcess(Texture)"
  fullName: "scene.Scene.postProcess(graphics.Texture)"
- uid: "scene.Scene.unregisterCollider(ecs.GameObject)"
  name: "Scene.unregisterCollider(GameObject)"
  nameWithType: "Scene.unregisterCollider(GameObject)"
  fullName: "scene.Scene.unregisterCollider(ecs.GameObject)"
- uid: "scene.Scene.awake()"
  name: "Scene.awake()"
  nameWithType: "Scene.awake()"
  fullName: "scene.Scene.awake()"
- uid: "scene.Scene.sceneId()"
  name: "Scene.sceneId()"
  nameWithType: "Scene.sceneId()"
  fullName: "scene.Scene.sceneId()"
- uid: "scene.Scene.registerRenderer(graphics.renderer.Renderer)"
  name: "Scene.registerRenderer(Renderer)"
  nameWithType: "Scene.registerRenderer(Renderer)"
  fullName: "scene.Scene.registerRenderer(graphics.renderer.Renderer)"
- uid: "scene.Scene.textRender()"
  name: "Scene.textRender()"
  nameWithType: "Scene.textRender()"
  fullName: "scene.Scene.textRender()"
