### YamlMime:ManagedReference
items:
- uid: "audio.AudioBuffer"
  id: "AudioBuffer"
  parent: "audio"
  children:
  - "audio.AudioBuffer.AudioBuffer(java.lang.String)"
  - "audio.AudioBuffer.getALBuffers()"
  - "audio.AudioBuffer.getAudioData()"
  - "audio.AudioBuffer.getFormat()"
  - "audio.AudioBuffer.getSampleRate()"
  - "audio.AudioBuffer.getTime()"
  langs:
  - "java"
  name: "AudioBuffer"
  nameWithType: "AudioBuffer"
  fullName: "audio.AudioBuffer"
  type: "Class"
  package: "audio"
  summary: "Instantiations of this class hold all information about how a sound should be replayed and the sound data itself (if you know OpenGL, think of this as a massive vbo containing a single noise or piece of music).\n\nPersonally I don't really like how it works right now; it allocates a lot of memory for every sound file that needs to be played; maybe we can have a destructor or some kind of cleanup daemon?\n\nI based the design off of an article by Michael Eric Oberlin found [here][].\n\n\n[here]: https://michaelericoberlin.wordpress.com/2016/07/04/effective-openal-with-lwjgl-3/"
  syntax:
    content: "public class AudioBuffer"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "audio.AudioBuffer.AudioBuffer()"
  id: "AudioBuffer()"
  parent: "audio.AudioBuffer"
  langs:
  - "java"
  name: "AudioBuffer()"
  nameWithType: "AudioBuffer.AudioBuffer()"
  fullName: "audio.AudioBuffer.AudioBuffer()"
  overload: "audio.AudioBuffer.AudioBuffer*"
  type: "Constructor"
  package: "audio"
  syntax:
    content: "private AudioBuffer()"
- uid: "audio.AudioBuffer.AudioBuffer(java.lang.String)"
  id: "AudioBuffer(java.lang.String)"
  parent: "audio.AudioBuffer"
  langs:
  - "java"
  name: "AudioBuffer(String path)"
  nameWithType: "AudioBuffer.AudioBuffer(String path)"
  fullName: "audio.AudioBuffer.AudioBuffer(String path)"
  overload: "audio.AudioBuffer.AudioBuffer*"
  type: "Constructor"
  package: "audio"
  syntax:
    content: "public AudioBuffer(String path)"
    parameters:
    - id: "path"
      type: "java.lang.String"
- uid: "audio.AudioBuffer.getALBuffers()"
  id: "getALBuffers()"
  parent: "audio.AudioBuffer"
  langs:
  - "java"
  name: "getALBuffers()"
  nameWithType: "AudioBuffer.getALBuffers()"
  fullName: "audio.AudioBuffer.getALBuffers()"
  overload: "audio.AudioBuffer.getALBuffers*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public int[] getALBuffers()"
    return:
      type: "int[]"
- uid: "audio.AudioBuffer.getAudioData()"
  id: "getAudioData()"
  parent: "audio.AudioBuffer"
  langs:
  - "java"
  name: "getAudioData()"
  nameWithType: "AudioBuffer.getAudioData()"
  fullName: "audio.AudioBuffer.getAudioData()"
  overload: "audio.AudioBuffer.getAudioData*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public byte[] getAudioData()"
    return:
      type: "byte[]"
- uid: "audio.AudioBuffer.getFormat()"
  id: "getFormat()"
  parent: "audio.AudioBuffer"
  langs:
  - "java"
  name: "getFormat()"
  nameWithType: "AudioBuffer.getFormat()"
  fullName: "audio.AudioBuffer.getFormat()"
  overload: "audio.AudioBuffer.getFormat*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public int getFormat()"
    return:
      type: "int"
- uid: "audio.AudioBuffer.getSampleRate()"
  id: "getSampleRate()"
  parent: "audio.AudioBuffer"
  langs:
  - "java"
  name: "getSampleRate()"
  nameWithType: "AudioBuffer.getSampleRate()"
  fullName: "audio.AudioBuffer.getSampleRate()"
  overload: "audio.AudioBuffer.getSampleRate*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public float getSampleRate()"
    return:
      type: "float"
- uid: "audio.AudioBuffer.getTime()"
  id: "getTime()"
  parent: "audio.AudioBuffer"
  langs:
  - "java"
  name: "getTime()"
  nameWithType: "AudioBuffer.getTime()"
  fullName: "audio.AudioBuffer.getTime()"
  overload: "audio.AudioBuffer.getTime*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public long getTime()"
    return:
      type: "long"
references:
- uid: "audio.AudioBuffer.AudioBuffer*"
  name: "AudioBuffer"
  nameWithType: "AudioBuffer.AudioBuffer"
  fullName: "audio.AudioBuffer.AudioBuffer"
  package: "audio"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "audio.AudioBuffer.getAudioData*"
  name: "getAudioData"
  nameWithType: "AudioBuffer.getAudioData"
  fullName: "audio.AudioBuffer.getAudioData"
  package: "audio"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "audio.AudioBuffer.getTime*"
  name: "getTime"
  nameWithType: "AudioBuffer.getTime"
  fullName: "audio.AudioBuffer.getTime"
  package: "audio"
- uid: "int[]"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
  - name: "[]"
    fullName: "[]"
- uid: "audio.AudioBuffer.getALBuffers*"
  name: "getALBuffers"
  nameWithType: "AudioBuffer.getALBuffers"
  fullName: "audio.AudioBuffer.getALBuffers"
  package: "audio"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "audio.AudioBuffer.getFormat*"
  name: "getFormat"
  nameWithType: "AudioBuffer.getFormat"
  fullName: "audio.AudioBuffer.getFormat"
  package: "audio"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "audio.AudioBuffer.getSampleRate*"
  name: "getSampleRate"
  nameWithType: "AudioBuffer.getSampleRate"
  fullName: "audio.AudioBuffer.getSampleRate"
  package: "audio"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
