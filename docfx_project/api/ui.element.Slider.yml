### YamlMime:ManagedReference
items:
- uid: "ui.element.Slider"
  id: "Slider"
  parent: "ui.element"
  children:
  - "ui.element.Slider.Slider(float,float)"
  - "ui.element.Slider.Slider(float,float,float,ui.Alignment)"
  - "ui.element.Slider.getCurrentRelativeScale()"
  - "ui.element.Slider.getCurrentScale()"
  - "ui.element.Slider.getCurrentScaleObservable()"
  - "ui.element.Slider.getMaxScale()"
  - "ui.element.Slider.getMinScale()"
  - "ui.element.Slider.getOrientation()"
  - "ui.element.Slider.getValue()"
  - "ui.element.Slider.setCurrentScale(float)"
  - "ui.element.Slider.setMaxScale(float)"
  - "ui.element.Slider.setMinScale(float)"
  - "ui.element.Slider.setOrientation(ui.Alignment)"
  - "ui.element.Slider.setValue(float)"
  langs:
  - "java"
  name: "Slider"
  nameWithType: "Slider"
  fullName: "ui.element.Slider"
  type: "Class"
  package: "ui.element"
  summary: "A bar with a single node on it, that can be slided across the bar. Could be described as value picker as well."
  syntax:
    content: "public class Slider extends Element implements ValueHolder"
  inheritance:
  - "java.lang.Object"
  - "ui.Element"
  implements:
  - "ui.element.ValueHolder"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "ui.Element.draw()"
  - "ui.Element.getCursor()"
  - "ui.Element.getEnabled()"
  - "ui.Element.getEventHandler()"
  - "ui.Element.getFocused()"
  - "ui.Element.getFont()"
  - "ui.Element.getFrame()"
  - "ui.Element.getHeight()"
  - "ui.Element.getLayoutInfo()"
  - "ui.Element.getParent()"
  - "ui.Element.getVisible()"
  - "ui.Element.getWidth()"
  - "ui.Element.getX()"
  - "ui.Element.getY()"
  - "ui.Element.hasEventHandler()"
  - "ui.Element.isEnabled()"
  - "ui.Element.isFocused()"
  - "ui.Element.isMouseOnThis()"
  - "ui.Element.isVisible()"
  - "ui.Element.postUpdate()"
  - "ui.Element.requestFocus()"
  - "ui.Element.setCursor(int)"
  - "ui.Element.setEnabled(boolean)"
  - "ui.Element.setFocused(boolean)"
  - "ui.Element.setFont(ui.fonts.Font)"
  - "ui.Element.setLayoutInfo(java.lang.Object)"
  - "ui.Element.setParent(ui.Container)"
  - "ui.Element.setVisible(boolean)"
  - "ui.Element.update()"
  - "ui.Element.zIndex()"
- uid: "ui.element.Slider.Slider(float,float)"
  id: "Slider(float,float)"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "Slider(float minScale, float maxScale)"
  nameWithType: "Slider.Slider(float minScale, float maxScale)"
  fullName: "ui.element.Slider.Slider(float minScale, float maxScale)"
  overload: "ui.element.Slider.Slider*"
  type: "Constructor"
  package: "ui.element"
  syntax:
    content: "public Slider(float minScale, float maxScale)"
    parameters:
    - id: "minScale"
      type: "float"
    - id: "maxScale"
      type: "float"
- uid: "ui.element.Slider.Slider(float,float,float,ui.Alignment)"
  id: "Slider(float,float,float,ui.Alignment)"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "Slider(float minScale, float maxScale, float currentScale, Alignment orientation)"
  nameWithType: "Slider.Slider(float minScale, float maxScale, float currentScale, Alignment orientation)"
  fullName: "ui.element.Slider.Slider(float minScale, float maxScale, float currentScale, Alignment orientation)"
  overload: "ui.element.Slider.Slider*"
  type: "Constructor"
  package: "ui.element"
  syntax:
    content: "public Slider(float minScale, float maxScale, float currentScale, Alignment orientation)"
    parameters:
    - id: "minScale"
      type: "float"
    - id: "maxScale"
      type: "float"
    - id: "currentScale"
      type: "float"
    - id: "orientation"
      type: "ui.Alignment"
- uid: "ui.element.Slider.getCurrentRelativeScale()"
  id: "getCurrentRelativeScale()"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "getCurrentRelativeScale()"
  nameWithType: "Slider.getCurrentRelativeScale()"
  fullName: "ui.element.Slider.getCurrentRelativeScale()"
  overload: "ui.element.Slider.getCurrentRelativeScale*"
  type: "Method"
  package: "ui.element"
  summary: "The exact current scale as a value between 0 and 1"
  syntax:
    content: "public float getCurrentRelativeScale()"
    return:
      type: "float"
      description: "exact current scale."
- uid: "ui.element.Slider.getCurrentScale()"
  id: "getCurrentScale()"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "getCurrentScale()"
  nameWithType: "Slider.getCurrentScale()"
  fullName: "ui.element.Slider.getCurrentScale()"
  overload: "ui.element.Slider.getCurrentScale*"
  type: "Method"
  package: "ui.element"
  summary: "Gets the current absolute value between min and max the slider is set on."
  syntax:
    content: "public float getCurrentScale()"
    return:
      type: "float"
      description: "the current absolute value"
- uid: "ui.element.Slider.getCurrentScaleObservable()"
  id: "getCurrentScaleObservable()"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "getCurrentScaleObservable()"
  nameWithType: "Slider.getCurrentScaleObservable()"
  fullName: "ui.element.Slider.getCurrentScaleObservable()"
  overload: "ui.element.Slider.getCurrentScaleObservable*"
  type: "Method"
  package: "ui.element"
  summary: "Get the observable for the exact current scale value."
  syntax:
    content: "public Observable<Float> getCurrentScaleObservable()"
    return:
      type: "util.Observable<java.lang.Float>"
      description: "the observable for the current scale"
- uid: "ui.element.Slider.getMaxScale()"
  id: "getMaxScale()"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "getMaxScale()"
  nameWithType: "Slider.getMaxScale()"
  fullName: "ui.element.Slider.getMaxScale()"
  overload: "ui.element.Slider.getMaxScale*"
  type: "Method"
  package: "ui.element"
  summary: "The maximum value of this slider"
  syntax:
    content: "public float getMaxScale()"
    return:
      type: "float"
      description: "the maximum value"
- uid: "ui.element.Slider.getMinScale()"
  id: "getMinScale()"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "getMinScale()"
  nameWithType: "Slider.getMinScale()"
  fullName: "ui.element.Slider.getMinScale()"
  overload: "ui.element.Slider.getMinScale*"
  type: "Method"
  package: "ui.element"
  summary: "The minimum value of this slider"
  syntax:
    content: "public float getMinScale()"
    return:
      type: "float"
      description: "the minimum value"
- uid: "ui.element.Slider.getOrientation()"
  id: "getOrientation()"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "getOrientation()"
  nameWithType: "Slider.getOrientation()"
  fullName: "ui.element.Slider.getOrientation()"
  overload: "ui.element.Slider.getOrientation*"
  type: "Method"
  package: "ui.element"
  summary: "Get the current orientation"
  syntax:
    content: "public Alignment getOrientation()"
    return:
      type: "ui.Alignment"
      description: "the current orientation"
- uid: "ui.element.Slider.getValue()"
  id: "getValue()"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "getValue()"
  nameWithType: "Slider.getValue()"
  fullName: "ui.element.Slider.getValue()"
  overload: "ui.element.Slider.getValue*"
  type: "Method"
  package: "ui.element"
  syntax:
    content: "public float getValue()"
    return:
      type: "float"
- uid: "ui.element.Slider.setCurrentScale(float)"
  id: "setCurrentScale(float)"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "setCurrentScale(float currentScale)"
  nameWithType: "Slider.setCurrentScale(float currentScale)"
  fullName: "ui.element.Slider.setCurrentScale(float currentScale)"
  overload: "ui.element.Slider.setCurrentScale*"
  type: "Method"
  package: "ui.element"
  summary: "Set the current scale to a value between 0 and 1"
  syntax:
    content: "public void setCurrentScale(float currentScale)"
    parameters:
    - id: "currentScale"
      type: "float"
      description: "the current scale"
- uid: "ui.element.Slider.setMaxScale(float)"
  id: "setMaxScale(float)"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "setMaxScale(float maxScale)"
  nameWithType: "Slider.setMaxScale(float maxScale)"
  fullName: "ui.element.Slider.setMaxScale(float maxScale)"
  overload: "ui.element.Slider.setMaxScale*"
  type: "Method"
  package: "ui.element"
  summary: "Change the maximum value"
  syntax:
    content: "public void setMaxScale(float maxScale)"
    parameters:
    - id: "maxScale"
      type: "float"
      description: "the new maximum value"
- uid: "ui.element.Slider.setMinScale(float)"
  id: "setMinScale(float)"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "setMinScale(float minScale)"
  nameWithType: "Slider.setMinScale(float minScale)"
  fullName: "ui.element.Slider.setMinScale(float minScale)"
  overload: "ui.element.Slider.setMinScale*"
  type: "Method"
  package: "ui.element"
  summary: "Change the minimum value"
  syntax:
    content: "public void setMinScale(float minScale)"
    parameters:
    - id: "minScale"
      type: "float"
      description: "the new minimum value"
- uid: "ui.element.Slider.setOrientation(ui.Alignment)"
  id: "setOrientation(ui.Alignment)"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "setOrientation(Alignment orientation)"
  nameWithType: "Slider.setOrientation(Alignment orientation)"
  fullName: "ui.element.Slider.setOrientation(Alignment orientation)"
  overload: "ui.element.Slider.setOrientation*"
  type: "Method"
  package: "ui.element"
  summary: "Change the orientation"
  syntax:
    content: "public void setOrientation(Alignment orientation)"
    parameters:
    - id: "orientation"
      type: "ui.Alignment"
      description: "the new orientation"
- uid: "ui.element.Slider.setValue(float)"
  id: "setValue(float)"
  parent: "ui.element.Slider"
  langs:
  - "java"
  name: "setValue(float newValue)"
  nameWithType: "Slider.setValue(float newValue)"
  fullName: "ui.element.Slider.setValue(float newValue)"
  overload: "ui.element.Slider.setValue*"
  type: "Method"
  package: "ui.element"
  syntax:
    content: "public void setValue(float newValue)"
    parameters:
    - id: "newValue"
      type: "float"
references:
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "ui.Alignment"
  name: "Alignment"
  nameWithType: "Alignment"
  fullName: "ui.Alignment"
- uid: "ui.element.Slider.Slider*"
  name: "Slider"
  nameWithType: "Slider.Slider"
  fullName: "ui.element.Slider.Slider"
  package: "ui.element"
- uid: "ui.element.Slider.getCurrentScale*"
  name: "getCurrentScale"
  nameWithType: "Slider.getCurrentScale"
  fullName: "ui.element.Slider.getCurrentScale"
  package: "ui.element"
- uid: "ui.element.Slider.getCurrentRelativeScale*"
  name: "getCurrentRelativeScale"
  nameWithType: "Slider.getCurrentRelativeScale"
  fullName: "ui.element.Slider.getCurrentRelativeScale"
  package: "ui.element"
- uid: "ui.element.Slider.getMaxScale*"
  name: "getMaxScale"
  nameWithType: "Slider.getMaxScale"
  fullName: "ui.element.Slider.getMaxScale"
  package: "ui.element"
- uid: "ui.element.Slider.getMinScale*"
  name: "getMinScale"
  nameWithType: "Slider.getMinScale"
  fullName: "ui.element.Slider.getMinScale"
  package: "ui.element"
- uid: "ui.element.Slider.setCurrentScale*"
  name: "setCurrentScale"
  nameWithType: "Slider.setCurrentScale"
  fullName: "ui.element.Slider.setCurrentScale"
  package: "ui.element"
- uid: "util.Observable<java.lang.Float>"
  spec.java:
  - uid: "util.Observable"
    name: "Observable"
    fullName: "util.Observable"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Float"
    name: "Float"
    fullName: "java.lang.Float"
  - name: ">"
    fullName: ">"
- uid: "ui.element.Slider.getCurrentScaleObservable*"
  name: "getCurrentScaleObservable"
  nameWithType: "Slider.getCurrentScaleObservable"
  fullName: "ui.element.Slider.getCurrentScaleObservable"
  package: "ui.element"
- uid: "ui.element.Slider.setMaxScale*"
  name: "setMaxScale"
  nameWithType: "Slider.setMaxScale"
  fullName: "ui.element.Slider.setMaxScale"
  package: "ui.element"
- uid: "ui.element.Slider.setMinScale*"
  name: "setMinScale"
  nameWithType: "Slider.setMinScale"
  fullName: "ui.element.Slider.setMinScale"
  package: "ui.element"
- uid: "ui.element.Slider.getOrientation*"
  name: "getOrientation"
  nameWithType: "Slider.getOrientation"
  fullName: "ui.element.Slider.getOrientation"
  package: "ui.element"
- uid: "ui.element.Slider.setOrientation*"
  name: "setOrientation"
  nameWithType: "Slider.setOrientation"
  fullName: "ui.element.Slider.setOrientation"
  package: "ui.element"
- uid: "ui.element.Slider.getValue*"
  name: "getValue"
  nameWithType: "Slider.getValue"
  fullName: "ui.element.Slider.getValue"
  package: "ui.element"
- uid: "ui.element.Slider.setValue*"
  name: "setValue"
  nameWithType: "Slider.setValue"
  fullName: "ui.element.Slider.setValue"
  package: "ui.element"
- uid: "ui.Element"
  name: "Element"
  nameWithType: "Element"
  fullName: "ui.Element"
- uid: "ui.element.ValueHolder"
  name: "ValueHolder"
  nameWithType: "ValueHolder"
  fullName: "ui.element.ValueHolder"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "ui.Element.setParent(ui.Container)"
  name: "Element.setParent(Container)"
  nameWithType: "Element.setParent(Container)"
  fullName: "ui.Element.setParent(ui.Container)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "ui.Element.isFocused()"
  name: "Element.isFocused()"
  nameWithType: "Element.isFocused()"
  fullName: "ui.Element.isFocused()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "ui.Element.getLayoutInfo()"
  name: "Element.getLayoutInfo()"
  nameWithType: "Element.getLayoutInfo()"
  fullName: "ui.Element.getLayoutInfo()"
- uid: "ui.Element.getY()"
  name: "Element.getY()"
  nameWithType: "Element.getY()"
  fullName: "ui.Element.getY()"
- uid: "ui.Element.getCursor()"
  name: "Element.getCursor()"
  nameWithType: "Element.getCursor()"
  fullName: "ui.Element.getCursor()"
- uid: "ui.Element.isEnabled()"
  name: "Element.isEnabled()"
  nameWithType: "Element.isEnabled()"
  fullName: "ui.Element.isEnabled()"
- uid: "ui.Element.getWidth()"
  name: "Element.getWidth()"
  nameWithType: "Element.getWidth()"
  fullName: "ui.Element.getWidth()"
- uid: "ui.Element.setFocused(boolean)"
  name: "Element.setFocused(boolean)"
  nameWithType: "Element.setFocused(boolean)"
  fullName: "ui.Element.setFocused(boolean)"
- uid: "ui.Element.getHeight()"
  name: "Element.getHeight()"
  nameWithType: "Element.getHeight()"
  fullName: "ui.Element.getHeight()"
- uid: "ui.Element.zIndex()"
  name: "Element.zIndex()"
  nameWithType: "Element.zIndex()"
  fullName: "ui.Element.zIndex()"
- uid: "ui.Element.getX()"
  name: "Element.getX()"
  nameWithType: "Element.getX()"
  fullName: "ui.Element.getX()"
- uid: "ui.Element.setFont(ui.fonts.Font)"
  name: "Element.setFont(Font)"
  nameWithType: "Element.setFont(Font)"
  fullName: "ui.Element.setFont(ui.fonts.Font)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "ui.Element.setVisible(boolean)"
  name: "Element.setVisible(boolean)"
  nameWithType: "Element.setVisible(boolean)"
  fullName: "ui.Element.setVisible(boolean)"
- uid: "ui.Element.update()"
  name: "Element.update()"
  nameWithType: "Element.update()"
  fullName: "ui.Element.update()"
- uid: "ui.Element.setCursor(int)"
  name: "Element.setCursor(int)"
  nameWithType: "Element.setCursor(int)"
  fullName: "ui.Element.setCursor(int)"
- uid: "ui.Element.getParent()"
  name: "Element.getParent()"
  nameWithType: "Element.getParent()"
  fullName: "ui.Element.getParent()"
- uid: "ui.Element.requestFocus()"
  name: "Element.requestFocus()"
  nameWithType: "Element.requestFocus()"
  fullName: "ui.Element.requestFocus()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "ui.Element.hasEventHandler()"
  name: "Element.hasEventHandler()"
  nameWithType: "Element.hasEventHandler()"
  fullName: "ui.Element.hasEventHandler()"
- uid: "ui.Element.postUpdate()"
  name: "Element.postUpdate()"
  nameWithType: "Element.postUpdate()"
  fullName: "ui.Element.postUpdate()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "ui.Element.getFocused()"
  name: "Element.getFocused()"
  nameWithType: "Element.getFocused()"
  fullName: "ui.Element.getFocused()"
- uid: "ui.Element.isMouseOnThis()"
  name: "Element.isMouseOnThis()"
  nameWithType: "Element.isMouseOnThis()"
  fullName: "ui.Element.isMouseOnThis()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "ui.Element.setLayoutInfo(java.lang.Object)"
  name: "Element.setLayoutInfo(Object)"
  nameWithType: "Element.setLayoutInfo(Object)"
  fullName: "ui.Element.setLayoutInfo(java.lang.Object)"
- uid: "ui.Element.getFont()"
  name: "Element.getFont()"
  nameWithType: "Element.getFont()"
  fullName: "ui.Element.getFont()"
- uid: "ui.Element.getEventHandler()"
  name: "Element.getEventHandler()"
  nameWithType: "Element.getEventHandler()"
  fullName: "ui.Element.getEventHandler()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ui.Element.getVisible()"
  name: "Element.getVisible()"
  nameWithType: "Element.getVisible()"
  fullName: "ui.Element.getVisible()"
- uid: "ui.Element.getEnabled()"
  name: "Element.getEnabled()"
  nameWithType: "Element.getEnabled()"
  fullName: "ui.Element.getEnabled()"
- uid: "ui.Element.draw()"
  name: "Element.draw()"
  nameWithType: "Element.draw()"
  fullName: "ui.Element.draw()"
- uid: "ui.Element.isVisible()"
  name: "Element.isVisible()"
  nameWithType: "Element.isVisible()"
  fullName: "ui.Element.isVisible()"
- uid: "ui.Element.setEnabled(boolean)"
  name: "Element.setEnabled(boolean)"
  nameWithType: "Element.setEnabled(boolean)"
  fullName: "ui.Element.setEnabled(boolean)"
- uid: "ui.Element.getFrame()"
  name: "Element.getFrame()"
  nameWithType: "Element.getFrame()"
  fullName: "ui.Element.getFrame()"
- uid: "java.lang.Float"
  name: "Float"
  nameWithType: "Float"
  fullName: "java.lang.Float"
- uid: "util.Observable"
  name: "Observable"
  nameWithType: "Observable"
  fullName: "util.Observable"
