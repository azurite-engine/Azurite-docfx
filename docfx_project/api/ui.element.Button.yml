### YamlMime:ManagedReference
items:
- uid: "ui.element.Button"
  id: "Button"
  parent: "ui.element"
  children:
  - "ui.element.Button.Button(java.lang.String,graphics.Color,graphics.Color,ui.Frame)"
  - "ui.element.Button.Button(java.lang.String,graphics.Sprite,graphics.Color,ui.Frame)"
  - "ui.element.Button.Button(java.lang.String,java.lang.String,graphics.Color,ui.Frame)"
  - "ui.element.Button.getText()"
  - "ui.element.Button.setText(java.lang.String)"
  - "ui.element.Button.update()"
  langs:
  - "java"
  name: "Button"
  nameWithType: "Button"
  fullName: "ui.element.Button"
  type: "Class"
  package: "ui.element"
  summary: "The Button class represents a graphical user interface (GUI) button that can be rendered on a frame. It extends the RenderableElement class and implements the TextHolder interface, allowing it to display text on the button. Buttons can be created with different label text, background colors, label colors, and frames. Buttons can also be updated to change their appearance based on mouse interactions, such as hovering over the button. Usage example:\n\n```java\nimport ui.EventHandler.Event;\n import ui.element.Button;\n \n public class Main extends Scene {\n     // ...\n \n     Button btn;\n     public void awake() {\n         // ...\n         btn = new Button(\"Click Me!\", Color.RED, Color.WHITE, new Frame(20, 20, 200, 100));  \n         btn.getEventHandler().registerListener(Event.MOUSE_CLICK, e -> {\n             System.out.println(\"Button clicked!\");\n         });\n     }\n\n     public void update() {\n         // ...\n     }\n }\n```\n\nThe above example demonstrates how to create a new Button object with label text \"Click Me!\", a red background color, white label color, and a frame with coordinates (20, 20) and size (200, 100). It also registers a mouse click event listener on the button, which will print \"Button clicked!\" to the console when the button is clicked."
  syntax:
    content: "public class Button extends RenderableElement implements TextHolder"
  inheritance:
  - "java.lang.Object"
  - "ui.Element"
  - "ui.RenderableElement"
  implements:
  - "ui.element.TextHolder"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "ui.Element.draw()"
  - "ui.Element.getCursor()"
  - "ui.Element.getEnabled()"
  - "ui.Element.getEventHandler()"
  - "ui.Element.getFocused()"
  - "ui.Element.getFont()"
  - "ui.Element.getFrame()"
  - "ui.Element.getHeight()"
  - "ui.Element.getLayoutInfo()"
  - "ui.Element.getParent()"
  - "ui.Element.getVisible()"
  - "ui.Element.getWidth()"
  - "ui.Element.getX()"
  - "ui.Element.getY()"
  - "ui.Element.hasEventHandler()"
  - "ui.Element.isEnabled()"
  - "ui.Element.isFocused()"
  - "ui.Element.isMouseOnThis()"
  - "ui.Element.isVisible()"
  - "ui.Element.postUpdate()"
  - "ui.Element.requestFocus()"
  - "ui.Element.setCursor(int)"
  - "ui.Element.setEnabled(boolean)"
  - "ui.Element.setFocused(boolean)"
  - "ui.Element.setFont(ui.fonts.Font)"
  - "ui.Element.setLayoutInfo(java.lang.Object)"
  - "ui.Element.setParent(ui.Container)"
  - "ui.Element.setVisible(boolean)"
  - "ui.Element.update()"
  - "ui.Element.zIndex()"
  - "ui.RenderableElement.getColor()"
  - "ui.RenderableElement.getColorVector()"
  - "ui.RenderableElement.getRenderFrame()"
  - "ui.RenderableElement.getTexCoords()"
  - "ui.RenderableElement.getTexture()"
  - "ui.RenderableElement.setAlpha(float)"
  - "ui.RenderableElement.setColor(graphics.Color)"
  - "ui.RenderableElement.setColor(org.joml.Vector4f)"
  - "ui.RenderableElement.setRenderFrame(ui.Frame)"
  - "ui.RenderableElement.setSize(org.joml.Vector2f)"
  - "ui.RenderableElement.setSprite(graphics.Sprite)"
  - "ui.RenderableElement.setTexture(graphics.Texture)"
  - "ui.RenderableElement.start()"
  - "ui.RenderableElement.update(float)"
- uid: "ui.element.Button.Button(java.lang.String,graphics.Color,graphics.Color,ui.Frame)"
  id: "Button(java.lang.String,graphics.Color,graphics.Color,ui.Frame)"
  parent: "ui.element.Button"
  langs:
  - "java"
  name: "Button(String label, Color backgroundColor, Color labelColor, Frame frame)"
  nameWithType: "Button.Button(String label, Color backgroundColor, Color labelColor, Frame frame)"
  fullName: "ui.element.Button.Button(String label, Color backgroundColor, Color labelColor, Frame frame)"
  overload: "ui.element.Button.Button*"
  type: "Constructor"
  package: "ui.element"
  summary: "Constructs a Button object with the specified label text, background color, label color, and frame."
  syntax:
    content: "public Button(String label, Color backgroundColor, Color labelColor, Frame frame)"
    parameters:
    - id: "label"
      type: "java.lang.String"
      description: "The text to be displayed on the button"
    - id: "backgroundColor"
      type: "graphics.Color"
      description: "The background color of the button"
    - id: "labelColor"
      type: "graphics.Color"
      description: "The color of the label text on the button"
    - id: "frame"
      type: "ui.Frame"
      description: "The frame in which the button will be rendered"
- uid: "ui.element.Button.Button(java.lang.String,graphics.Sprite,graphics.Color,ui.Frame)"
  id: "Button(java.lang.String,graphics.Sprite,graphics.Color,ui.Frame)"
  parent: "ui.element.Button"
  langs:
  - "java"
  name: "Button(String label, Sprite texture, Color labelColor, Frame frame)"
  nameWithType: "Button.Button(String label, Sprite texture, Color labelColor, Frame frame)"
  fullName: "ui.element.Button.Button(String label, Sprite texture, Color labelColor, Frame frame)"
  overload: "ui.element.Button.Button*"
  type: "Constructor"
  package: "ui.element"
  summary: "Constructs a Button object with the specified label text, sprite texture, label color, and frame."
  syntax:
    content: "public Button(String label, Sprite texture, Color labelColor, Frame frame)"
    parameters:
    - id: "label"
      type: "java.lang.String"
      description: "The text to be displayed on the button"
    - id: "texture"
      type: "graphics.Sprite"
      description: "The sprite texture to be used as the background of the\n                   button"
    - id: "labelColor"
      type: "graphics.Color"
      description: "The color of the label text on the button"
    - id: "frame"
      type: "ui.Frame"
      description: "The frame on which the button will be rendered"
- uid: "ui.element.Button.Button(java.lang.String,java.lang.String,graphics.Color,ui.Frame)"
  id: "Button(java.lang.String,java.lang.String,graphics.Color,ui.Frame)"
  parent: "ui.element.Button"
  langs:
  - "java"
  name: "Button(String label, String path, Color labelColor, Frame frame)"
  nameWithType: "Button.Button(String label, String path, Color labelColor, Frame frame)"
  fullName: "ui.element.Button.Button(String label, String path, Color labelColor, Frame frame)"
  overload: "ui.element.Button.Button*"
  type: "Constructor"
  package: "ui.element"
  summary: "Constructs a Button object with the specified label text, image path, label color, and frame."
  syntax:
    content: "public Button(String label, String path, Color labelColor, Frame frame)"
    parameters:
    - id: "label"
      type: "java.lang.String"
      description: "The text to be displayed on the button"
    - id: "path"
      type: "java.lang.String"
      description: "The path to the image to be used as the background of the\n                   button"
    - id: "labelColor"
      type: "graphics.Color"
      description: "The color of the label text on the button"
    - id: "frame"
      type: "ui.Frame"
      description: "The frame in which the button will be rendered"
- uid: "ui.element.Button.getText()"
  id: "getText()"
  parent: "ui.element.Button"
  langs:
  - "java"
  name: "getText()"
  nameWithType: "Button.getText()"
  fullName: "ui.element.Button.getText()"
  overload: "ui.element.Button.getText*"
  type: "Method"
  package: "ui.element"
  summary: "Returns the text currently displayed on the button."
  syntax:
    content: "public String getText()"
    return:
      type: "java.lang.String"
      description: "The text currently displayed on the button"
- uid: "ui.element.Button.setText(java.lang.String)"
  id: "setText(java.lang.String)"
  parent: "ui.element.Button"
  langs:
  - "java"
  name: "setText(String text)"
  nameWithType: "Button.setText(String text)"
  fullName: "ui.element.Button.setText(String text)"
  overload: "ui.element.Button.setText*"
  type: "Method"
  package: "ui.element"
  summary: "Sets the text to be displayed on the button."
  syntax:
    content: "public void setText(String text)"
    parameters:
    - id: "text"
      type: "java.lang.String"
      description: "The text to be displayed on the button"
- uid: "ui.element.Button.update()"
  id: "update()"
  parent: "ui.element.Button"
  langs:
  - "java"
  name: "update()"
  nameWithType: "Button.update()"
  fullName: "ui.element.Button.update()"
  overload: "ui.element.Button.update*"
  overridden: "ui.Element.update()"
  type: "Method"
  package: "ui.element"
  summary: "Updates the appearance of the button based on mouse interactions, such as hovering over the button. The label position is also updated to be centered on the button. This is called by the engine and should not be called by the user."
  syntax:
    content: "public void update()"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "ui.Frame"
  name: "Frame"
  nameWithType: "Frame"
  fullName: "ui.Frame"
- uid: "ui.element.Button.Button*"
  name: "Button"
  nameWithType: "Button.Button"
  fullName: "ui.element.Button.Button"
  package: "ui.element"
- uid: "graphics.Sprite"
  name: "Sprite"
  nameWithType: "Sprite"
  fullName: "graphics.Sprite"
- uid: "ui.element.Button.getText*"
  name: "getText"
  nameWithType: "Button.getText"
  fullName: "ui.element.Button.getText"
  package: "ui.element"
- uid: "ui.element.Button.setText*"
  name: "setText"
  nameWithType: "Button.setText"
  fullName: "ui.element.Button.setText"
  package: "ui.element"
- uid: "ui.element.Button.update*"
  name: "update"
  nameWithType: "Button.update"
  fullName: "ui.element.Button.update"
  package: "ui.element"
- uid: "ui.RenderableElement"
  name: "RenderableElement"
  nameWithType: "RenderableElement"
  fullName: "ui.RenderableElement"
- uid: "ui.element.TextHolder"
  name: "TextHolder"
  nameWithType: "TextHolder"
  fullName: "ui.element.TextHolder"
- uid: "ui.RenderableElement.getColor()"
  name: "RenderableElement.getColor()"
  nameWithType: "RenderableElement.getColor()"
  fullName: "ui.RenderableElement.getColor()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "ui.Element.getLayoutInfo()"
  name: "Element.getLayoutInfo()"
  nameWithType: "Element.getLayoutInfo()"
  fullName: "ui.Element.getLayoutInfo()"
- uid: "ui.Element.getCursor()"
  name: "Element.getCursor()"
  nameWithType: "Element.getCursor()"
  fullName: "ui.Element.getCursor()"
- uid: "ui.Element.getWidth()"
  name: "Element.getWidth()"
  nameWithType: "Element.getWidth()"
  fullName: "ui.Element.getWidth()"
- uid: "ui.Element.setFocused(boolean)"
  name: "Element.setFocused(boolean)"
  nameWithType: "Element.setFocused(boolean)"
  fullName: "ui.Element.setFocused(boolean)"
- uid: "ui.RenderableElement.getTexture()"
  name: "RenderableElement.getTexture()"
  nameWithType: "RenderableElement.getTexture()"
  fullName: "ui.RenderableElement.getTexture()"
- uid: "ui.Element.getHeight()"
  name: "Element.getHeight()"
  nameWithType: "Element.getHeight()"
  fullName: "ui.Element.getHeight()"
- uid: "ui.RenderableElement.setTexture(graphics.Texture)"
  name: "RenderableElement.setTexture(Texture)"
  nameWithType: "RenderableElement.setTexture(Texture)"
  fullName: "ui.RenderableElement.setTexture(graphics.Texture)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "ui.Element.getX()"
  name: "Element.getX()"
  nameWithType: "Element.getX()"
  fullName: "ui.Element.getX()"
- uid: "ui.Element.setFont(ui.fonts.Font)"
  name: "Element.setFont(Font)"
  nameWithType: "Element.setFont(Font)"
  fullName: "ui.Element.setFont(ui.fonts.Font)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "ui.Element.setVisible(boolean)"
  name: "Element.setVisible(boolean)"
  nameWithType: "Element.setVisible(boolean)"
  fullName: "ui.Element.setVisible(boolean)"
- uid: "ui.Element.setCursor(int)"
  name: "Element.setCursor(int)"
  nameWithType: "Element.setCursor(int)"
  fullName: "ui.Element.setCursor(int)"
- uid: "ui.Element.getParent()"
  name: "Element.getParent()"
  nameWithType: "Element.getParent()"
  fullName: "ui.Element.getParent()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "ui.Element.hasEventHandler()"
  name: "Element.hasEventHandler()"
  nameWithType: "Element.hasEventHandler()"
  fullName: "ui.Element.hasEventHandler()"
- uid: "ui.RenderableElement.setSprite(graphics.Sprite)"
  name: "RenderableElement.setSprite(Sprite)"
  nameWithType: "RenderableElement.setSprite(Sprite)"
  fullName: "ui.RenderableElement.setSprite(graphics.Sprite)"
- uid: "ui.RenderableElement.setSize(org.joml.Vector2f)"
  name: "RenderableElement.setSize(Vector2f)"
  nameWithType: "RenderableElement.setSize(Vector2f)"
  fullName: "ui.RenderableElement.setSize(org.joml.Vector2f)"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "ui.Element.getFocused()"
  name: "Element.getFocused()"
  nameWithType: "Element.getFocused()"
  fullName: "ui.Element.getFocused()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "ui.Element.setLayoutInfo(java.lang.Object)"
  name: "Element.setLayoutInfo(Object)"
  nameWithType: "Element.setLayoutInfo(Object)"
  fullName: "ui.Element.setLayoutInfo(java.lang.Object)"
- uid: "ui.RenderableElement.setColor(graphics.Color)"
  name: "RenderableElement.setColor(Color)"
  nameWithType: "RenderableElement.setColor(Color)"
  fullName: "ui.RenderableElement.setColor(graphics.Color)"
- uid: "ui.Element.getFont()"
  name: "Element.getFont()"
  nameWithType: "Element.getFont()"
  fullName: "ui.Element.getFont()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ui.Element.getEnabled()"
  name: "Element.getEnabled()"
  nameWithType: "Element.getEnabled()"
  fullName: "ui.Element.getEnabled()"
- uid: "ui.Element.getFrame()"
  name: "Element.getFrame()"
  nameWithType: "Element.getFrame()"
  fullName: "ui.Element.getFrame()"
- uid: "ui.Element.setParent(ui.Container)"
  name: "Element.setParent(Container)"
  nameWithType: "Element.setParent(Container)"
  fullName: "ui.Element.setParent(ui.Container)"
- uid: "ui.Element.isFocused()"
  name: "Element.isFocused()"
  nameWithType: "Element.isFocused()"
  fullName: "ui.Element.isFocused()"
- uid: "ui.Element.getY()"
  name: "Element.getY()"
  nameWithType: "Element.getY()"
  fullName: "ui.Element.getY()"
- uid: "ui.Element.isEnabled()"
  name: "Element.isEnabled()"
  nameWithType: "Element.isEnabled()"
  fullName: "ui.Element.isEnabled()"
- uid: "ui.RenderableElement.getColorVector()"
  name: "RenderableElement.getColorVector()"
  nameWithType: "RenderableElement.getColorVector()"
  fullName: "ui.RenderableElement.getColorVector()"
- uid: "ui.RenderableElement.getRenderFrame()"
  name: "RenderableElement.getRenderFrame()"
  nameWithType: "RenderableElement.getRenderFrame()"
  fullName: "ui.RenderableElement.getRenderFrame()"
- uid: "ui.RenderableElement.start()"
  name: "RenderableElement.start()"
  nameWithType: "RenderableElement.start()"
  fullName: "ui.RenderableElement.start()"
- uid: "ui.Element.zIndex()"
  name: "Element.zIndex()"
  nameWithType: "Element.zIndex()"
  fullName: "ui.Element.zIndex()"
- uid: "ui.RenderableElement.update(float)"
  name: "RenderableElement.update(float)"
  nameWithType: "RenderableElement.update(float)"
  fullName: "ui.RenderableElement.update(float)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "ui.Element.update()"
  name: "Element.update()"
  nameWithType: "Element.update()"
  fullName: "ui.Element.update()"
- uid: "ui.Element.requestFocus()"
  name: "Element.requestFocus()"
  nameWithType: "Element.requestFocus()"
  fullName: "ui.Element.requestFocus()"
- uid: "ui.Element.postUpdate()"
  name: "Element.postUpdate()"
  nameWithType: "Element.postUpdate()"
  fullName: "ui.Element.postUpdate()"
- uid: "ui.Element.isMouseOnThis()"
  name: "Element.isMouseOnThis()"
  nameWithType: "Element.isMouseOnThis()"
  fullName: "ui.Element.isMouseOnThis()"
- uid: "ui.Element.getEventHandler()"
  name: "Element.getEventHandler()"
  nameWithType: "Element.getEventHandler()"
  fullName: "ui.Element.getEventHandler()"
- uid: "ui.RenderableElement.setAlpha(float)"
  name: "RenderableElement.setAlpha(float)"
  nameWithType: "RenderableElement.setAlpha(float)"
  fullName: "ui.RenderableElement.setAlpha(float)"
- uid: "ui.Element.getVisible()"
  name: "Element.getVisible()"
  nameWithType: "Element.getVisible()"
  fullName: "ui.Element.getVisible()"
- uid: "ui.RenderableElement.getTexCoords()"
  name: "RenderableElement.getTexCoords()"
  nameWithType: "RenderableElement.getTexCoords()"
  fullName: "ui.RenderableElement.getTexCoords()"
- uid: "ui.RenderableElement.setRenderFrame(ui.Frame)"
  name: "RenderableElement.setRenderFrame(Frame)"
  nameWithType: "RenderableElement.setRenderFrame(Frame)"
  fullName: "ui.RenderableElement.setRenderFrame(ui.Frame)"
- uid: "ui.Element.draw()"
  name: "Element.draw()"
  nameWithType: "Element.draw()"
  fullName: "ui.Element.draw()"
- uid: "ui.Element.isVisible()"
  name: "Element.isVisible()"
  nameWithType: "Element.isVisible()"
  fullName: "ui.Element.isVisible()"
- uid: "ui.Element.setEnabled(boolean)"
  name: "Element.setEnabled(boolean)"
  nameWithType: "Element.setEnabled(boolean)"
  fullName: "ui.Element.setEnabled(boolean)"
- uid: "ui.RenderableElement.setColor(org.joml.Vector4f)"
  name: "RenderableElement.setColor(Vector4f)"
  nameWithType: "RenderableElement.setColor(Vector4f)"
  fullName: "ui.RenderableElement.setColor(org.joml.Vector4f)"
