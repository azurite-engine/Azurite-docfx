### YamlMime:ManagedReference
items:
- uid: "fonts.GlyphRenderer"
  id: "GlyphRenderer"
  parent: "fonts"
  children:
  - "fonts.GlyphRenderer.GlyphRenderer(util.Transform,fonts.Glyph,ecs.Text,char,boolean,graphics.Color)"
  - "fonts.GlyphRenderer.addX(float)"
  - "fonts.GlyphRenderer.addY(float)"
  - "fonts.GlyphRenderer.getCharacter()"
  - "fonts.GlyphRenderer.getColor()"
  - "fonts.GlyphRenderer.getColorVector()"
  - "fonts.GlyphRenderer.getLocalTransform()"
  - "fonts.GlyphRenderer.getParentText()"
  - "fonts.GlyphRenderer.getTexCoords()"
  - "fonts.GlyphRenderer.getTexture()"
  - "fonts.GlyphRenderer.isDirty()"
  - "fonts.GlyphRenderer.isSticky()"
  - "fonts.GlyphRenderer.setAlpha(float)"
  - "fonts.GlyphRenderer.setClean()"
  - "fonts.GlyphRenderer.setColor(graphics.Color)"
  - "fonts.GlyphRenderer.setColor(org.joml.Vector4f)"
  - "fonts.GlyphRenderer.setDirty()"
  - "fonts.GlyphRenderer.update(float)"
  - "fonts.GlyphRenderer.updatePosition(org.joml.Vector2f)"
  langs:
  - "java"
  name: "GlyphRenderer"
  nameWithType: "GlyphRenderer"
  fullName: "fonts.GlyphRenderer"
  type: "Class"
  package: "fonts"
  syntax:
    content: "public class GlyphRenderer"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fonts.GlyphRenderer.GlyphRenderer(util.Transform,fonts.Glyph,ecs.Text,char,boolean,graphics.Color)"
  id: "GlyphRenderer(util.Transform,fonts.Glyph,ecs.Text,char,boolean,graphics.Color)"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "GlyphRenderer(Transform transform, Glyph glyph, Text parentText, char c, boolean isSticky, Color color)"
  nameWithType: "GlyphRenderer.GlyphRenderer(Transform transform, Glyph glyph, Text parentText, char c, boolean isSticky, Color color)"
  fullName: "fonts.GlyphRenderer.GlyphRenderer(Transform transform, Glyph glyph, Text parentText, char c, boolean isSticky, Color color)"
  overload: "fonts.GlyphRenderer.GlyphRenderer*"
  type: "Constructor"
  package: "fonts"
  summary: "Create a spriteRenderer using a sprite that is already loaded. Default tint color is white (no tinting visible)."
  syntax:
    content: "public GlyphRenderer(Transform transform, Glyph glyph, Text parentText, char c, boolean isSticky, Color color)"
    parameters:
    - id: "transform"
      type: "util.Transform"
    - id: "glyph"
      type: "fonts.Glyph"
    - id: "parentText"
      type: "ecs.Text"
    - id: "c"
      type: "char"
    - id: "isSticky"
      type: "boolean"
    - id: "color"
      type: "graphics.Color"
- uid: "fonts.GlyphRenderer.addX(float)"
  id: "addX(float)"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "addX(float x)"
  nameWithType: "GlyphRenderer.addX(float x)"
  fullName: "fonts.GlyphRenderer.addX(float x)"
  overload: "fonts.GlyphRenderer.addX*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public void addX(float x)"
    parameters:
    - id: "x"
      type: "float"
- uid: "fonts.GlyphRenderer.addY(float)"
  id: "addY(float)"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "addY(float x)"
  nameWithType: "GlyphRenderer.addY(float x)"
  fullName: "fonts.GlyphRenderer.addY(float x)"
  overload: "fonts.GlyphRenderer.addY*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public void addY(float x)"
    parameters:
    - id: "x"
      type: "float"
- uid: "fonts.GlyphRenderer.getCharacter()"
  id: "getCharacter()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "getCharacter()"
  nameWithType: "GlyphRenderer.getCharacter()"
  fullName: "fonts.GlyphRenderer.getCharacter()"
  overload: "fonts.GlyphRenderer.getCharacter*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public char getCharacter()"
    return:
      type: "char"
- uid: "fonts.GlyphRenderer.getColor()"
  id: "getColor()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "getColor()"
  nameWithType: "GlyphRenderer.getColor()"
  fullName: "fonts.GlyphRenderer.getColor()"
  overload: "fonts.GlyphRenderer.getColor*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public Color getColor()"
    return:
      type: "graphics.Color"
      description: "type Color in standard RGBA form in the range 0-255"
- uid: "fonts.GlyphRenderer.getColorVector()"
  id: "getColorVector()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "getColorVector()"
  nameWithType: "GlyphRenderer.getColorVector()"
  fullName: "fonts.GlyphRenderer.getColorVector()"
  overload: "fonts.GlyphRenderer.getColorVector*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public Vector4f getColorVector()"
    return:
      type: "org.joml.Vector4f"
      description: "a Vector4f containing the normalized (0-1) color values (R, G, B, and A)"
- uid: "fonts.GlyphRenderer.getLocalTransform()"
  id: "getLocalTransform()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "getLocalTransform()"
  nameWithType: "GlyphRenderer.getLocalTransform()"
  fullName: "fonts.GlyphRenderer.getLocalTransform()"
  overload: "fonts.GlyphRenderer.getLocalTransform*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public Transform getLocalTransform()"
    return:
      type: "util.Transform"
- uid: "fonts.GlyphRenderer.getParentText()"
  id: "getParentText()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "getParentText()"
  nameWithType: "GlyphRenderer.getParentText()"
  fullName: "fonts.GlyphRenderer.getParentText()"
  overload: "fonts.GlyphRenderer.getParentText*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public Text getParentText()"
    return:
      type: "ecs.Text"
- uid: "fonts.GlyphRenderer.getTexCoords()"
  id: "getTexCoords()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "getTexCoords()"
  nameWithType: "GlyphRenderer.getTexCoords()"
  fullName: "fonts.GlyphRenderer.getTexCoords()"
  overload: "fonts.GlyphRenderer.getTexCoords*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public Vector2f[] getTexCoords()"
    return:
      type: "org.joml.Vector2f[]"
      description: "Vector2f array of the UV coordinates of the sprite if applicable."
- uid: "fonts.GlyphRenderer.getTexture()"
  id: "getTexture()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "getTexture()"
  nameWithType: "GlyphRenderer.getTexture()"
  fullName: "fonts.GlyphRenderer.getTexture()"
  overload: "fonts.GlyphRenderer.getTexture*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public Texture getTexture()"
    return:
      type: "graphics.Texture"
      description: "type Texture of the sprite if applicable."
- uid: "fonts.GlyphRenderer.isDirty()"
  id: "isDirty()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "isDirty()"
  nameWithType: "GlyphRenderer.isDirty()"
  fullName: "fonts.GlyphRenderer.isDirty()"
  overload: "fonts.GlyphRenderer.isDirty*"
  type: "Method"
  package: "fonts"
  summary: "Used by the renderer to determine if this glyph should be sent back to the GPU to be redrawn."
  syntax:
    content: "public boolean isDirty()"
    return:
      type: "boolean"
      description: "true or false if the sprite or color has changes since last draw."
- uid: "fonts.GlyphRenderer.isSticky()"
  id: "isSticky()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "isSticky()"
  nameWithType: "GlyphRenderer.isSticky()"
  fullName: "fonts.GlyphRenderer.isSticky()"
  overload: "fonts.GlyphRenderer.isSticky*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public boolean isSticky()"
    return:
      type: "boolean"
- uid: "fonts.GlyphRenderer.setAlpha(float)"
  id: "setAlpha(float)"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "setAlpha(float a)"
  nameWithType: "GlyphRenderer.setAlpha(float a)"
  fullName: "fonts.GlyphRenderer.setAlpha(float a)"
  overload: "fonts.GlyphRenderer.setAlpha*"
  type: "Method"
  package: "fonts"
  summary: "Change the alpha/opacity of the sprite and/or color"
  syntax:
    content: "public void setAlpha(float a)"
    parameters:
    - id: "a"
      type: "float"
      description: "alpha/opacity"
- uid: "fonts.GlyphRenderer.setClean()"
  id: "setClean()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "setClean()"
  nameWithType: "GlyphRenderer.setClean()"
  fullName: "fonts.GlyphRenderer.setClean()"
  overload: "fonts.GlyphRenderer.setClean*"
  type: "Method"
  package: "fonts"
  summary: "Used by the renderer to reset the state of the GlyphRenderer to clean."
  syntax:
    content: "public void setClean()"
- uid: "fonts.GlyphRenderer.setColor(graphics.Color)"
  id: "setColor(graphics.Color)"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "setColor(Color color)"
  nameWithType: "GlyphRenderer.setColor(Color color)"
  fullName: "fonts.GlyphRenderer.setColor(Color color)"
  overload: "fonts.GlyphRenderer.setColor*"
  type: "Method"
  package: "fonts"
  summary: "Change the color by passing a Color object, converting it to a normalized Vector4f."
  syntax:
    content: "public void setColor(Color color)"
    parameters:
    - id: "color"
      type: "graphics.Color"
      description: "should be in range of 0-255"
- uid: "fonts.GlyphRenderer.setColor(org.joml.Vector4f)"
  id: "setColor(org.joml.Vector4f)"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "setColor(Vector4f color)"
  nameWithType: "GlyphRenderer.setColor(Vector4f color)"
  fullName: "fonts.GlyphRenderer.setColor(Vector4f color)"
  overload: "fonts.GlyphRenderer.setColor*"
  type: "Method"
  package: "fonts"
  summary: "Change the color by passing a Vector4f"
  syntax:
    content: "public void setColor(Vector4f color)"
    parameters:
    - id: "color"
      type: "org.joml.Vector4f"
      description: "vector, values should be in the range of 0-1"
- uid: "fonts.GlyphRenderer.setDirty()"
  id: "setDirty()"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "setDirty()"
  nameWithType: "GlyphRenderer.setDirty()"
  fullName: "fonts.GlyphRenderer.setDirty()"
  overload: "fonts.GlyphRenderer.setDirty*"
  type: "Method"
  package: "fonts"
  summary: "Used by the renderer to reset the state of the GlyphRenderer to dirty."
  syntax:
    content: "public void setDirty()"
- uid: "fonts.GlyphRenderer.update(float)"
  id: "update(float)"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "update(float dt)"
  nameWithType: "GlyphRenderer.update(float dt)"
  fullName: "fonts.GlyphRenderer.update(float dt)"
  overload: "fonts.GlyphRenderer.update*"
  type: "Method"
  package: "fonts"
  summary: "Update method called every frame by parent"
  syntax:
    content: "public void update(float dt)"
    parameters:
    - id: "dt"
      type: "float"
      description: "Engine.deltaTime"
- uid: "fonts.GlyphRenderer.updatePosition(org.joml.Vector2f)"
  id: "updatePosition(org.joml.Vector2f)"
  parent: "fonts.GlyphRenderer"
  langs:
  - "java"
  name: "updatePosition(Vector2f delta)"
  nameWithType: "GlyphRenderer.updatePosition(Vector2f delta)"
  fullName: "fonts.GlyphRenderer.updatePosition(Vector2f delta)"
  overload: "fonts.GlyphRenderer.updatePosition*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public void updatePosition(Vector2f delta)"
    parameters:
    - id: "delta"
      type: "org.joml.Vector2f"
references:
- uid: "util.Transform"
  name: "Transform"
  nameWithType: "Transform"
  fullName: "util.Transform"
- uid: "fonts.Glyph"
  name: "Glyph"
  nameWithType: "Glyph"
  fullName: "fonts.Glyph"
- uid: "ecs.Text"
  name: "Text"
  nameWithType: "Text"
  fullName: "ecs.Text"
- uid: "char"
  spec.java:
  - uid: "char"
    name: "char"
    fullName: "char"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "fonts.GlyphRenderer.GlyphRenderer*"
  name: "GlyphRenderer"
  nameWithType: "GlyphRenderer.GlyphRenderer"
  fullName: "fonts.GlyphRenderer.GlyphRenderer"
  package: "fonts"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "fonts.GlyphRenderer.update*"
  name: "update"
  nameWithType: "GlyphRenderer.update"
  fullName: "fonts.GlyphRenderer.update"
  package: "fonts"
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "fonts.GlyphRenderer.updatePosition*"
  name: "updatePosition"
  nameWithType: "GlyphRenderer.updatePosition"
  fullName: "fonts.GlyphRenderer.updatePosition"
  package: "fonts"
- uid: "fonts.GlyphRenderer.getCharacter*"
  name: "getCharacter"
  nameWithType: "GlyphRenderer.getCharacter"
  fullName: "fonts.GlyphRenderer.getCharacter"
  package: "fonts"
- uid: "graphics.Texture"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
- uid: "fonts.GlyphRenderer.getTexture*"
  name: "getTexture"
  nameWithType: "GlyphRenderer.getTexture"
  fullName: "fonts.GlyphRenderer.getTexture"
  package: "fonts"
- uid: "org.joml.Vector2f[]"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
  - name: "[]"
    fullName: "[]"
- uid: "fonts.GlyphRenderer.getTexCoords*"
  name: "getTexCoords"
  nameWithType: "GlyphRenderer.getTexCoords"
  fullName: "fonts.GlyphRenderer.getTexCoords"
  package: "fonts"
- uid: "org.joml.Vector4f"
  spec.java:
  - uid: "org.joml.Vector4f"
    name: "Vector4f"
    fullName: "org.joml.Vector4f"
- uid: "fonts.GlyphRenderer.getColorVector*"
  name: "getColorVector"
  nameWithType: "GlyphRenderer.getColorVector"
  fullName: "fonts.GlyphRenderer.getColorVector"
  package: "fonts"
- uid: "fonts.GlyphRenderer.getLocalTransform*"
  name: "getLocalTransform"
  nameWithType: "GlyphRenderer.getLocalTransform"
  fullName: "fonts.GlyphRenderer.getLocalTransform"
  package: "fonts"
- uid: "fonts.GlyphRenderer.addX*"
  name: "addX"
  nameWithType: "GlyphRenderer.addX"
  fullName: "fonts.GlyphRenderer.addX"
  package: "fonts"
- uid: "fonts.GlyphRenderer.addY*"
  name: "addY"
  nameWithType: "GlyphRenderer.addY"
  fullName: "fonts.GlyphRenderer.addY"
  package: "fonts"
- uid: "fonts.GlyphRenderer.getColor*"
  name: "getColor"
  nameWithType: "GlyphRenderer.getColor"
  fullName: "fonts.GlyphRenderer.getColor"
  package: "fonts"
- uid: "fonts.GlyphRenderer.setColor*"
  name: "setColor"
  nameWithType: "GlyphRenderer.setColor"
  fullName: "fonts.GlyphRenderer.setColor"
  package: "fonts"
- uid: "fonts.GlyphRenderer.setAlpha*"
  name: "setAlpha"
  nameWithType: "GlyphRenderer.setAlpha"
  fullName: "fonts.GlyphRenderer.setAlpha"
  package: "fonts"
- uid: "fonts.GlyphRenderer.isDirty*"
  name: "isDirty"
  nameWithType: "GlyphRenderer.isDirty"
  fullName: "fonts.GlyphRenderer.isDirty"
  package: "fonts"
- uid: "fonts.GlyphRenderer.setClean*"
  name: "setClean"
  nameWithType: "GlyphRenderer.setClean"
  fullName: "fonts.GlyphRenderer.setClean"
  package: "fonts"
- uid: "fonts.GlyphRenderer.setDirty*"
  name: "setDirty"
  nameWithType: "GlyphRenderer.setDirty"
  fullName: "fonts.GlyphRenderer.setDirty"
  package: "fonts"
- uid: "fonts.GlyphRenderer.getParentText*"
  name: "getParentText"
  nameWithType: "GlyphRenderer.getParentText"
  fullName: "fonts.GlyphRenderer.getParentText"
  package: "fonts"
- uid: "fonts.GlyphRenderer.isSticky*"
  name: "isSticky"
  nameWithType: "GlyphRenderer.isSticky"
  fullName: "fonts.GlyphRenderer.isSticky"
  package: "fonts"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
