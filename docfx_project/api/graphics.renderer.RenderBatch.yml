### YamlMime:ManagedReference
items:
- uid: "graphics.renderer.RenderBatch"
  id: "RenderBatch"
  parent: "graphics.renderer"
  children:
  - "graphics.renderer.RenderBatch.RenderBatch(int,int,graphics.Primitive,graphics.ShaderDatatype...)"
  - "graphics.renderer.RenderBatch.addTexture(graphics.Texture)"
  - "graphics.renderer.RenderBatch.bind()"
  - "graphics.renderer.RenderBatch.compareTo(graphics.renderer.RenderBatch)"
  - "graphics.renderer.RenderBatch.data"
  - "graphics.renderer.RenderBatch.dataOffset"
  - "graphics.renderer.RenderBatch.delete()"
  - "graphics.renderer.RenderBatch.finish()"
  - "graphics.renderer.RenderBatch.getVertexCount()"
  - "graphics.renderer.RenderBatch.hasTexture(graphics.Texture)"
  - "graphics.renderer.RenderBatch.init()"
  - "graphics.renderer.RenderBatch.isFull"
  - "graphics.renderer.RenderBatch.isFull_Textures"
  - "graphics.renderer.RenderBatch.maxBatchSize"
  - "graphics.renderer.RenderBatch.primitive"
  - "graphics.renderer.RenderBatch.primitiveVertices"
  - "graphics.renderer.RenderBatch.pushColor(graphics.Color)"
  - "graphics.renderer.RenderBatch.pushFloat(float)"
  - "graphics.renderer.RenderBatch.pushInt(int)"
  - "graphics.renderer.RenderBatch.pushVec2(float,float)"
  - "graphics.renderer.RenderBatch.pushVec2(org.joml.Vector2f)"
  - "graphics.renderer.RenderBatch.pushVec3(float,float,float)"
  - "graphics.renderer.RenderBatch.pushVec3(org.joml.Vector3f)"
  - "graphics.renderer.RenderBatch.pushVec4(float,float,float,float)"
  - "graphics.renderer.RenderBatch.pushVec4(org.joml.Vector4f)"
  - "graphics.renderer.RenderBatch.start()"
  - "graphics.renderer.RenderBatch.textures"
  - "graphics.renderer.RenderBatch.unbind()"
  - "graphics.renderer.RenderBatch.vao"
  - "graphics.renderer.RenderBatch.vbo"
  - "graphics.renderer.RenderBatch.vertexCount"
  - "graphics.renderer.RenderBatch.vertexSize"
  - "graphics.renderer.RenderBatch.zIndex()"
  langs:
  - "java"
  name: "RenderBatch"
  nameWithType: "RenderBatch"
  fullName: "graphics.renderer.RenderBatch"
  type: "Class"
  package: "graphics.renderer"
  summary: "# Azurite #\n\nA render batch is a collection of elements that are \"batched\" together into a single object. This objects conglomerates the vertex data associated with a specified primitive and prepares it to be rendered by it's associated renderer. The pipeline of a `RenderBatch` object is as follows:\n\n1.  The `RenderBatch` class is extended by another class intended to be a batch of a certain primitive; for this example let's say it's a quadrilateral.\n2.  The `Renderer` class is extended by a class intended to render the aforementioned quadrilateral render batch, where the type parameter is specified as our `RenderBatch`.\n3.  Now that all classes are set up, a quadrilateral render batch is created, and several quadrilateral vertices are loaded into its `data` field via an overloaded `loadVertexProperties` function (which specifies if the quads will have color, what texture they would use, etc.) This is also when element indices are created, which specify in what order the GPU should process/render vertices.\n4.  This data is then submitted to the GPU, any associated metadata about the vertices and the quads are rendered.\n\nOf course, one doesn't necessarily have to use quads for rendering; one could get as inventive as they'd like. The `graphics.renderer` API pre-specifies some useful renderers (hopefully so that most developers don't have to make their own renderers.)"
  syntax:
    content: "public class RenderBatch implements Comparable<RenderBatch>"
  inheritance:
  - "java.lang.Object"
  implements:
  - "java.lang.Comparable<graphics.renderer.RenderBatch>"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "graphics.renderer.RenderBatch.RenderBatch(int,int,graphics.Primitive,graphics.ShaderDatatype...)"
  id: "RenderBatch(int,int,graphics.Primitive,graphics.ShaderDatatype...)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "RenderBatch(int maxBatchSize, int zIndex, Primitive primitive, ShaderDatatype[] attributes)"
  nameWithType: "RenderBatch.RenderBatch(int maxBatchSize, int zIndex, Primitive primitive, ShaderDatatype[] attributes)"
  fullName: "graphics.renderer.RenderBatch.RenderBatch(int maxBatchSize, int zIndex, Primitive primitive, ShaderDatatype[] attributes)"
  overload: "graphics.renderer.RenderBatch.RenderBatch*"
  type: "Constructor"
  package: "graphics.renderer"
  syntax:
    content: "public RenderBatch(int maxBatchSize, int zIndex, Primitive primitive, ShaderDatatype[] attributes)"
    parameters:
    - id: "maxBatchSize"
      type: "int"
      description: "the maximum number of primitives in a batch"
    - id: "zIndex"
      type: "int"
      description: "the zIndex of the batch. Used to sort the batches in order of which sprites appear above others."
    - id: "primitive"
      type: "graphics.Primitive"
      description: "the primitive"
    - id: "attributes"
      type: "graphics.ShaderDatatype[]"
      description: "attributes for the Vertex array"
- uid: "graphics.renderer.RenderBatch.addTexture(graphics.Texture)"
  id: "addTexture(graphics.Texture)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "addTexture(Texture texture)"
  nameWithType: "RenderBatch.addTexture(Texture texture)"
  fullName: "graphics.renderer.RenderBatch.addTexture(Texture texture)"
  overload: "graphics.renderer.RenderBatch.addTexture*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Add a texture to this batch"
  syntax:
    content: "public int addTexture(Texture texture)"
    parameters:
    - id: "texture"
      type: "graphics.Texture"
      description: "the texture to be rendered"
    return:
      type: "int"
      description: "the index at which texture is placed.\n The texture will be bound to this texture slot. Hence, set the texture attribute to this value."
- uid: "graphics.renderer.RenderBatch.bind()"
  id: "bind()"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "bind()"
  nameWithType: "RenderBatch.bind()"
  fullName: "graphics.renderer.RenderBatch.bind()"
  overload: "graphics.renderer.RenderBatch.bind*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Binds the vertex array and all the textures to the required slots"
  syntax:
    content: "public void bind()"
- uid: "graphics.renderer.RenderBatch.compareTo(graphics.renderer.RenderBatch)"
  id: "compareTo(graphics.renderer.RenderBatch)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "compareTo(RenderBatch a)"
  nameWithType: "RenderBatch.compareTo(RenderBatch a)"
  fullName: "graphics.renderer.RenderBatch.compareTo(RenderBatch a)"
  overload: "graphics.renderer.RenderBatch.compareTo*"
  type: "Method"
  package: "graphics.renderer"
  syntax:
    content: "public int compareTo(RenderBatch a)"
    parameters:
    - id: "a"
      type: "graphics.renderer.RenderBatch"
    return:
      type: "int"
- uid: "graphics.renderer.RenderBatch.data"
  id: "data"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "data"
  nameWithType: "RenderBatch.data"
  fullName: "graphics.renderer.RenderBatch.data"
  type: "Field"
  package: "graphics.renderer"
  summary: "The data which is uploaded to the GPU"
  syntax:
    content: "protected float[] data"
    return:
      type: "float[]"
- uid: "graphics.renderer.RenderBatch.dataOffset"
  id: "dataOffset"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "dataOffset"
  nameWithType: "RenderBatch.dataOffset"
  fullName: "graphics.renderer.RenderBatch.dataOffset"
  type: "Field"
  package: "graphics.renderer"
  summary: "The internal data offset"
  syntax:
    content: "protected int dataOffset"
    return:
      type: "int"
- uid: "graphics.renderer.RenderBatch.delete()"
  id: "delete()"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "RenderBatch.delete()"
  fullName: "graphics.renderer.RenderBatch.delete()"
  overload: "graphics.renderer.RenderBatch.delete*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Delete the vertex array, vertex buffer and index buffer (element buffer)"
  syntax:
    content: "public void delete()"
- uid: "graphics.renderer.RenderBatch.finish()"
  id: "finish()"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "finish()"
  nameWithType: "RenderBatch.finish()"
  fullName: "graphics.renderer.RenderBatch.finish()"
  overload: "graphics.renderer.RenderBatch.finish*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Finish setting batch data. upload to gpu"
  syntax:
    content: "public void finish()"
- uid: "graphics.renderer.RenderBatch.getVertexCount()"
  id: "getVertexCount()"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "getVertexCount()"
  nameWithType: "RenderBatch.getVertexCount()"
  fullName: "graphics.renderer.RenderBatch.getVertexCount()"
  overload: "graphics.renderer.RenderBatch.getVertexCount*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Get the number of vertices to be drawn"
  syntax:
    content: "public int getVertexCount()"
    return:
      type: "int"
      description: "the number of vertices to be drawn"
- uid: "graphics.renderer.RenderBatch.hasTexture(graphics.Texture)"
  id: "hasTexture(graphics.Texture)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "hasTexture(Texture tex)"
  nameWithType: "RenderBatch.hasTexture(Texture tex)"
  fullName: "graphics.renderer.RenderBatch.hasTexture(Texture tex)"
  overload: "graphics.renderer.RenderBatch.hasTexture*"
  type: "Method"
  package: "graphics.renderer"
  syntax:
    content: "public boolean hasTexture(Texture tex)"
    parameters:
    - id: "tex"
      type: "graphics.Texture"
    return:
      type: "boolean"
- uid: "graphics.renderer.RenderBatch.init()"
  id: "init()"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "init()"
  nameWithType: "RenderBatch.init()"
  fullName: "graphics.renderer.RenderBatch.init()"
  overload: "graphics.renderer.RenderBatch.init*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Create the GPU resources. Generates a vao, a dynamic vbo, and a static buffer of indices."
  syntax:
    content: "public void init()"
- uid: "graphics.renderer.RenderBatch.isFull"
  id: "isFull"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "isFull"
  nameWithType: "RenderBatch.isFull"
  fullName: "graphics.renderer.RenderBatch.isFull"
  type: "Field"
  package: "graphics.renderer"
  summary: "Is this batch full due to filled up geometry"
  syntax:
    content: "public boolean isFull"
    return:
      type: "boolean"
- uid: "graphics.renderer.RenderBatch.isFull_Textures"
  id: "isFull_Textures"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "isFull_Textures"
  nameWithType: "RenderBatch.isFull_Textures"
  fullName: "graphics.renderer.RenderBatch.isFull_Textures"
  type: "Field"
  package: "graphics.renderer"
  summary: "Is this batch full due to having 8 textures occupied already"
  syntax:
    content: "public boolean isFull_Textures"
    return:
      type: "boolean"
- uid: "graphics.renderer.RenderBatch.maxBatchSize"
  id: "maxBatchSize"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "maxBatchSize"
  nameWithType: "RenderBatch.maxBatchSize"
  fullName: "graphics.renderer.RenderBatch.maxBatchSize"
  type: "Field"
  package: "graphics.renderer"
  summary: "Max number of primitives a batch can hold"
  syntax:
    content: "protected final int maxBatchSize"
    return:
      type: "int"
- uid: "graphics.renderer.RenderBatch.primitive"
  id: "primitive"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "primitive"
  nameWithType: "RenderBatch.primitive"
  fullName: "graphics.renderer.RenderBatch.primitive"
  type: "Field"
  package: "graphics.renderer"
  summary: "The primitive that this batch draws"
  syntax:
    content: "public final Primitive primitive"
    return:
      type: "graphics.Primitive"
- uid: "graphics.renderer.RenderBatch.primitiveVertices"
  id: "primitiveVertices"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "primitiveVertices"
  nameWithType: "RenderBatch.primitiveVertices"
  fullName: "graphics.renderer.RenderBatch.primitiveVertices"
  type: "Field"
  package: "graphics.renderer"
  summary: "Vertices of one primitive"
  syntax:
    content: "protected float[] primitiveVertices"
    return:
      type: "float[]"
- uid: "graphics.renderer.RenderBatch.pushColor(graphics.Color)"
  id: "pushColor(graphics.Color)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushColor(Color c)"
  nameWithType: "RenderBatch.pushColor(Color c)"
  fullName: "graphics.renderer.RenderBatch.pushColor(Color c)"
  overload: "graphics.renderer.RenderBatch.pushColor*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push four floats to the data array"
  syntax:
    content: "public void pushColor(Color c)"
    parameters:
    - id: "c"
      type: "graphics.Color"
      description: "the color"
- uid: "graphics.renderer.RenderBatch.pushFloat(float)"
  id: "pushFloat(float)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushFloat(float f)"
  nameWithType: "RenderBatch.pushFloat(float f)"
  fullName: "graphics.renderer.RenderBatch.pushFloat(float f)"
  overload: "graphics.renderer.RenderBatch.pushFloat*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push a float to the data array"
  syntax:
    content: "public void pushFloat(float f)"
    parameters:
    - id: "f"
      type: "float"
      description: "the value"
- uid: "graphics.renderer.RenderBatch.pushInt(int)"
  id: "pushInt(int)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushInt(int i)"
  nameWithType: "RenderBatch.pushInt(int i)"
  fullName: "graphics.renderer.RenderBatch.pushInt(int i)"
  overload: "graphics.renderer.RenderBatch.pushInt*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push an int to the data array"
  syntax:
    content: "public void pushInt(int i)"
    parameters:
    - id: "i"
      type: "int"
      description: "the value"
- uid: "graphics.renderer.RenderBatch.pushVec2(float,float)"
  id: "pushVec2(float,float)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushVec2(float x, float y)"
  nameWithType: "RenderBatch.pushVec2(float x, float y)"
  fullName: "graphics.renderer.RenderBatch.pushVec2(float x, float y)"
  overload: "graphics.renderer.RenderBatch.pushVec2*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push two floats to the data array"
  syntax:
    content: "public void pushVec2(float x, float y)"
    parameters:
    - id: "x"
      type: "float"
      description: "x value"
    - id: "y"
      type: "float"
      description: "y value"
- uid: "graphics.renderer.RenderBatch.pushVec2(org.joml.Vector2f)"
  id: "pushVec2(org.joml.Vector2f)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushVec2(Vector2f v)"
  nameWithType: "RenderBatch.pushVec2(Vector2f v)"
  fullName: "graphics.renderer.RenderBatch.pushVec2(Vector2f v)"
  overload: "graphics.renderer.RenderBatch.pushVec2*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push two floats to the data array"
  syntax:
    content: "public void pushVec2(Vector2f v)"
    parameters:
    - id: "v"
      type: "org.joml.Vector2f"
      description: "the 2d vector"
- uid: "graphics.renderer.RenderBatch.pushVec3(float,float,float)"
  id: "pushVec3(float,float,float)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushVec3(float x, float y, float z)"
  nameWithType: "RenderBatch.pushVec3(float x, float y, float z)"
  fullName: "graphics.renderer.RenderBatch.pushVec3(float x, float y, float z)"
  overload: "graphics.renderer.RenderBatch.pushVec3*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push three floats to the data array"
  syntax:
    content: "public void pushVec3(float x, float y, float z)"
    parameters:
    - id: "x"
      type: "float"
      description: "x value"
    - id: "y"
      type: "float"
      description: "y value"
    - id: "z"
      type: "float"
      description: "z value"
- uid: "graphics.renderer.RenderBatch.pushVec3(org.joml.Vector3f)"
  id: "pushVec3(org.joml.Vector3f)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushVec3(Vector3f v)"
  nameWithType: "RenderBatch.pushVec3(Vector3f v)"
  fullName: "graphics.renderer.RenderBatch.pushVec3(Vector3f v)"
  overload: "graphics.renderer.RenderBatch.pushVec3*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push three floats to the data array"
  syntax:
    content: "public void pushVec3(Vector3f v)"
    parameters:
    - id: "v"
      type: "org.joml.Vector3f"
      description: "the 3d vector"
- uid: "graphics.renderer.RenderBatch.pushVec4(float,float,float,float)"
  id: "pushVec4(float,float,float,float)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushVec4(float x, float y, float z, float w)"
  nameWithType: "RenderBatch.pushVec4(float x, float y, float z, float w)"
  fullName: "graphics.renderer.RenderBatch.pushVec4(float x, float y, float z, float w)"
  overload: "graphics.renderer.RenderBatch.pushVec4*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push four floats to the data array"
  syntax:
    content: "public void pushVec4(float x, float y, float z, float w)"
    parameters:
    - id: "x"
      type: "float"
      description: "x value"
    - id: "y"
      type: "float"
      description: "y value"
    - id: "z"
      type: "float"
      description: "z value"
    - id: "w"
      type: "float"
      description: "w value"
- uid: "graphics.renderer.RenderBatch.pushVec4(org.joml.Vector4f)"
  id: "pushVec4(org.joml.Vector4f)"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "pushVec4(Vector4f v)"
  nameWithType: "RenderBatch.pushVec4(Vector4f v)"
  fullName: "graphics.renderer.RenderBatch.pushVec4(Vector4f v)"
  overload: "graphics.renderer.RenderBatch.pushVec4*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Push four floats to the data array"
  syntax:
    content: "public void pushVec4(Vector4f v)"
    parameters:
    - id: "v"
      type: "org.joml.Vector4f"
      description: "the 4d vector"
- uid: "graphics.renderer.RenderBatch.start()"
  id: "start()"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "start()"
  nameWithType: "RenderBatch.start()"
  fullName: "graphics.renderer.RenderBatch.start()"
  overload: "graphics.renderer.RenderBatch.start*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Get batch ready for submission of data"
  syntax:
    content: "public void start()"
- uid: "graphics.renderer.RenderBatch.textures"
  id: "textures"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "textures"
  nameWithType: "RenderBatch.textures"
  fullName: "graphics.renderer.RenderBatch.textures"
  type: "Field"
  package: "graphics.renderer"
  summary: "The List of submitted textures"
  syntax:
    content: "protected List<Texture> textures"
    return:
      type: "java.util.List<graphics.Texture>"
- uid: "graphics.renderer.RenderBatch.unbind()"
  id: "unbind()"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "unbind()"
  nameWithType: "RenderBatch.unbind()"
  fullName: "graphics.renderer.RenderBatch.unbind()"
  overload: "graphics.renderer.RenderBatch.unbind*"
  type: "Method"
  package: "graphics.renderer"
  syntax:
    content: "public void unbind()"
- uid: "graphics.renderer.RenderBatch.vao"
  id: "vao"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "vao"
  nameWithType: "RenderBatch.vao"
  fullName: "graphics.renderer.RenderBatch.vao"
  type: "Field"
  package: "graphics.renderer"
  summary: "Vertex Array id"
  syntax:
    content: "protected int vao"
    return:
      type: "int"
- uid: "graphics.renderer.RenderBatch.vbo"
  id: "vbo"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "vbo"
  nameWithType: "RenderBatch.vbo"
  fullName: "graphics.renderer.RenderBatch.vbo"
  type: "Field"
  package: "graphics.renderer"
  summary: "Vertex Buffer id"
  syntax:
    content: "protected int vbo"
    return:
      type: "int"
- uid: "graphics.renderer.RenderBatch.vertexCount"
  id: "vertexCount"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "vertexCount"
  nameWithType: "RenderBatch.vertexCount"
  fullName: "graphics.renderer.RenderBatch.vertexCount"
  type: "Field"
  package: "graphics.renderer"
  summary: "How many floats/ints in a single vertex"
  syntax:
    content: "protected int vertexCount"
    return:
      type: "int"
- uid: "graphics.renderer.RenderBatch.vertexSize"
  id: "vertexSize"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "vertexSize"
  nameWithType: "RenderBatch.vertexSize"
  fullName: "graphics.renderer.RenderBatch.vertexSize"
  type: "Field"
  package: "graphics.renderer"
  summary: "How many bytes for a single vertex"
  syntax:
    content: "protected int vertexSize"
    return:
      type: "int"
- uid: "graphics.renderer.RenderBatch.zIndex()"
  id: "zIndex()"
  parent: "graphics.renderer.RenderBatch"
  langs:
  - "java"
  name: "zIndex()"
  nameWithType: "RenderBatch.zIndex()"
  fullName: "graphics.renderer.RenderBatch.zIndex()"
  overload: "graphics.renderer.RenderBatch.zIndex*"
  type: "Method"
  package: "graphics.renderer"
  syntax:
    content: "public int zIndex()"
    return:
      type: "int"
references:
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "graphics.Primitive"
  name: "Primitive"
  nameWithType: "Primitive"
  fullName: "graphics.Primitive"
- uid: "graphics.ShaderDatatype[]"
  spec.java:
  - uid: "graphics.ShaderDatatype"
    name: "ShaderDatatype"
    fullName: "graphics.ShaderDatatype"
  - name: "[]"
    fullName: "[]"
- uid: "graphics.renderer.RenderBatch.RenderBatch*"
  name: "RenderBatch"
  nameWithType: "RenderBatch.RenderBatch"
  fullName: "graphics.renderer.RenderBatch.RenderBatch"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.init*"
  name: "init"
  nameWithType: "RenderBatch.init"
  fullName: "graphics.renderer.RenderBatch.init"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.start*"
  name: "start"
  nameWithType: "RenderBatch.start"
  fullName: "graphics.renderer.RenderBatch.start"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.finish*"
  name: "finish"
  nameWithType: "RenderBatch.finish"
  fullName: "graphics.renderer.RenderBatch.finish"
  package: "graphics.renderer"
- uid: "graphics.Texture"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
- uid: "graphics.renderer.RenderBatch.addTexture*"
  name: "addTexture"
  nameWithType: "RenderBatch.addTexture"
  fullName: "graphics.renderer.RenderBatch.addTexture"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.bind*"
  name: "bind"
  nameWithType: "RenderBatch.bind"
  fullName: "graphics.renderer.RenderBatch.bind"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.unbind*"
  name: "unbind"
  nameWithType: "RenderBatch.unbind"
  fullName: "graphics.renderer.RenderBatch.unbind"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.delete*"
  name: "delete"
  nameWithType: "RenderBatch.delete"
  fullName: "graphics.renderer.RenderBatch.delete"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.getVertexCount*"
  name: "getVertexCount"
  nameWithType: "RenderBatch.getVertexCount"
  fullName: "graphics.renderer.RenderBatch.getVertexCount"
  package: "graphics.renderer"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "graphics.renderer.RenderBatch.hasTexture*"
  name: "hasTexture"
  nameWithType: "RenderBatch.hasTexture"
  fullName: "graphics.renderer.RenderBatch.hasTexture"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.zIndex*"
  name: "zIndex"
  nameWithType: "RenderBatch.zIndex"
  fullName: "graphics.renderer.RenderBatch.zIndex"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.compareTo*"
  name: "compareTo"
  nameWithType: "RenderBatch.compareTo"
  fullName: "graphics.renderer.RenderBatch.compareTo"
  package: "graphics.renderer"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "graphics.renderer.RenderBatch.pushFloat*"
  name: "pushFloat"
  nameWithType: "RenderBatch.pushFloat"
  fullName: "graphics.renderer.RenderBatch.pushFloat"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.pushInt*"
  name: "pushInt"
  nameWithType: "RenderBatch.pushInt"
  fullName: "graphics.renderer.RenderBatch.pushInt"
  package: "graphics.renderer"
- uid: "graphics.renderer.RenderBatch.pushVec2*"
  name: "pushVec2"
  nameWithType: "RenderBatch.pushVec2"
  fullName: "graphics.renderer.RenderBatch.pushVec2"
  package: "graphics.renderer"
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "graphics.renderer.RenderBatch.pushVec3*"
  name: "pushVec3"
  nameWithType: "RenderBatch.pushVec3"
  fullName: "graphics.renderer.RenderBatch.pushVec3"
  package: "graphics.renderer"
- uid: "org.joml.Vector3f"
  spec.java:
  - uid: "org.joml.Vector3f"
    name: "Vector3f"
    fullName: "org.joml.Vector3f"
- uid: "graphics.renderer.RenderBatch.pushVec4*"
  name: "pushVec4"
  nameWithType: "RenderBatch.pushVec4"
  fullName: "graphics.renderer.RenderBatch.pushVec4"
  package: "graphics.renderer"
- uid: "org.joml.Vector4f"
  spec.java:
  - uid: "org.joml.Vector4f"
    name: "Vector4f"
    fullName: "org.joml.Vector4f"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "graphics.renderer.RenderBatch.pushColor*"
  name: "pushColor"
  nameWithType: "RenderBatch.pushColor"
  fullName: "graphics.renderer.RenderBatch.pushColor"
  package: "graphics.renderer"
- uid: "float[]"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
  - name: "[]"
    fullName: "[]"
- uid: "java.util.List<graphics.Texture>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "graphics.Texture"
    name: "Texture"
    fullName: "graphics.Texture"
  - name: ">"
    fullName: ">"
- uid: "java.lang.Comparable<graphics.renderer.RenderBatch>"
  name: "Comparable<RenderBatch>"
  nameWithType: "Comparable<RenderBatch>"
  fullName: "java.lang.Comparable<graphics.renderer.RenderBatch>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "java.lang.Comparable"
  name: "Comparable"
  nameWithType: "Comparable"
  fullName: "java.lang.Comparable"
