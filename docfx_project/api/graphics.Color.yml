### YamlMime:ManagedReference
items:
- uid: "graphics.Color"
  id: "Color"
  parent: "graphics"
  children:
  - "graphics.Color.BLACK"
  - "graphics.Color.BLUE"
  - "graphics.Color.BROWN"
  - "graphics.Color.CRIMSON"
  - "graphics.Color.CYAN"
  - "graphics.Color.Color(float)"
  - "graphics.Color.Color(float,float,float)"
  - "graphics.Color.Color(float,float,float,float)"
  - "graphics.Color.DARK_BLUE"
  - "graphics.Color.DARK_GREEN"
  - "graphics.Color.DARK_RED"
  - "graphics.Color.DIRTY_BLUE"
  - "graphics.Color.FIREBRICK"
  - "graphics.Color.GRAY"
  - "graphics.Color.GREEN"
  - "graphics.Color.MAROON"
  - "graphics.Color.NAVY_BLUE"
  - "graphics.Color.OLIVE"
  - "graphics.Color.PINK"
  - "graphics.Color.PURPLE"
  - "graphics.Color.RED"
  - "graphics.Color.SILVER"
  - "graphics.Color.TEAL"
  - "graphics.Color.TYPE_HSLA"
  - "graphics.Color.TYPE_RGBA"
  - "graphics.Color.WHITE"
  - "graphics.Color.YELLOW"
  - "graphics.Color.a"
  - "graphics.Color.b"
  - "graphics.Color.decode(java.lang.String)"
  - "graphics.Color.equals(java.lang.Object)"
  - "graphics.Color.fromNormalized()"
  - "graphics.Color.g"
  - "graphics.Color.getColor(float,float,float,float,int)"
  - "graphics.Color.r"
  - "graphics.Color.random"
  - "graphics.Color.randomColor()"
  - "graphics.Color.setAlpha(float)"
  - "graphics.Color.setValue(char,float)"
  - "graphics.Color.toHSLColor()"
  - "graphics.Color.toNormalizedVec3f()"
  - "graphics.Color.toNormalizedVec4f()"
  - "graphics.Color.toVec4f()"
  langs:
  - "java"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
  type: "Class"
  package: "graphics"
  summary: "Represents a 4-channel color of either RGBA or HSLA type, with some helper functions to convert an RGBA to HSLA, or vice versa. This Class also contains some predefined colors, a random color generator, and some OpenGL-related helper functions."
  syntax:
    content: "public class Color"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "graphics.Color.BLACK"
  id: "BLACK"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "BLACK"
  nameWithType: "Color.BLACK"
  fullName: "graphics.Color.BLACK"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color BLACK"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.BLUE"
  id: "BLUE"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "BLUE"
  nameWithType: "Color.BLUE"
  fullName: "graphics.Color.BLUE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color BLUE"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.BROWN"
  id: "BROWN"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "BROWN"
  nameWithType: "Color.BROWN"
  fullName: "graphics.Color.BROWN"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color BROWN"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.CRIMSON"
  id: "CRIMSON"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "CRIMSON"
  nameWithType: "Color.CRIMSON"
  fullName: "graphics.Color.CRIMSON"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color CRIMSON"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.CYAN"
  id: "CYAN"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "CYAN"
  nameWithType: "Color.CYAN"
  fullName: "graphics.Color.CYAN"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color CYAN"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.Color(float)"
  id: "Color(float)"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "Color(float c)"
  nameWithType: "Color.Color(float c)"
  fullName: "graphics.Color.Color(float c)"
  overload: "graphics.Color.Color*"
  type: "Constructor"
  package: "graphics"
  summary: "Creates new color with specified value for rgb"
  syntax:
    content: "public Color(float c)"
    parameters:
    - id: "c"
      type: "float"
      description: "value for red, green and blue"
- uid: "graphics.Color.Color(float,float,float)"
  id: "Color(float,float,float)"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "Color(float pr, float pg, float pb)"
  nameWithType: "Color.Color(float pr, float pg, float pb)"
  fullName: "graphics.Color.Color(float pr, float pg, float pb)"
  overload: "graphics.Color.Color*"
  type: "Constructor"
  package: "graphics"
  summary: "Creates new color with specified rgb values"
  syntax:
    content: "public Color(float pr, float pg, float pb)"
    parameters:
    - id: "pr"
      type: "float"
      description: "initial red value"
    - id: "pg"
      type: "float"
      description: "initial green value"
    - id: "pb"
      type: "float"
      description: "initial blue value"
- uid: "graphics.Color.Color(float,float,float,float)"
  id: "Color(float,float,float,float)"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "Color(float pr, float pg, float pb, float pa)"
  nameWithType: "Color.Color(float pr, float pg, float pb, float pa)"
  fullName: "graphics.Color.Color(float pr, float pg, float pb, float pa)"
  overload: "graphics.Color.Color*"
  type: "Constructor"
  package: "graphics"
  summary: "Creates new color with specified rgba values"
  syntax:
    content: "public Color(float pr, float pg, float pb, float pa)"
    parameters:
    - id: "pr"
      type: "float"
      description: "initial red value"
    - id: "pg"
      type: "float"
      description: "initial green value"
    - id: "pb"
      type: "float"
      description: "initial blue value"
    - id: "pa"
      type: "float"
      description: "initial alpha value"
- uid: "graphics.Color.DARK_BLUE"
  id: "DARK_BLUE"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "DARK_BLUE"
  nameWithType: "Color.DARK_BLUE"
  fullName: "graphics.Color.DARK_BLUE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color DARK_BLUE"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.DARK_GREEN"
  id: "DARK_GREEN"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "DARK_GREEN"
  nameWithType: "Color.DARK_GREEN"
  fullName: "graphics.Color.DARK_GREEN"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color DARK_GREEN"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.DARK_RED"
  id: "DARK_RED"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "DARK_RED"
  nameWithType: "Color.DARK_RED"
  fullName: "graphics.Color.DARK_RED"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color DARK_RED"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.DIRTY_BLUE"
  id: "DIRTY_BLUE"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "DIRTY_BLUE"
  nameWithType: "Color.DIRTY_BLUE"
  fullName: "graphics.Color.DIRTY_BLUE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color DIRTY_BLUE"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.FIREBRICK"
  id: "FIREBRICK"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "FIREBRICK"
  nameWithType: "Color.FIREBRICK"
  fullName: "graphics.Color.FIREBRICK"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color FIREBRICK"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.GRAY"
  id: "GRAY"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "GRAY"
  nameWithType: "Color.GRAY"
  fullName: "graphics.Color.GRAY"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color GRAY"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.GREEN"
  id: "GREEN"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "GREEN"
  nameWithType: "Color.GREEN"
  fullName: "graphics.Color.GREEN"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color GREEN"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.MAROON"
  id: "MAROON"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "MAROON"
  nameWithType: "Color.MAROON"
  fullName: "graphics.Color.MAROON"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color MAROON"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.NAVY_BLUE"
  id: "NAVY_BLUE"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "NAVY_BLUE"
  nameWithType: "Color.NAVY_BLUE"
  fullName: "graphics.Color.NAVY_BLUE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color NAVY_BLUE"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.OLIVE"
  id: "OLIVE"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "OLIVE"
  nameWithType: "Color.OLIVE"
  fullName: "graphics.Color.OLIVE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color OLIVE"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.PINK"
  id: "PINK"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "PINK"
  nameWithType: "Color.PINK"
  fullName: "graphics.Color.PINK"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color PINK"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.PURPLE"
  id: "PURPLE"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "PURPLE"
  nameWithType: "Color.PURPLE"
  fullName: "graphics.Color.PURPLE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color PURPLE"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.RED"
  id: "RED"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "RED"
  nameWithType: "Color.RED"
  fullName: "graphics.Color.RED"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color RED"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.SILVER"
  id: "SILVER"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "SILVER"
  nameWithType: "Color.SILVER"
  fullName: "graphics.Color.SILVER"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color SILVER"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.TEAL"
  id: "TEAL"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "TEAL"
  nameWithType: "Color.TEAL"
  fullName: "graphics.Color.TEAL"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color TEAL"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.TYPE_HSLA"
  id: "TYPE_HSLA"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "TYPE_HSLA"
  nameWithType: "Color.TYPE_HSLA"
  fullName: "graphics.Color.TYPE_HSLA"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static final int TYPE_HSLA"
    return:
      type: "int"
- uid: "graphics.Color.TYPE_RGBA"
  id: "TYPE_RGBA"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "TYPE_RGBA"
  nameWithType: "Color.TYPE_RGBA"
  fullName: "graphics.Color.TYPE_RGBA"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static final int TYPE_RGBA"
    return:
      type: "int"
- uid: "graphics.Color.WHITE"
  id: "WHITE"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "WHITE"
  nameWithType: "Color.WHITE"
  fullName: "graphics.Color.WHITE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color WHITE"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.YELLOW"
  id: "YELLOW"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "YELLOW"
  nameWithType: "Color.YELLOW"
  fullName: "graphics.Color.YELLOW"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Color YELLOW"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.a"
  id: "a"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "a"
  nameWithType: "Color.a"
  fullName: "graphics.Color.a"
  type: "Field"
  package: "graphics"
  summary: "Alpha component for this color. Range: 0-255"
  syntax:
    content: "public float a"
    return:
      type: "float"
- uid: "graphics.Color.b"
  id: "b"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "b"
  nameWithType: "Color.b"
  fullName: "graphics.Color.b"
  type: "Field"
  package: "graphics"
  summary: "Blue component for this color. Range: 0-255"
  syntax:
    content: "public float b"
    return:
      type: "float"
- uid: "graphics.Color.decode(java.lang.String)"
  id: "decode(java.lang.String)"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "decode(String colorCode)"
  nameWithType: "Color.decode(String colorCode)"
  fullName: "graphics.Color.decode(String colorCode)"
  overload: "graphics.Color.decode*"
  type: "Method"
  package: "graphics"
  summary: "Decode a rgb color code into a <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">Color</xref>"
  syntax:
    content: "public static Color decode(String colorCode)"
    parameters:
    - id: "colorCode"
      type: "java.lang.String"
      description: "the color code"
    return:
      type: "graphics.Color"
      description: "a valid rgb color"
- uid: "graphics.Color.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "equals(Object c)"
  nameWithType: "Color.equals(Object c)"
  fullName: "graphics.Color.equals(Object c)"
  overload: "graphics.Color.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "graphics"
  summary: "Check if colors are equal"
  syntax:
    content: "public boolean equals(Object c)"
    parameters:
    - id: "c"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "graphics.Color.fromNormalized()"
  id: "fromNormalized()"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "fromNormalized()"
  nameWithType: "Color.fromNormalized()"
  fullName: "graphics.Color.fromNormalized()"
  overload: "graphics.Color.fromNormalized*"
  type: "Method"
  package: "graphics"
  summary: "Turn a Color with normalised values to a color with values from 0-255"
  syntax:
    content: "public Color fromNormalized()"
    return:
      type: "graphics.Color"
- uid: "graphics.Color.g"
  id: "g"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "g"
  nameWithType: "Color.g"
  fullName: "graphics.Color.g"
  type: "Field"
  package: "graphics"
  summary: "Green component for this color. Range: 0-255"
  syntax:
    content: "public float g"
    return:
      type: "float"
- uid: "graphics.Color.getColor(float,float,float,float,int)"
  id: "getColor(float,float,float,float,int)"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "getColor(float x, float y, float z, float a, int inputType)"
  nameWithType: "Color.getColor(float x, float y, float z, float a, int inputType)"
  fullName: "graphics.Color.getColor(float x, float y, float z, float a, int inputType)"
  overload: "graphics.Color.getColor*"
  type: "Method"
  package: "graphics"
  summary: "Create a new color."
  syntax:
    content: "public static Color getColor(float x, float y, float z, float a, int inputType)"
    parameters:
    - id: "x"
      type: "float"
      description: "the first component"
    - id: "y"
      type: "float"
      description: "the second component"
    - id: "z"
      type: "float"
      description: "the third component"
    - id: "a"
      type: "float"
      description: "the alpha value"
    - id: "inputType"
      type: "int"
      description: "whether the input values are RGBA or HSLA"
    return:
      type: "graphics.Color"
      description: "a RGBA <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">Color</xref> representing the input"
- uid: "graphics.Color.r"
  id: "r"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "r"
  nameWithType: "Color.r"
  fullName: "graphics.Color.r"
  type: "Field"
  package: "graphics"
  summary: "Red component for this color. Range: 0-255"
  syntax:
    content: "public float r"
    return:
      type: "float"
- uid: "graphics.Color.random"
  id: "random"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "random"
  nameWithType: "Color.random"
  fullName: "graphics.Color.random"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Random random"
    return:
      type: "java.util.Random"
- uid: "graphics.Color.randomColor()"
  id: "randomColor()"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "randomColor()"
  nameWithType: "Color.randomColor()"
  fullName: "graphics.Color.randomColor()"
  overload: "graphics.Color.randomColor*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public static Color randomColor()"
    return:
      type: "graphics.Color"
      description: "random Color"
- uid: "graphics.Color.setAlpha(float)"
  id: "setAlpha(float)"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "setAlpha(float value)"
  nameWithType: "Color.setAlpha(float value)"
  fullName: "graphics.Color.setAlpha(float value)"
  overload: "graphics.Color.setAlpha*"
  type: "Method"
  package: "graphics"
  summary: "Set Alpha for this color"
  syntax:
    content: "public void setAlpha(float value)"
    parameters:
    - id: "value"
      type: "float"
- uid: "graphics.Color.setValue(char,float)"
  id: "setValue(char,float)"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "setValue(char type, float value)"
  nameWithType: "Color.setValue(char type, float value)"
  fullName: "graphics.Color.setValue(char type, float value)"
  overload: "graphics.Color.setValue*"
  type: "Method"
  package: "graphics"
  summary: "Set a component of this color to a value"
  syntax:
    content: "public void setValue(char type, float value)"
    parameters:
    - id: "type"
      type: "char"
      description: "can be one of r, g, b, a"
    - id: "value"
      type: "float"
      description: "value to set the component to"
- uid: "graphics.Color.toHSLColor()"
  id: "toHSLColor()"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "toHSLColor()"
  nameWithType: "Color.toHSLColor()"
  fullName: "graphics.Color.toHSLColor()"
  overload: "graphics.Color.toHSLColor*"
  type: "Method"
  package: "graphics"
  summary: "Convert this RGB <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">Color</xref> to a <xref uid=\"graphics.HSLColor\" data-throw-if-not-resolved=\"false\">HSLColor</xref> using <xref uid=\"graphics.HSLColor.toHSLA(float[])\" data-throw-if-not-resolved=\"false\">HSLColor#toHSLA(float[])</xref>"
  syntax:
    content: "public HSLColor toHSLColor()"
    return:
      type: "graphics.HSLColor"
      description: "a <xref uid=\"graphics.HSLColor\" data-throw-if-not-resolved=\"false\">HSLColor</xref> representing the same color"
- uid: "graphics.Color.toNormalizedVec3f()"
  id: "toNormalizedVec3f()"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "toNormalizedVec3f()"
  nameWithType: "Color.toNormalizedVec3f()"
  fullName: "graphics.Color.toNormalizedVec3f()"
  overload: "graphics.Color.toNormalizedVec3f*"
  type: "Method"
  package: "graphics"
  summary: "Get the Normalized Vector3f for this color. Used mostly in OpenGL"
  syntax:
    content: "public Vector3f toNormalizedVec3f()"
    return:
      type: "org.joml.Vector3f"
- uid: "graphics.Color.toNormalizedVec4f()"
  id: "toNormalizedVec4f()"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "toNormalizedVec4f()"
  nameWithType: "Color.toNormalizedVec4f()"
  fullName: "graphics.Color.toNormalizedVec4f()"
  overload: "graphics.Color.toNormalizedVec4f*"
  type: "Method"
  package: "graphics"
  summary: "Get the Normalized Vector4f for this color. Used mostly in OpenGL"
  syntax:
    content: "public Vector4f toNormalizedVec4f()"
    return:
      type: "org.joml.Vector4f"
- uid: "graphics.Color.toVec4f()"
  id: "toVec4f()"
  parent: "graphics.Color"
  langs:
  - "java"
  name: "toVec4f()"
  nameWithType: "Color.toVec4f()"
  fullName: "graphics.Color.toVec4f()"
  overload: "graphics.Color.toVec4f*"
  type: "Method"
  package: "graphics"
  summary: "Returns a Vector4f with rgba as xyzw"
  syntax:
    content: "public Vector4f toVec4f()"
    return:
      type: "org.joml.Vector4f"
references:
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "graphics.Color.Color*"
  name: "Color"
  nameWithType: "Color.Color"
  fullName: "graphics.Color.Color"
  package: "graphics"
- uid: "graphics.Color.randomColor*"
  name: "randomColor"
  nameWithType: "Color.randomColor"
  fullName: "graphics.Color.randomColor"
  package: "graphics"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "graphics.Color.getColor*"
  name: "getColor"
  nameWithType: "Color.getColor"
  fullName: "graphics.Color.getColor"
  package: "graphics"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "graphics.Color.decode*"
  name: "decode"
  nameWithType: "Color.decode"
  fullName: "graphics.Color.decode"
  package: "graphics"
- uid: "org.joml.Vector4f"
  spec.java:
  - uid: "org.joml.Vector4f"
    name: "Vector4f"
    fullName: "org.joml.Vector4f"
- uid: "graphics.Color.toVec4f*"
  name: "toVec4f"
  nameWithType: "Color.toVec4f"
  fullName: "graphics.Color.toVec4f"
  package: "graphics"
- uid: "graphics.Color.toNormalizedVec4f*"
  name: "toNormalizedVec4f"
  nameWithType: "Color.toNormalizedVec4f"
  fullName: "graphics.Color.toNormalizedVec4f"
  package: "graphics"
- uid: "org.joml.Vector3f"
  spec.java:
  - uid: "org.joml.Vector3f"
    name: "Vector3f"
    fullName: "org.joml.Vector3f"
- uid: "graphics.Color.toNormalizedVec3f*"
  name: "toNormalizedVec3f"
  nameWithType: "Color.toNormalizedVec3f"
  fullName: "graphics.Color.toNormalizedVec3f"
  package: "graphics"
- uid: "graphics.Color.fromNormalized*"
  name: "fromNormalized"
  nameWithType: "Color.fromNormalized"
  fullName: "graphics.Color.fromNormalized"
  package: "graphics"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "graphics.Color.equals*"
  name: "equals"
  nameWithType: "Color.equals"
  fullName: "graphics.Color.equals"
  package: "graphics"
- uid: "graphics.Color.setAlpha*"
  name: "setAlpha"
  nameWithType: "Color.setAlpha"
  fullName: "graphics.Color.setAlpha"
  package: "graphics"
- uid: "graphics.HSLColor"
  name: "HSLColor"
  nameWithType: "HSLColor"
  fullName: "graphics.HSLColor"
- uid: "graphics.Color.toHSLColor*"
  name: "toHSLColor"
  nameWithType: "Color.toHSLColor"
  fullName: "graphics.Color.toHSLColor"
  package: "graphics"
- uid: "char"
  spec.java:
  - uid: "char"
    name: "char"
    fullName: "char"
- uid: "graphics.Color.setValue*"
  name: "setValue"
  nameWithType: "Color.setValue"
  fullName: "graphics.Color.setValue"
  package: "graphics"
- uid: "java.util.Random"
  spec.java:
  - uid: "java.util.Random"
    name: "Random"
    fullName: "java.util.Random"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
