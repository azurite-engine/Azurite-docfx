### YamlMime:ManagedReference
items:
- uid: "util.Triple"
  id: "Triple"
  parent: "util"
  children:
  - "util.Triple.Triple()"
  - "util.Triple.Triple(L,M,R)"
  - "util.Triple.getLeft()"
  - "util.Triple.getMiddle()"
  - "util.Triple.getRight()"
  - "util.Triple.setLeft(L)"
  - "util.Triple.setMiddle(M)"
  - "util.Triple.setRight(R)"
  langs:
  - "java"
  name: "Triple<L,M,R>"
  nameWithType: "Triple<L,M,R>"
  fullName: "util.Triple<L,M,R>"
  type: "Class"
  package: "util"
  summary: "A <xref uid=\"util.Triple\" data-throw-if-not-resolved=\"false\">Triple</xref> is a tupel of three different values with potentially three different types."
  syntax:
    content: "public class Triple<L,M,R>"
    typeParameters:
    - id: "L"
    - id: "M"
    - id: "R"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "util.Triple.Triple()"
  id: "Triple()"
  parent: "util.Triple"
  langs:
  - "java"
  name: "Triple()"
  nameWithType: "Triple<L,M,R>.Triple()"
  fullName: "util.Triple<L,M,R>.Triple()"
  overload: "util.Triple.Triple*"
  type: "Constructor"
  package: "util"
  summary: "Creates a Triple with no values."
  syntax:
    content: "public Triple()"
- uid: "util.Triple.Triple(L,M,R)"
  id: "Triple(L,M,R)"
  parent: "util.Triple"
  langs:
  - "java"
  name: "Triple(L left, M middle, R right)"
  nameWithType: "Triple<L,M,R>.Triple(L left, M middle, R right)"
  fullName: "util.Triple<L,M,R>.Triple(L left, M middle, R right)"
  overload: "util.Triple.Triple*"
  type: "Constructor"
  package: "util"
  summary: "Creates a triple of three values."
  syntax:
    content: "public Triple(L left, M middle, R right)"
    parameters:
    - id: "left"
      type: "L"
      description: "first value"
    - id: "middle"
      type: "M"
      description: "second value"
    - id: "right"
      type: "R"
      description: "third value"
- uid: "util.Triple.getLeft()"
  id: "getLeft()"
  parent: "util.Triple"
  langs:
  - "java"
  name: "getLeft()"
  nameWithType: "Triple<L,M,R>.getLeft()"
  fullName: "util.Triple<L,M,R>.getLeft()"
  overload: "util.Triple.getLeft*"
  type: "Method"
  package: "util"
  syntax:
    content: "public L getLeft()"
    return:
      type: "L"
- uid: "util.Triple.getMiddle()"
  id: "getMiddle()"
  parent: "util.Triple"
  langs:
  - "java"
  name: "getMiddle()"
  nameWithType: "Triple<L,M,R>.getMiddle()"
  fullName: "util.Triple<L,M,R>.getMiddle()"
  overload: "util.Triple.getMiddle*"
  type: "Method"
  package: "util"
  syntax:
    content: "public M getMiddle()"
    return:
      type: "M"
- uid: "util.Triple.getRight()"
  id: "getRight()"
  parent: "util.Triple"
  langs:
  - "java"
  name: "getRight()"
  nameWithType: "Triple<L,M,R>.getRight()"
  fullName: "util.Triple<L,M,R>.getRight()"
  overload: "util.Triple.getRight*"
  type: "Method"
  package: "util"
  syntax:
    content: "public R getRight()"
    return:
      type: "R"
- uid: "util.Triple.setLeft(L)"
  id: "setLeft(L)"
  parent: "util.Triple"
  langs:
  - "java"
  name: "setLeft(L left)"
  nameWithType: "Triple<L,M,R>.setLeft(L left)"
  fullName: "util.Triple<L,M,R>.setLeft(L left)"
  overload: "util.Triple.setLeft*"
  type: "Method"
  package: "util"
  syntax:
    content: "public void setLeft(L left)"
    parameters:
    - id: "left"
      type: "L"
- uid: "util.Triple.setMiddle(M)"
  id: "setMiddle(M)"
  parent: "util.Triple"
  langs:
  - "java"
  name: "setMiddle(M middle)"
  nameWithType: "Triple<L,M,R>.setMiddle(M middle)"
  fullName: "util.Triple<L,M,R>.setMiddle(M middle)"
  overload: "util.Triple.setMiddle*"
  type: "Method"
  package: "util"
  syntax:
    content: "public void setMiddle(M middle)"
    parameters:
    - id: "middle"
      type: "M"
- uid: "util.Triple.setRight(R)"
  id: "setRight(R)"
  parent: "util.Triple"
  langs:
  - "java"
  name: "setRight(R right)"
  nameWithType: "Triple<L,M,R>.setRight(R right)"
  fullName: "util.Triple<L,M,R>.setRight(R right)"
  overload: "util.Triple.setRight*"
  type: "Method"
  package: "util"
  syntax:
    content: "public void setRight(R right)"
    parameters:
    - id: "right"
      type: "R"
references:
- uid: "L"
  spec.java:
  - uid: "L"
    name: "L"
    fullName: "L"
- uid: "M"
  spec.java:
  - uid: "M"
    name: "M"
    fullName: "M"
- uid: "R"
  spec.java:
  - uid: "R"
    name: "R"
    fullName: "R"
- uid: "util.Triple.Triple*"
  name: "Triple"
  nameWithType: "Triple<L,M,R>.Triple"
  fullName: "util.Triple<L,M,R>.Triple"
  package: "util"
- uid: "util.Triple.getLeft*"
  name: "getLeft"
  nameWithType: "Triple<L,M,R>.getLeft"
  fullName: "util.Triple<L,M,R>.getLeft"
  package: "util"
- uid: "util.Triple.setLeft*"
  name: "setLeft"
  nameWithType: "Triple<L,M,R>.setLeft"
  fullName: "util.Triple<L,M,R>.setLeft"
  package: "util"
- uid: "util.Triple.getMiddle*"
  name: "getMiddle"
  nameWithType: "Triple<L,M,R>.getMiddle"
  fullName: "util.Triple<L,M,R>.getMiddle"
  package: "util"
- uid: "util.Triple.setMiddle*"
  name: "setMiddle"
  nameWithType: "Triple<L,M,R>.setMiddle"
  fullName: "util.Triple<L,M,R>.setMiddle"
  package: "util"
- uid: "util.Triple.getRight*"
  name: "getRight"
  nameWithType: "Triple<L,M,R>.getRight"
  fullName: "util.Triple<L,M,R>.getRight"
  package: "util"
- uid: "util.Triple.setRight*"
  name: "setRight"
  nameWithType: "Triple<L,M,R>.setRight"
  fullName: "util.Triple<L,M,R>.setRight"
  package: "util"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
