### YamlMime:ManagedReference
items:
- uid: "graphics.Camera"
  id: "Camera"
  parent: "graphics"
  children:
  - "graphics.Camera.Camera()"
  - "graphics.Camera.Camera(org.joml.Vector2f)"
  - "graphics.Camera.adjustProjection()"
  - "graphics.Camera.getPosition()"
  - "graphics.Camera.getProjectionMatrix()"
  - "graphics.Camera.getViewMatrix()"
  - "graphics.Camera.position"
  - "graphics.Camera.smoothFollow(org.joml.Vector2f)"
  langs:
  - "java"
  name: "Camera"
  nameWithType: "Camera"
  fullName: "graphics.Camera"
  type: "Class"
  package: "graphics"
  summary: "Represents a basic camera. The purpose of a digital camera capturing a digital point of view is to translate the 3D locations in game onto the 2 dimensions of your monitor (if you come from the future with holograms in it, Hi! welcome to the past!) The camera does so by way of linear algebra; points in 3D space can be projected onto a 2D plane using matrix transformations.\n\nSpecifically, the digital camera used in this engine is composed of two matrices: the projection and the view matrices. The projection matrix is used to define an in game width and height to your perspective by defining how many in-game coordinate units can be seen horizontally and vertically on your monitor. The view matrix defines the direction and orientation of the camera; it's usually the matrix defined in terms of camera position, pitch, and yaw."
  syntax:
    content: "public class Camera"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "graphics.Camera.Camera()"
  id: "Camera()"
  parent: "graphics.Camera"
  langs:
  - "java"
  name: "Camera()"
  nameWithType: "Camera.Camera()"
  fullName: "graphics.Camera.Camera()"
  overload: "graphics.Camera.Camera*"
  type: "Constructor"
  package: "graphics"
  summary: "Creates a new Camera positioned at (0, 0) Projection matrix is set to default: 0 to Window's width from left to right, 0 to Window's height from top to bottom"
  syntax:
    content: "public Camera()"
- uid: "graphics.Camera.Camera(org.joml.Vector2f)"
  id: "Camera(org.joml.Vector2f)"
  parent: "graphics.Camera"
  langs:
  - "java"
  name: "Camera(Vector2f position)"
  nameWithType: "Camera.Camera(Vector2f position)"
  fullName: "graphics.Camera.Camera(Vector2f position)"
  overload: "graphics.Camera.Camera*"
  type: "Constructor"
  package: "graphics"
  summary: "Creates a new Camera with a certain position Projection matrix is set to default: 0 to Window's width from left to right, 0 to Window's height from top to bottom"
  syntax:
    content: "public Camera(Vector2f position)"
    parameters:
    - id: "position"
      type: "org.joml.Vector2f"
      description: "initial position"
- uid: "graphics.Camera.adjustProjection()"
  id: "adjustProjection()"
  parent: "graphics.Camera"
  langs:
  - "java"
  name: "adjustProjection()"
  nameWithType: "Camera.adjustProjection()"
  fullName: "graphics.Camera.adjustProjection()"
  overload: "graphics.Camera.adjustProjection*"
  type: "Method"
  package: "graphics"
  summary: "Recalculate Projection Matrix"
  syntax:
    content: "public void adjustProjection()"
- uid: "graphics.Camera.getPosition()"
  id: "getPosition()"
  parent: "graphics.Camera"
  langs:
  - "java"
  name: "getPosition()"
  nameWithType: "Camera.getPosition()"
  fullName: "graphics.Camera.getPosition()"
  overload: "graphics.Camera.getPosition*"
  type: "Method"
  package: "graphics"
  summary: "Get the camera's position"
  syntax:
    content: "public Vector2f getPosition()"
    return:
      type: "org.joml.Vector2f"
- uid: "graphics.Camera.getProjectionMatrix()"
  id: "getProjectionMatrix()"
  parent: "graphics.Camera"
  langs:
  - "java"
  name: "getProjectionMatrix()"
  nameWithType: "Camera.getProjectionMatrix()"
  fullName: "graphics.Camera.getProjectionMatrix()"
  overload: "graphics.Camera.getProjectionMatrix*"
  type: "Method"
  package: "graphics"
  summary: "Get the camera's projection matrix"
  syntax:
    content: "public Matrix4f getProjectionMatrix()"
    return:
      type: "org.joml.Matrix4f"
- uid: "graphics.Camera.getViewMatrix()"
  id: "getViewMatrix()"
  parent: "graphics.Camera"
  langs:
  - "java"
  name: "getViewMatrix()"
  nameWithType: "Camera.getViewMatrix()"
  fullName: "graphics.Camera.getViewMatrix()"
  overload: "graphics.Camera.getViewMatrix*"
  type: "Method"
  package: "graphics"
  summary: "Recalculates and returns the view marix"
  syntax:
    content: "public Matrix4f getViewMatrix()"
    return:
      type: "org.joml.Matrix4f"
- uid: "graphics.Camera.position"
  id: "position"
  parent: "graphics.Camera"
  langs:
  - "java"
  name: "position"
  nameWithType: "Camera.position"
  fullName: "graphics.Camera.position"
  type: "Field"
  package: "graphics"
  summary: "Position of the camera"
  syntax:
    content: "public Vector2f position"
    return:
      type: "org.joml.Vector2f"
- uid: "graphics.Camera.smoothFollow(org.joml.Vector2f)"
  id: "smoothFollow(org.joml.Vector2f)"
  parent: "graphics.Camera"
  langs:
  - "java"
  name: "smoothFollow(Vector2f c)"
  nameWithType: "Camera.smoothFollow(Vector2f c)"
  fullName: "graphics.Camera.smoothFollow(Vector2f c)"
  overload: "graphics.Camera.smoothFollow*"
  type: "Method"
  package: "graphics"
  summary: "Smoothly center the camera on to a transform"
  syntax:
    content: "public void smoothFollow(Vector2f c)"
    parameters:
    - id: "c"
      type: "org.joml.Vector2f"
references:
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "graphics.Camera.Camera*"
  name: "Camera"
  nameWithType: "Camera.Camera"
  fullName: "graphics.Camera.Camera"
  package: "graphics"
- uid: "graphics.Camera.adjustProjection*"
  name: "adjustProjection"
  nameWithType: "Camera.adjustProjection"
  fullName: "graphics.Camera.adjustProjection"
  package: "graphics"
- uid: "org.joml.Matrix4f"
  spec.java:
  - uid: "org.joml.Matrix4f"
    name: "Matrix4f"
    fullName: "org.joml.Matrix4f"
- uid: "graphics.Camera.getViewMatrix*"
  name: "getViewMatrix"
  nameWithType: "Camera.getViewMatrix"
  fullName: "graphics.Camera.getViewMatrix"
  package: "graphics"
- uid: "graphics.Camera.getProjectionMatrix*"
  name: "getProjectionMatrix"
  nameWithType: "Camera.getProjectionMatrix"
  fullName: "graphics.Camera.getProjectionMatrix"
  package: "graphics"
- uid: "graphics.Camera.smoothFollow*"
  name: "smoothFollow"
  nameWithType: "Camera.smoothFollow"
  fullName: "graphics.Camera.smoothFollow"
  package: "graphics"
- uid: "graphics.Camera.getPosition*"
  name: "getPosition"
  nameWithType: "Camera.getPosition"
  fullName: "graphics.Camera.getPosition"
  package: "graphics"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
