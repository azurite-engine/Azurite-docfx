### YamlMime:ManagedReference
items:
- uid: "ui.EventHandler"
  id: "EventHandler"
  parent: "ui"
  children:
  - "ui.EventHandler.Event"
  - "ui.EventHandler.EventHandler(ui.Element)"
  - "ui.EventHandler.callEvent(ui.EventHandler.Event)"
  - "ui.EventHandler.getElement()"
  - "ui.EventHandler.isMouseButtonClicked(int)"
  - "ui.EventHandler.registerListener(ui.EventHandler.Event,java.util.function.Consumer<ui.EventHandler>)"
  - "ui.EventHandler.update()"
  langs:
  - "java"
  name: "EventHandler"
  nameWithType: "EventHandler"
  fullName: "ui.EventHandler"
  type: "Class"
  package: "ui"
  syntax:
    content: "public class EventHandler"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ui.EventHandler.EventHandler(ui.Element)"
  id: "EventHandler(ui.Element)"
  parent: "ui.EventHandler"
  langs:
  - "java"
  name: "EventHandler(Element parent)"
  nameWithType: "EventHandler.EventHandler(Element parent)"
  fullName: "ui.EventHandler.EventHandler(Element parent)"
  overload: "ui.EventHandler.EventHandler*"
  type: "Constructor"
  package: "ui"
  syntax:
    content: "public EventHandler(Element parent)"
    parameters:
    - id: "parent"
      type: "ui.Element"
- uid: "ui.EventHandler.callEvent(ui.EventHandler.Event)"
  id: "callEvent(ui.EventHandler.Event)"
  parent: "ui.EventHandler"
  langs:
  - "java"
  name: "callEvent(EventHandler.Event event)"
  nameWithType: "EventHandler.callEvent(EventHandler.Event event)"
  fullName: "ui.EventHandler.callEvent(EventHandler.Event event)"
  overload: "ui.EventHandler.callEvent*"
  type: "Method"
  package: "ui"
  summary: "Call a specific event. Note: This might lead to unexpected and unwanted behaviour, when used wrongly."
  syntax:
    content: "public void callEvent(EventHandler.Event event)"
    parameters:
    - id: "event"
      type: "ui.EventHandler.Event"
      description: "the event to call"
- uid: "ui.EventHandler.getElement()"
  id: "getElement()"
  parent: "ui.EventHandler"
  langs:
  - "java"
  name: "getElement()"
  nameWithType: "EventHandler.getElement()"
  fullName: "ui.EventHandler.getElement()"
  overload: "ui.EventHandler.getElement*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public Element getElement()"
    return:
      type: "ui.Element"
- uid: "ui.EventHandler.isMouseButtonClicked(int)"
  id: "isMouseButtonClicked(int)"
  parent: "ui.EventHandler"
  langs:
  - "java"
  name: "isMouseButtonClicked(int button)"
  nameWithType: "EventHandler.isMouseButtonClicked(int button)"
  fullName: "ui.EventHandler.isMouseButtonClicked(int button)"
  overload: "ui.EventHandler.isMouseButtonClicked*"
  type: "Method"
  package: "ui"
  summary: "Check, whether a mouse button has been clicked (pressed and released again) in this update loop. Should be used inside the <xref uid=\"\" data-throw-if-not-resolved=\"false\">Event#MOUSE_CLICK</xref>, will probably lead to false in any other case."
  syntax:
    content: "public boolean isMouseButtonClicked(int button)"
    parameters:
    - id: "button"
      type: "int"
      description: "the mouse button to check, e.g. <xref uid=\"\" data-throw-if-not-resolved=\"false\">org.lwjgl.glfw.GLFW#GLFW_MOUSE_BUTTON_LEFT</xref>"
    return:
      type: "boolean"
      description: "true if and only if the button has been clicked"
- uid: "ui.EventHandler.registerListener(ui.EventHandler.Event,java.util.function.Consumer<ui.EventHandler>)"
  id: "registerListener(ui.EventHandler.Event,java.util.function.Consumer<ui.EventHandler>)"
  parent: "ui.EventHandler"
  langs:
  - "java"
  name: "registerListener(EventHandler.Event event, Consumer<EventHandler> listener)"
  nameWithType: "EventHandler.registerListener(EventHandler.Event event, Consumer<EventHandler> listener)"
  fullName: "ui.EventHandler.registerListener(EventHandler.Event event, Consumer<EventHandler> listener)"
  overload: "ui.EventHandler.registerListener*"
  type: "Method"
  package: "ui"
  summary: "Register a new event listener for this event handler and this component."
  syntax:
    content: "public void registerListener(EventHandler.Event event, Consumer<EventHandler> listener)"
    parameters:
    - id: "event"
      type: "ui.EventHandler.Event"
      description: "the event to listen for"
    - id: "listener"
      type: "java.util.function.Consumer<ui.EventHandler>"
      description: "the listener containing logic to be executed if the specified event happens"
- uid: "ui.EventHandler.update()"
  id: "update()"
  parent: "ui.EventHandler"
  langs:
  - "java"
  name: "update()"
  nameWithType: "EventHandler.update()"
  fullName: "ui.EventHandler.update()"
  overload: "ui.EventHandler.update*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public void update()"
references:
- uid: "ui.Element"
  name: "Element"
  nameWithType: "Element"
  fullName: "ui.Element"
- uid: "ui.EventHandler.EventHandler*"
  name: "EventHandler"
  nameWithType: "EventHandler.EventHandler"
  fullName: "ui.EventHandler.EventHandler"
  package: "ui"
- uid: "ui.EventHandler.update*"
  name: "update"
  nameWithType: "EventHandler.update"
  fullName: "ui.EventHandler.update"
  package: "ui"
- uid: "ui.EventHandler.Event"
  name: "EventHandler.Event"
  nameWithType: "EventHandler.Event"
  fullName: "ui.EventHandler.Event"
- uid: "java.util.function.Consumer<ui.EventHandler>"
  spec.java:
  - uid: "java.util.function.Consumer"
    name: "Consumer"
    fullName: "java.util.function.Consumer"
  - name: "<"
    fullName: "<"
  - uid: "ui.EventHandler"
    name: "EventHandler"
    fullName: "ui.EventHandler"
  - name: ">"
    fullName: ">"
- uid: "ui.EventHandler.registerListener*"
  name: "registerListener"
  nameWithType: "EventHandler.registerListener"
  fullName: "ui.EventHandler.registerListener"
  package: "ui"
- uid: "ui.EventHandler.getElement*"
  name: "getElement"
  nameWithType: "EventHandler.getElement"
  fullName: "ui.EventHandler.getElement"
  package: "ui"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "ui.EventHandler.isMouseButtonClicked*"
  name: "isMouseButtonClicked"
  nameWithType: "EventHandler.isMouseButtonClicked"
  fullName: "ui.EventHandler.isMouseButtonClicked"
  package: "ui"
- uid: "ui.EventHandler.callEvent*"
  name: "callEvent"
  nameWithType: "EventHandler.callEvent"
  fullName: "ui.EventHandler.callEvent"
  package: "ui"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.function.Consumer"
  name: "Consumer"
  nameWithType: "Consumer"
  fullName: "java.util.function.Consumer"
