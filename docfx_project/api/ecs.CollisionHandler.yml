### YamlMime:ManagedReference
items:
- uid: "ecs.CollisionHandler"
  id: "CollisionHandler"
  parent: "ecs"
  children:
  - "ecs.CollisionHandler.CollisionHandler(physics.collision.Collider)"
  - "ecs.CollisionHandler.collision(physics.collision.Collider,physics.collision.CollisionInformation)"
  - "ecs.CollisionHandler.getCollider()"
  - "ecs.CollisionHandler.start()"
  - "ecs.CollisionHandler.update(float)"
  langs:
  - "java"
  name: "CollisionHandler"
  nameWithType: "CollisionHandler"
  fullName: "ecs.CollisionHandler"
  type: "Class"
  package: "ecs"
  summary: "A component to handle and react to collisions using a collider. Can be attached to an object if it should react to collisions in any way."
  syntax:
    content: "public abstract class CollisionHandler extends Component"
  inheritance:
  - "java.lang.Object"
  - "ecs.Component"
  inheritedMembers:
  - "ecs.Component.compareTo(ecs.Component)"
  - "ecs.Component.debug()"
  - "ecs.Component.position()"
  - "ecs.Component.remove()"
  - "ecs.Component.setPosition(org.joml.Vector2f)"
  - "ecs.Component.start()"
  - "ecs.Component.update(float)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ecs.CollisionHandler.CollisionHandler(physics.collision.Collider)"
  id: "CollisionHandler(physics.collision.Collider)"
  parent: "ecs.CollisionHandler"
  langs:
  - "java"
  name: "CollisionHandler(Collider collider)"
  nameWithType: "CollisionHandler.CollisionHandler(Collider collider)"
  fullName: "ecs.CollisionHandler.CollisionHandler(Collider collider)"
  overload: "ecs.CollisionHandler.CollisionHandler*"
  type: "Constructor"
  package: "ecs"
  syntax:
    content: "public CollisionHandler(Collider collider)"
    parameters:
    - id: "collider"
      type: "physics.collision.Collider"
- uid: "ecs.CollisionHandler.collision(physics.collision.Collider,physics.collision.CollisionInformation)"
  id: "collision(physics.collision.Collider,physics.collision.CollisionInformation)"
  parent: "ecs.CollisionHandler"
  langs:
  - "java"
  name: "collision(Collider environment, CollisionInformation collisionInformation)"
  nameWithType: "CollisionHandler.collision(Collider environment, CollisionInformation collisionInformation)"
  fullName: "ecs.CollisionHandler.collision(Collider environment, CollisionInformation collisionInformation)"
  overload: "ecs.CollisionHandler.collision*"
  type: "Method"
  package: "ecs"
  summary: "Will be called in the update loop if a collision happens <xref uid=\"physics.collision.CollisionInformation.collision()\" data-throw-if-not-resolved=\"false\">CollisionInformation#collision()</xref> with the given environment collider and the defined one of this handler \\{@link this\\#getCollider()\\}."
  syntax:
    content: "public abstract void collision(Collider environment, CollisionInformation collisionInformation)"
    parameters:
    - id: "environment"
      type: "physics.collision.Collider"
      description: "the other collider in the environment"
    - id: "collisionInformation"
      type: "physics.collision.CollisionInformation"
      description: "the data about the collision"
- uid: "ecs.CollisionHandler.getCollider()"
  id: "getCollider()"
  parent: "ecs.CollisionHandler"
  langs:
  - "java"
  name: "getCollider()"
  nameWithType: "CollisionHandler.getCollider()"
  fullName: "ecs.CollisionHandler.getCollider()"
  overload: "ecs.CollisionHandler.getCollider*"
  type: "Method"
  package: "ecs"
  syntax:
    content: "protected Collider getCollider()"
    return:
      type: "physics.collision.Collider"
- uid: "ecs.CollisionHandler.start()"
  id: "start()"
  parent: "ecs.CollisionHandler"
  langs:
  - "java"
  name: "start()"
  nameWithType: "CollisionHandler.start()"
  fullName: "ecs.CollisionHandler.start()"
  overload: "ecs.CollisionHandler.start*"
  overridden: "ecs.Component.start()"
  type: "Method"
  package: "ecs"
  summary: "Called once on Component initialization."
  syntax:
    content: "public void start()"
- uid: "ecs.CollisionHandler.update(float)"
  id: "update(float)"
  parent: "ecs.CollisionHandler"
  langs:
  - "java"
  name: "update(float dt)"
  nameWithType: "CollisionHandler.update(float dt)"
  fullName: "ecs.CollisionHandler.update(float dt)"
  overload: "ecs.CollisionHandler.update*"
  overridden: "ecs.Component.update(float)"
  type: "Method"
  package: "ecs"
  summary: "Called once per frame for each Component"
  syntax:
    content: "public void update(float dt)"
    parameters:
    - id: "dt"
      type: "float"
references:
- uid: "physics.collision.Collider"
  name: "Collider"
  nameWithType: "Collider"
  fullName: "physics.collision.Collider"
- uid: "ecs.CollisionHandler.CollisionHandler*"
  name: "CollisionHandler"
  nameWithType: "CollisionHandler.CollisionHandler"
  fullName: "ecs.CollisionHandler.CollisionHandler"
  package: "ecs"
- uid: "ecs.CollisionHandler.start*"
  name: "start"
  nameWithType: "CollisionHandler.start"
  fullName: "ecs.CollisionHandler.start"
  package: "ecs"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "ecs.CollisionHandler.update*"
  name: "update"
  nameWithType: "CollisionHandler.update"
  fullName: "ecs.CollisionHandler.update"
  package: "ecs"
- uid: "ecs.CollisionHandler.getCollider*"
  name: "getCollider"
  nameWithType: "CollisionHandler.getCollider"
  fullName: "ecs.CollisionHandler.getCollider"
  package: "ecs"
- uid: "physics.collision.CollisionInformation"
  name: "CollisionInformation"
  nameWithType: "CollisionInformation"
  fullName: "physics.collision.CollisionInformation"
- uid: "ecs.CollisionHandler.collision*"
  name: "collision"
  nameWithType: "CollisionHandler.collision"
  fullName: "ecs.CollisionHandler.collision"
  package: "ecs"
- uid: "ecs.Component"
  name: "Component"
  nameWithType: "Component"
  fullName: "ecs.Component"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "ecs.Component.compareTo(ecs.Component)"
  name: "Component.compareTo(Component)"
  nameWithType: "Component.compareTo(Component)"
  fullName: "ecs.Component.compareTo(ecs.Component)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "ecs.Component.debug()"
  name: "Component.debug()"
  nameWithType: "Component.debug()"
  fullName: "ecs.Component.debug()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ecs.Component.start()"
  name: "Component.start()"
  nameWithType: "Component.start()"
  fullName: "ecs.Component.start()"
- uid: "ecs.Component.remove()"
  name: "Component.remove()"
  nameWithType: "Component.remove()"
  fullName: "ecs.Component.remove()"
- uid: "ecs.Component.position()"
  name: "Component.position()"
  nameWithType: "Component.position()"
  fullName: "ecs.Component.position()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "ecs.Component.setPosition(org.joml.Vector2f)"
  name: "Component.setPosition(Vector2f)"
  nameWithType: "Component.setPosition(Vector2f)"
  fullName: "ecs.Component.setPosition(org.joml.Vector2f)"
- uid: "ecs.Component.update(float)"
  name: "Component.update(float)"
  nameWithType: "Component.update(float)"
  fullName: "ecs.Component.update(float)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
