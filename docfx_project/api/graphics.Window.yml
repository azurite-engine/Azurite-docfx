### YamlMime:ManagedReference
items:
- uid: "graphics.Window"
  id: "Window"
  parent: "graphics"
  children:
  - "graphics.Window.Window(int,int,java.lang.String,boolean)"
  - "graphics.Window.Window(int,int,java.lang.String,boolean,float,boolean)"
  - "graphics.Window.Window(int,int,java.lang.String,float,boolean)"
  - "graphics.Window.Window(java.lang.String)"
  - "graphics.Window.Window(java.lang.String,boolean)"
  - "graphics.Window.Window(java.lang.String,float,boolean)"
  - "graphics.Window.currentScene()"
  - "graphics.Window.getCamera()"
  - "graphics.Window.getFPS()"
  - "graphics.Window.getHeight()"
  - "graphics.Window.getSceneManager()"
  - "graphics.Window.getTitle()"
  - "graphics.Window.getWidth()"
  - "graphics.Window.glfwWindow()"
  - "graphics.Window.instance"
  - "graphics.Window.setIcon(java.lang.String)"
  - "graphics.Window.setTitle(java.lang.String)"
  - "graphics.Window.showWindow()"
  langs:
  - "java"
  name: "Window"
  nameWithType: "Window"
  fullName: "graphics.Window"
  type: "Class"
  package: "graphics"
  summary: "The Window class handles the setup and management of the GLFW window for rendering graphics. It provides methods for window creation, configuration, resizing, and event handling."
  syntax:
    content: "public class Window"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "graphics.Window.Window(int,int,java.lang.String,boolean)"
  id: "Window(int,int,java.lang.String,boolean)"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "Window(int pwidth, int pheight, String ptitle, boolean recalculateProjectionOnResize)"
  nameWithType: "Window.Window(int pwidth, int pheight, String ptitle, boolean recalculateProjectionOnResize)"
  fullName: "graphics.Window.Window(int pwidth, int pheight, String ptitle, boolean recalculateProjectionOnResize)"
  overload: "graphics.Window.Window*"
  type: "Constructor"
  package: "graphics"
  summary: "Constructs a new Window object with the specified width, height, title, and recalculate projection on resize flag. The minimum scene lighting value is set to 1.0f by default."
  syntax:
    content: "public Window(int pwidth, int pheight, String ptitle, boolean recalculateProjectionOnResize)"
    parameters:
    - id: "pwidth"
      type: "int"
      description: "The width of the window"
    - id: "pheight"
      type: "int"
      description: "The height of the window"
    - id: "ptitle"
      type: "java.lang.String"
      description: "The title of the window"
    - id: "recalculateProjectionOnResize"
      type: "boolean"
      description: "Whether to recalculate the projection matrix on window resize"
- uid: "graphics.Window.Window(int,int,java.lang.String,boolean,float,boolean)"
  id: "Window(int,int,java.lang.String,boolean,float,boolean)"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "Window(int pwidth, int pheight, String ptitle, boolean fullscreen, float minSceneLighting, boolean recalculateProjectionOnResize)"
  nameWithType: "Window.Window(int pwidth, int pheight, String ptitle, boolean fullscreen, float minSceneLighting, boolean recalculateProjectionOnResize)"
  fullName: "graphics.Window.Window(int pwidth, int pheight, String ptitle, boolean fullscreen, float minSceneLighting, boolean recalculateProjectionOnResize)"
  overload: "graphics.Window.Window*"
  type: "Constructor"
  package: "graphics"
  summary: "Creates a Window object with specified width, height, title, fullscreen mode, minimum scene lighting, and option to recalculate projection on window resize."
  syntax:
    content: "public Window(int pwidth, int pheight, String ptitle, boolean fullscreen, float minSceneLighting, boolean recalculateProjectionOnResize)"
    parameters:
    - id: "pwidth"
      type: "int"
      description: "The width of the window in pixels"
    - id: "pheight"
      type: "int"
      description: "The height of the window in pixels"
    - id: "ptitle"
      type: "java.lang.String"
      description: "The title of the window"
    - id: "fullscreen"
      type: "boolean"
      description: "Whether the window should be in\n                                      fullscreen mode"
    - id: "minSceneLighting"
      type: "float"
      description: "The minimum lighting value for the scene"
    - id: "recalculateProjectionOnResize"
      type: "boolean"
      description: "Whether to recalculate projection on\n                                      window resize"
- uid: "graphics.Window.Window(int,int,java.lang.String,float,boolean)"
  id: "Window(int,int,java.lang.String,float,boolean)"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "Window(int pwidth, int pheight, String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  nameWithType: "Window.Window(int pwidth, int pheight, String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  fullName: "graphics.Window.Window(int pwidth, int pheight, String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  overload: "graphics.Window.Window*"
  type: "Constructor"
  package: "graphics"
  summary: "Constructs a new Window object with the specified width, height, title, minimum scene lighting, and recalculate projection on resize flag."
  syntax:
    content: "public Window(int pwidth, int pheight, String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
    parameters:
    - id: "pwidth"
      type: "int"
      description: "The width of the window"
    - id: "pheight"
      type: "int"
      description: "The height of the window"
    - id: "ptitle"
      type: "java.lang.String"
      description: "The title of the window"
    - id: "minSceneLighting"
      type: "float"
      description: "The minimum scene lighting value"
    - id: "recalculateProjectionOnResize"
      type: "boolean"
      description: "Whether to recalculate the projection\n                                      matrix on window resize"
- uid: "graphics.Window.Window(java.lang.String)"
  id: "Window(java.lang.String)"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "Window(String ptitle)"
  nameWithType: "Window.Window(String ptitle)"
  fullName: "graphics.Window.Window(String ptitle)"
  overload: "graphics.Window.Window*"
  type: "Constructor"
  package: "graphics"
  syntax:
    content: "public Window(String ptitle)"
    parameters:
    - id: "ptitle"
      type: "java.lang.String"
- uid: "graphics.Window.Window(java.lang.String,boolean)"
  id: "Window(java.lang.String,boolean)"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "Window(String ptitle, boolean recalculateProjectionOnResize)"
  nameWithType: "Window.Window(String ptitle, boolean recalculateProjectionOnResize)"
  fullName: "graphics.Window.Window(String ptitle, boolean recalculateProjectionOnResize)"
  overload: "graphics.Window.Window*"
  type: "Constructor"
  package: "graphics"
  syntax:
    content: "public Window(String ptitle, boolean recalculateProjectionOnResize)"
    parameters:
    - id: "ptitle"
      type: "java.lang.String"
    - id: "recalculateProjectionOnResize"
      type: "boolean"
- uid: "graphics.Window.Window(java.lang.String,float,boolean)"
  id: "Window(java.lang.String,float,boolean)"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "Window(String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  nameWithType: "Window.Window(String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  fullName: "graphics.Window.Window(String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  overload: "graphics.Window.Window*"
  type: "Constructor"
  package: "graphics"
  summary: "Constructor to create a Window object with specified title, minimum scene lighting, and option to recalculate projection on window resize. The window will be created with the default width and height of the primary monitor."
  syntax:
    content: "public Window(String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
    parameters:
    - id: "ptitle"
      type: "java.lang.String"
      description: "The title of the window"
    - id: "minSceneLighting"
      type: "float"
      description: "The minimum lighting value for the scene"
    - id: "recalculateProjectionOnResize"
      type: "boolean"
      description: "Whether to recalculate projection on\n                                      window resize"
- uid: "graphics.Window.currentScene()"
  id: "currentScene()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "currentScene()"
  nameWithType: "Window.currentScene()"
  fullName: "graphics.Window.currentScene()"
  overload: "graphics.Window.currentScene*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public Scene currentScene()"
    return:
      type: "scene.Scene"
- uid: "graphics.Window.getCamera()"
  id: "getCamera()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "getCamera()"
  nameWithType: "Window.getCamera()"
  fullName: "graphics.Window.getCamera()"
  overload: "graphics.Window.getCamera*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public static Camera getCamera()"
    return:
      type: "graphics.Camera"
- uid: "graphics.Window.getFPS()"
  id: "getFPS()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "getFPS()"
  nameWithType: "Window.getFPS()"
  fullName: "graphics.Window.getFPS()"
  overload: "graphics.Window.getFPS*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public float getFPS()"
    return:
      type: "float"
- uid: "graphics.Window.getHeight()"
  id: "getHeight()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "getHeight()"
  nameWithType: "Window.getHeight()"
  fullName: "graphics.Window.getHeight()"
  overload: "graphics.Window.getHeight*"
  type: "Method"
  package: "graphics"
  summary: "Get the current window height."
  syntax:
    content: "public static int getHeight()"
    return:
      type: "int"
- uid: "graphics.Window.getSceneManager()"
  id: "getSceneManager()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "getSceneManager()"
  nameWithType: "Window.getSceneManager()"
  fullName: "graphics.Window.getSceneManager()"
  overload: "graphics.Window.getSceneManager*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public SceneManager getSceneManager()"
    return:
      type: "scene.SceneManager"
- uid: "graphics.Window.getTitle()"
  id: "getTitle()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "getTitle()"
  nameWithType: "Window.getTitle()"
  fullName: "graphics.Window.getTitle()"
  overload: "graphics.Window.getTitle*"
  type: "Method"
  package: "graphics"
  summary: "Gt the current window title."
  syntax:
    content: "public String getTitle()"
    return:
      type: "java.lang.String"
- uid: "graphics.Window.getWidth()"
  id: "getWidth()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "getWidth()"
  nameWithType: "Window.getWidth()"
  fullName: "graphics.Window.getWidth()"
  overload: "graphics.Window.getWidth*"
  type: "Method"
  package: "graphics"
  summary: "Get the current window width."
  syntax:
    content: "public static int getWidth()"
    return:
      type: "int"
- uid: "graphics.Window.glfwWindow()"
  id: "glfwWindow()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "glfwWindow()"
  nameWithType: "Window.glfwWindow()"
  fullName: "graphics.Window.glfwWindow()"
  overload: "graphics.Window.glfwWindow*"
  type: "Method"
  package: "graphics"
  summary: "Get the current glfw window (long)."
  syntax:
    content: "public static long glfwWindow()"
    return:
      type: "long"
- uid: "graphics.Window.instance"
  id: "instance"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "instance"
  nameWithType: "Window.instance"
  fullName: "graphics.Window.instance"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static Window instance"
    return:
      type: "graphics.Window"
- uid: "graphics.Window.setIcon(java.lang.String)"
  id: "setIcon(java.lang.String)"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "setIcon(String path)"
  nameWithType: "Window.setIcon(String path)"
  fullName: "graphics.Window.setIcon(String path)"
  overload: "graphics.Window.setIcon*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public void setIcon(String path)"
    parameters:
    - id: "path"
      type: "java.lang.String"
- uid: "graphics.Window.setTitle(java.lang.String)"
  id: "setTitle(java.lang.String)"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "setTitle(String title)"
  nameWithType: "Window.setTitle(String title)"
  fullName: "graphics.Window.setTitle(String title)"
  overload: "graphics.Window.setTitle*"
  type: "Method"
  package: "graphics"
  summary: "Set the current window title."
  syntax:
    content: "public void setTitle(String title)"
    parameters:
    - id: "title"
      type: "java.lang.String"
- uid: "graphics.Window.showWindow()"
  id: "showWindow()"
  parent: "graphics.Window"
  langs:
  - "java"
  name: "showWindow()"
  nameWithType: "Window.showWindow()"
  fullName: "graphics.Window.showWindow()"
  overload: "graphics.Window.showWindow*"
  type: "Method"
  package: "graphics"
  summary: "Main game loop: rendering, frametime calculation, event polling and cleanup."
  syntax:
    content: "public void showWindow()"
references:
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "graphics.Window.Window*"
  name: "Window"
  nameWithType: "Window.Window"
  fullName: "graphics.Window.Window"
  package: "graphics"
- uid: "graphics.Window.getFPS*"
  name: "getFPS"
  nameWithType: "Window.getFPS"
  fullName: "graphics.Window.getFPS"
  package: "graphics"
- uid: "graphics.Window.getTitle*"
  name: "getTitle"
  nameWithType: "Window.getTitle"
  fullName: "graphics.Window.getTitle"
  package: "graphics"
- uid: "graphics.Window.getHeight*"
  name: "getHeight"
  nameWithType: "Window.getHeight"
  fullName: "graphics.Window.getHeight"
  package: "graphics"
- uid: "graphics.Window.getWidth*"
  name: "getWidth"
  nameWithType: "Window.getWidth"
  fullName: "graphics.Window.getWidth"
  package: "graphics"
- uid: "long"
  spec.java:
  - uid: "long"
    name: "long"
    fullName: "long"
- uid: "graphics.Window.glfwWindow*"
  name: "glfwWindow"
  nameWithType: "Window.glfwWindow"
  fullName: "graphics.Window.glfwWindow"
  package: "graphics"
- uid: "graphics.Window.setTitle*"
  name: "setTitle"
  nameWithType: "Window.setTitle"
  fullName: "graphics.Window.setTitle"
  package: "graphics"
- uid: "graphics.Window.showWindow*"
  name: "showWindow"
  nameWithType: "Window.showWindow"
  fullName: "graphics.Window.showWindow"
  package: "graphics"
- uid: "scene.Scene"
  name: "Scene"
  nameWithType: "Scene"
  fullName: "scene.Scene"
- uid: "graphics.Window.currentScene*"
  name: "currentScene"
  nameWithType: "Window.currentScene"
  fullName: "graphics.Window.currentScene"
  package: "graphics"
- uid: "scene.SceneManager"
  name: "SceneManager"
  nameWithType: "SceneManager"
  fullName: "scene.SceneManager"
- uid: "graphics.Window.getSceneManager*"
  name: "getSceneManager"
  nameWithType: "Window.getSceneManager"
  fullName: "graphics.Window.getSceneManager"
  package: "graphics"
- uid: "graphics.Camera"
  name: "Camera"
  nameWithType: "Camera"
  fullName: "graphics.Camera"
- uid: "graphics.Window.getCamera*"
  name: "getCamera"
  nameWithType: "Window.getCamera"
  fullName: "graphics.Window.getCamera"
  package: "graphics"
- uid: "graphics.Window.setIcon*"
  name: "setIcon"
  nameWithType: "Window.setIcon"
  fullName: "graphics.Window.setIcon"
  package: "graphics"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
