### YamlMime:ManagedReference
items:
- uid: "physics.collision.Collider"
  id: "Collider"
  parent: "physics.collision"
  children:
  - "physics.collision.Collider.addTag(java.lang.String)"
  - "physics.collision.Collider.canCollideWith(physics.collision.Collider)"
  - "physics.collision.Collider.detectCollision(physics.collision.Collider)"
  - "physics.collision.Collider.getShape()"
  - "physics.collision.Collider.hasMask(int)"
  - "physics.collision.Collider.hasTags()"
  - "physics.collision.Collider.isOnLayer(int)"
  - "physics.collision.Collider.layers()"
  - "physics.collision.Collider.mask()"
  - "physics.collision.Collider.matchTags(physics.collision.Collider)"
  - "physics.collision.Collider.passive()"
  - "physics.collision.Collider.removeTag(java.lang.String)"
  - "physics.collision.Collider.setLayer(int,boolean)"
  - "physics.collision.Collider.setMask(int,boolean)"
  - "physics.collision.Collider.tags()"
  langs:
  - "java"
  name: "Collider"
  nameWithType: "Collider"
  fullName: "physics.collision.Collider"
  type: "Interface"
  package: "physics.collision"
  summary: "Describes an object that can collide with others."
  syntax:
    content: "public interface Collider"
- uid: "physics.collision.Collider.addTag(java.lang.String)"
  id: "addTag(java.lang.String)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "addTag(String tag)"
  nameWithType: "Collider.addTag(String tag)"
  fullName: "physics.collision.Collider.addTag(String tag)"
  overload: "physics.collision.Collider.addTag*"
  type: "Method"
  package: "physics.collision"
  summary: "Adds a tag to this collider, making it a tagged collider if it isnt already one."
  syntax:
    content: "public abstract void addTag(String tag)"
    parameters:
    - id: "tag"
      type: "java.lang.String"
      description: "the new case-sensitive tag to add"
- uid: "physics.collision.Collider.canCollideWith(physics.collision.Collider)"
  id: "canCollideWith(physics.collision.Collider)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "canCollideWith(Collider collider)"
  nameWithType: "Collider.canCollideWith(Collider collider)"
  fullName: "physics.collision.Collider.canCollideWith(Collider collider)"
  overload: "physics.collision.Collider.canCollideWith*"
  type: "Method"
  package: "physics.collision"
  summary: "Determines whether a collider could potentially intersect with another collider ONLY by their collision layers. This method can be considered part of the broad phase of collision detection."
  syntax:
    content: "public abstract boolean canCollideWith(Collider collider)"
    parameters:
    - id: "collider"
      type: "physics.collision.Collider"
      description: "the other collider"
    return:
      type: "boolean"
      description: "true if and only if both objects could potentially collide"
- uid: "physics.collision.Collider.detectCollision(physics.collision.Collider)"
  id: "detectCollision(physics.collision.Collider)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "detectCollision(Collider collider)"
  nameWithType: "Collider.detectCollision(Collider collider)"
  fullName: "physics.collision.Collider.detectCollision(Collider collider)"
  overload: "physics.collision.Collider.detectCollision*"
  type: "Method"
  package: "physics.collision"
  summary: "Determines whether a collider intersects with another collider IGNORING the collision layers."
  syntax:
    content: "public abstract CollisionInformation detectCollision(Collider collider)"
    parameters:
    - id: "collider"
      type: "physics.collision.Collider"
      description: "the other collider"
    return:
      type: "physics.collision.CollisionInformation"
      description: "an object containing the result of collision detection"
- uid: "physics.collision.Collider.getShape()"
  id: "getShape()"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "getShape()"
  nameWithType: "Collider.getShape()"
  fullName: "physics.collision.Collider.getShape()"
  overload: "physics.collision.Collider.getShape*"
  type: "Method"
  package: "physics.collision"
  summary: "The shape of the collider."
  syntax:
    content: "public abstract PrimitiveShape getShape()"
    return:
      type: "physics.collision.shape.PrimitiveShape"
      description: "the shape of the collider"
- uid: "physics.collision.Collider.hasMask(int)"
  id: "hasMask(int)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "hasMask(int layer)"
  nameWithType: "Collider.hasMask(int layer)"
  fullName: "physics.collision.Collider.hasMask(int layer)"
  overload: "physics.collision.Collider.hasMask*"
  type: "Method"
  package: "physics.collision"
  summary: "Determines whether a collision mask for a specified layer is enabled."
  syntax:
    content: "public abstract boolean hasMask(int layer)"
    parameters:
    - id: "layer"
      type: "int"
      description: "the layer from 0 to TOTAL_LAYER-1, the behaviour for layers outside the range is undefined"
    return:
      type: "boolean"
      description: "true if and only if the mask for the specified layer is enabled"
- uid: "physics.collision.Collider.hasTags()"
  id: "hasTags()"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "hasTags()"
  nameWithType: "Collider.hasTags()"
  fullName: "physics.collision.Collider.hasTags()"
  overload: "physics.collision.Collider.hasTags*"
  type: "Method"
  package: "physics.collision"
  summary: "Defines whether a collider is a tagged or an untagged collider."
  syntax:
    content: "public abstract boolean hasTags()"
    return:
      type: "boolean"
      description: "true, if and only if that collider contains at least a one tag"
- uid: "physics.collision.Collider.isOnLayer(int)"
  id: "isOnLayer(int)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "isOnLayer(int layer)"
  nameWithType: "Collider.isOnLayer(int layer)"
  fullName: "physics.collision.Collider.isOnLayer(int layer)"
  overload: "physics.collision.Collider.isOnLayer*"
  type: "Method"
  package: "physics.collision"
  summary: "Determines whether the collider exists in a specified layer."
  syntax:
    content: "public abstract boolean isOnLayer(int layer)"
    parameters:
    - id: "layer"
      type: "int"
      description: "the layer from 0 to TOTAL_LAYER-1, the behaviour for layers outside the range is undefined"
    return:
      type: "boolean"
      description: "true if and only if the collider exists in the specified layer"
- uid: "physics.collision.Collider.layers()"
  id: "layers()"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "layers()"
  nameWithType: "Collider.layers()"
  fullName: "physics.collision.Collider.layers()"
  overload: "physics.collision.Collider.layers*"
  type: "Method"
  package: "physics.collision"
  summary: "A short containing all enabled layers encoded as bit mask. Should be usable to compare different masks with each other to check for intersection."
  syntax:
    content: "public abstract short layers()"
    return:
      type: "short"
      description: "a short with all layer encoded"
- uid: "physics.collision.Collider.mask()"
  id: "mask()"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "mask()"
  nameWithType: "Collider.mask()"
  fullName: "physics.collision.Collider.mask()"
  overload: "physics.collision.Collider.mask*"
  type: "Method"
  package: "physics.collision"
  summary: "A short containing all enabled masks encoded as bit mask. Should be usable to compare different masks with each other to check for intersection."
  syntax:
    content: "public abstract short mask()"
    return:
      type: "short"
      description: "a short with all masks encoded"
- uid: "physics.collision.Collider.matchTags(physics.collision.Collider)"
  id: "matchTags(physics.collision.Collider)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "matchTags(Collider collider)"
  nameWithType: "Collider.matchTags(Collider collider)"
  fullName: "physics.collision.Collider.matchTags(Collider collider)"
  overload: "physics.collision.Collider.matchTags*"
  type: "Method"
  package: "physics.collision"
  summary: "Checks for matching tags with another collider. There are 3 different rules for tag matching:\n\\- a collider without tags can only collide with a collider without tags (ignoring tags and only using layers)\n\\- a collider without tags can never collide with a tagged collider\n\\- a tagged collider can only collide with another tagged object, if there is any intersection comparing both sets of tags\n"
  syntax:
    content: "public abstract boolean matchTags(Collider collider)"
    parameters:
    - id: "collider"
      type: "physics.collision.Collider"
      description: "another collider"
    return:
      type: "boolean"
      description: "true, if the colliders are allowed to collide"
- uid: "physics.collision.Collider.passive()"
  id: "passive()"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "passive()"
  nameWithType: "Collider.passive()"
  fullName: "physics.collision.Collider.passive()"
  overload: "physics.collision.Collider.passive*"
  type: "Method"
  package: "physics.collision"
  summary: "Defines the behaviour of this collider. A passive collider will never get checked against others colliders, however any collider might get checked against it."
  syntax:
    content: "public abstract boolean passive()"
    return:
      type: "boolean"
      description: "whether this collider is passive"
- uid: "physics.collision.Collider.removeTag(java.lang.String)"
  id: "removeTag(java.lang.String)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "removeTag(String tag)"
  nameWithType: "Collider.removeTag(String tag)"
  fullName: "physics.collision.Collider.removeTag(String tag)"
  overload: "physics.collision.Collider.removeTag*"
  type: "Method"
  package: "physics.collision"
  summary: "Removes a tag to this collider. If the last tag got removed, this collider becomes an untagged collider."
  syntax:
    content: "public abstract void removeTag(String tag)"
    parameters:
    - id: "tag"
      type: "java.lang.String"
      description: "the case-sensitive tag to remove"
- uid: "physics.collision.Collider.setLayer(int,boolean)"
  id: "setLayer(int,boolean)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "setLayer(int layer, boolean active)"
  nameWithType: "Collider.setLayer(int layer, boolean active)"
  fullName: "physics.collision.Collider.setLayer(int layer, boolean active)"
  overload: "physics.collision.Collider.setLayer*"
  type: "Method"
  package: "physics.collision"
  summary: "Change the colliders presence in a specified layer. Making a collider present in a specified layer will it enable to collide with all collider including the specified layer in their collision mask."
  syntax:
    content: "public abstract void setLayer(int layer, boolean active)"
    parameters:
    - id: "layer"
      type: "int"
      description: "the layer from 0 to TOTAL_LAYER-1, the behaviour for layers outside the range is undefined"
    - id: "active"
      type: "boolean"
      description: "whether the collider should be present (true) or not (false)"
- uid: "physics.collision.Collider.setMask(int,boolean)"
  id: "setMask(int,boolean)"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "setMask(int layer, boolean active)"
  nameWithType: "Collider.setMask(int layer, boolean active)"
  fullName: "physics.collision.Collider.setMask(int layer, boolean active)"
  overload: "physics.collision.Collider.setMask*"
  type: "Method"
  package: "physics.collision"
  summary: "Changes the collision mask entry for a specified layer. Enabling the mask for layer n will allow this collider to collide with any other collider set in the target layer n vise versa."
  syntax:
    content: "public abstract void setMask(int layer, boolean active)"
    parameters:
    - id: "layer"
      type: "int"
      description: "the layer from 0 to TOTAL_LAYER-1, the behaviour for layers outside the range is undefined"
    - id: "active"
      type: "boolean"
      description: "whether the mask should enabled (true) or disabled (false)"
- uid: "physics.collision.Collider.tags()"
  id: "tags()"
  parent: "physics.collision.Collider"
  langs:
  - "java"
  name: "tags()"
  nameWithType: "Collider.tags()"
  fullName: "physics.collision.Collider.tags()"
  overload: "physics.collision.Collider.tags*"
  type: "Method"
  package: "physics.collision"
  summary: "All tags assigned to this collider."
  syntax:
    content: "public abstract Set<String> tags()"
    return:
      type: "java.util.Set<java.lang.String>"
      description: "an unmodifiable set of all tags assigned to this collider"
references:
- uid: "physics.collision.shape.PrimitiveShape"
  name: "PrimitiveShape"
  nameWithType: "PrimitiveShape"
  fullName: "physics.collision.shape.PrimitiveShape"
- uid: "physics.collision.Collider.getShape*"
  name: "getShape"
  nameWithType: "Collider.getShape"
  fullName: "physics.collision.Collider.getShape"
  package: "physics.collision"
- uid: "physics.collision.CollisionInformation"
  name: "CollisionInformation"
  nameWithType: "CollisionInformation"
  fullName: "physics.collision.CollisionInformation"
- uid: "physics.collision.Collider.detectCollision*"
  name: "detectCollision"
  nameWithType: "Collider.detectCollision"
  fullName: "physics.collision.Collider.detectCollision"
  package: "physics.collision"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "physics.collision.Collider.canCollideWith*"
  name: "canCollideWith"
  nameWithType: "Collider.canCollideWith"
  fullName: "physics.collision.Collider.canCollideWith"
  package: "physics.collision"
- uid: "short"
  spec.java:
  - uid: "short"
    name: "short"
    fullName: "short"
- uid: "physics.collision.Collider.layers*"
  name: "layers"
  nameWithType: "Collider.layers"
  fullName: "physics.collision.Collider.layers"
  package: "physics.collision"
- uid: "physics.collision.Collider.mask*"
  name: "mask"
  nameWithType: "Collider.mask"
  fullName: "physics.collision.Collider.mask"
  package: "physics.collision"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "physics.collision.Collider.hasMask*"
  name: "hasMask"
  nameWithType: "Collider.hasMask"
  fullName: "physics.collision.Collider.hasMask"
  package: "physics.collision"
- uid: "physics.collision.Collider.isOnLayer*"
  name: "isOnLayer"
  nameWithType: "Collider.isOnLayer"
  fullName: "physics.collision.Collider.isOnLayer"
  package: "physics.collision"
- uid: "physics.collision.Collider.setLayer*"
  name: "setLayer"
  nameWithType: "Collider.setLayer"
  fullName: "physics.collision.Collider.setLayer"
  package: "physics.collision"
- uid: "physics.collision.Collider.setMask*"
  name: "setMask"
  nameWithType: "Collider.setMask"
  fullName: "physics.collision.Collider.setMask"
  package: "physics.collision"
- uid: "physics.collision.Collider.passive*"
  name: "passive"
  nameWithType: "Collider.passive"
  fullName: "physics.collision.Collider.passive"
  package: "physics.collision"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "physics.collision.Collider.addTag*"
  name: "addTag"
  nameWithType: "Collider.addTag"
  fullName: "physics.collision.Collider.addTag"
  package: "physics.collision"
- uid: "physics.collision.Collider.removeTag*"
  name: "removeTag"
  nameWithType: "Collider.removeTag"
  fullName: "physics.collision.Collider.removeTag"
  package: "physics.collision"
- uid: "java.util.Set<java.lang.String>"
  spec.java:
  - uid: "java.util.Set"
    name: "Set"
    fullName: "java.util.Set"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "physics.collision.Collider.tags*"
  name: "tags"
  nameWithType: "Collider.tags"
  fullName: "physics.collision.Collider.tags"
  package: "physics.collision"
- uid: "physics.collision.Collider.hasTags*"
  name: "hasTags"
  nameWithType: "Collider.hasTags"
  fullName: "physics.collision.Collider.hasTags"
  package: "physics.collision"
- uid: "physics.collision.Collider.matchTags*"
  name: "matchTags"
  nameWithType: "Collider.matchTags"
  fullName: "physics.collision.Collider.matchTags"
  package: "physics.collision"
- uid: "java.util.Set"
  name: "Set"
  nameWithType: "Set"
  fullName: "java.util.Set"
