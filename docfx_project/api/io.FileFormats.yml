### YamlMime:ManagedReference
items:
- uid: "io.FileFormats"
  id: "FileFormats"
  parent: "io"
  children:
  - "io.FileFormats.FileFormats()"
  - "io.FileFormats.XML"
  langs:
  - "java"
  name: "FileFormats"
  nameWithType: "FileFormats"
  fullName: "io.FileFormats"
  type: "Class"
  package: "io"
  syntax:
    content: "public class FileFormats"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "io.FileFormats.FileFormats()"
  id: "FileFormats()"
  parent: "io.FileFormats"
  langs:
  - "java"
  name: "FileFormats()"
  nameWithType: "FileFormats.FileFormats()"
  fullName: "io.FileFormats.FileFormats()"
  overload: "io.FileFormats.FileFormats*"
  type: "Constructor"
  package: "io"
  syntax:
    content: "public FileFormats()"
- uid: "io.FileFormats.XML"
  id: "XML"
  parent: "io.FileFormats"
  langs:
  - "java"
  name: "XML"
  nameWithType: "FileFormats.XML"
  fullName: "io.FileFormats.XML"
  type: "Field"
  package: "io"
  summary: "Simple XML format, based on <xref uid=\"io.xml.XMLParser\" data-throw-if-not-resolved=\"false\">XMLParser</xref> and <xref uid=\"io.xml.XMLTokenizer\" data-throw-if-not-resolved=\"false\">XMLTokenizer</xref>."
  syntax:
    content: "public static final FileFormat<XMLElement> XML"
    return:
      type: "io.FileFormat<io.xml.XMLElement>"
references:
- uid: "io.FileFormats.FileFormats*"
  name: "FileFormats"
  nameWithType: "FileFormats.FileFormats"
  fullName: "io.FileFormats.FileFormats"
  package: "io"
- uid: "io.FileFormat<io.xml.XMLElement>"
  spec.java:
  - uid: "io.FileFormat"
    name: "FileFormat"
    fullName: "io.FileFormat"
  - name: "<"
    fullName: "<"
  - uid: "io.xml.XMLElement"
    name: "XMLElement"
    fullName: "io.xml.XMLElement"
  - name: ">"
    fullName: ">"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "io.FileFormat"
  name: "FileFormat"
  nameWithType: "FileFormat"
  fullName: "io.FileFormat"
- uid: "io.xml.XMLElement"
  name: "XMLElement"
  nameWithType: "XMLElement"
  fullName: "io.xml.XMLElement"
