### YamlMime:ManagedReference
items:
- uid: "ui.Text"
  id: "Text"
  parent: "ui"
  children:
  - "ui.Text.Text(java.lang.String,float,float)"
  - "ui.Text.Text(java.lang.String,graphics.Color,float,float)"
  - "ui.Text.Text(java.lang.String,ui.fonts.Font,graphics.Color,float,float)"
  - "ui.Text.Text(java.lang.String,ui.fonts.Font,graphics.Color,float,float,int,boolean,boolean)"
  - "ui.Text.addX(float)"
  - "ui.Text.addY(float)"
  - "ui.Text.change(java.lang.String)"
  - "ui.Text.getGlyphRenderers()"
  - "ui.Text.getHeight()"
  - "ui.Text.getLongestLineWidth()"
  - "ui.Text.getText()"
  - "ui.Text.getX()"
  - "ui.Text.getY()"
  - "ui.Text.isCentered()"
  - "ui.Text.rainbowify()"
  - "ui.Text.setCentered(boolean)"
  - "ui.Text.setColor(graphics.Color)"
  - "ui.Text.setPosition(float,float)"
  - "ui.Text.setPosition(org.joml.Vector2f)"
  - "ui.Text.setX(float)"
  - "ui.Text.setY(float)"
  - "ui.Text.update()"
  - "ui.Text.zIndex()"
  langs:
  - "java"
  name: "Text"
  nameWithType: "Text"
  fullName: "ui.Text"
  type: "Class"
  package: "ui"
  summary: "Represents a renderable string containing a TTF font reference, color data, and font size. It is used to create text elements that can be displayed as part of a scene or UI in a game or application. The Text class allows you to specify the text string, font, color, and position of the text on the screen. It supports various font formats, such as TrueType fonts (TTF), and provides options for text alignment. The Text class also provides methods for changing the text string dynamically during runtime, allowing you to update the displayed text based on the game's logic or user input. Additionally, it supports effects such as rainbow text: text.rainbowify(); // Need I say more?\n\n```java\nimport ui.Text;\n import ui.fonts.Font;\n \n public class Main extends Scene {\n     // ...\n\n     Font font;\n     Text text;\n \n     public void awake() {\n         // ...\n         font = new Font(\"src/assets/fonts/OpenSans-Regular.ttf\", 24, true);\n         text = new Text(\"Hello, World!\", font, Color.BLACK, 100, 100);\n     }\n \n     // ...\n }\n```"
  syntax:
    content: "public class Text"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ui.Text.Text(java.lang.String,float,float)"
  id: "Text(java.lang.String,float,float)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "Text(String string, float x, float y)"
  nameWithType: "Text.Text(String string, float x, float y)"
  fullName: "ui.Text.Text(String string, float x, float y)"
  overload: "ui.Text.Text*"
  type: "Constructor"
  package: "ui"
  syntax:
    content: "public Text(String string, float x, float y)"
    parameters:
    - id: "string"
      type: "java.lang.String"
      description: "the text to be rendered."
    - id: "x"
      type: "float"
      description: "the X position of the Text object."
    - id: "y"
      type: "float"
      description: "the Y position of the Text object."
- uid: "ui.Text.Text(java.lang.String,graphics.Color,float,float)"
  id: "Text(java.lang.String,graphics.Color,float,float)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "Text(String string, Color color, float x, float y)"
  nameWithType: "Text.Text(String string, Color color, float x, float y)"
  fullName: "ui.Text.Text(String string, Color color, float x, float y)"
  overload: "ui.Text.Text*"
  type: "Constructor"
  package: "ui"
  syntax:
    content: "public Text(String string, Color color, float x, float y)"
    parameters:
    - id: "string"
      type: "java.lang.String"
      description: "the text to be rendered."
    - id: "color"
      type: "graphics.Color"
      description: "the <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">graphics.Color</xref> object that contains your prefered\n               RGBA color."
    - id: "x"
      type: "float"
      description: "the X position of the Text object."
    - id: "y"
      type: "float"
      description: "the Y position of the Text object."
- uid: "ui.Text.Text(java.lang.String,ui.fonts.Font,graphics.Color,float,float)"
  id: "Text(java.lang.String,ui.fonts.Font,graphics.Color,float,float)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "Text(String string, Font font, Color color, float x, float y)"
  nameWithType: "Text.Text(String string, Font font, Color color, float x, float y)"
  fullName: "ui.Text.Text(String string, Font font, Color color, float x, float y)"
  overload: "ui.Text.Text*"
  type: "Constructor"
  package: "ui"
  syntax:
    content: "public Text(String string, Font font, Color color, float x, float y)"
    parameters:
    - id: "string"
      type: "java.lang.String"
      description: "the text to be rendered."
    - id: "font"
      type: "ui.fonts.Font"
      description: "the <xref uid=\"ui.fonts.Font\" data-throw-if-not-resolved=\"false\">ui.fonts.Font</xref> object that contains your preferred\n               .ttf font file."
    - id: "color"
      type: "graphics.Color"
      description: "the <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">graphics.Color</xref> object that contains your prefered\n               RGBA color."
    - id: "x"
      type: "float"
      description: "the X position of the Text object."
    - id: "y"
      type: "float"
      description: "the Y position of the Text object."
- uid: "ui.Text.Text(java.lang.String,ui.fonts.Font,graphics.Color,float,float,int,boolean,boolean)"
  id: "Text(java.lang.String,ui.fonts.Font,graphics.Color,float,float,int,boolean,boolean)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "Text(String string, Font font, Color color, float x, float y, int zIndex, boolean isSticky, boolean isCentered)"
  nameWithType: "Text.Text(String string, Font font, Color color, float x, float y, int zIndex, boolean isSticky, boolean isCentered)"
  fullName: "ui.Text.Text(String string, Font font, Color color, float x, float y, int zIndex, boolean isSticky, boolean isCentered)"
  overload: "ui.Text.Text*"
  type: "Constructor"
  package: "ui"
  syntax:
    content: "public Text(String string, Font font, Color color, float x, float y, int zIndex, boolean isSticky, boolean isCentered)"
    parameters:
    - id: "string"
      type: "java.lang.String"
      description: "the text to be rendered."
    - id: "font"
      type: "ui.fonts.Font"
      description: "the <xref uid=\"ui.fonts.Font\" data-throw-if-not-resolved=\"false\">ui.fonts.Font</xref> object that contains your\n                   preferred .ttf font file."
    - id: "color"
      type: "graphics.Color"
      description: "the <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">graphics.Color</xref> object that contains your\n                   prefered RGBA color."
    - id: "x"
      type: "float"
      description: "the X position of the Text object."
    - id: "y"
      type: "float"
      description: "the Y position of the Text object."
    - id: "zIndex"
      type: "int"
      description: "the Z-Index of the Text Object (currently can only be set\n                   on creation, this will change in the future)."
    - id: "isSticky"
      type: "boolean"
      description: "boolean determining whether the text sticks in one position\n                   regardless of the camera position (isSticky = true) or if\n                   it will move in world space."
    - id: "isCentered"
      type: "boolean"
      description: "boolean determining whether the text is left aligned or\n                   center aligned. This can be changed after creation using\n                   .setCentered()."
- uid: "ui.Text.addX(float)"
  id: "addX(float)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "addX(float x)"
  nameWithType: "Text.addX(float x)"
  fullName: "ui.Text.addX(float x)"
  overload: "ui.Text.addX*"
  type: "Method"
  package: "ui"
  summary: "Add to the existing X position incrementally each time this method is called."
  syntax:
    content: "public void addX(float x)"
    parameters:
    - id: "x"
      type: "float"
      description: "amount to increment X position by."
- uid: "ui.Text.addY(float)"
  id: "addY(float)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "addY(float y)"
  nameWithType: "Text.addY(float y)"
  fullName: "ui.Text.addY(float y)"
  overload: "ui.Text.addY*"
  type: "Method"
  package: "ui"
  summary: "Add to the existing Y position incrementally each time this method is called."
  syntax:
    content: "public void addY(float y)"
    parameters:
    - id: "y"
      type: "float"
      description: "amount to increment Y position by."
- uid: "ui.Text.change(java.lang.String)"
  id: "change(java.lang.String)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "change(String string)"
  nameWithType: "Text.change(String string)"
  fullName: "ui.Text.change(String string)"
  overload: "ui.Text.change*"
  type: "Method"
  package: "ui"
  summary: "This method is called when the user wants to modify the string in the Text object. This can be called anytime after object creation."
  syntax:
    content: "public void change(String string)"
    parameters:
    - id: "string"
      type: "java.lang.String"
      description: "the text to change the current string to."
- uid: "ui.Text.getGlyphRenderers()"
  id: "getGlyphRenderers()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "getGlyphRenderers()"
  nameWithType: "Text.getGlyphRenderers()"
  fullName: "ui.Text.getGlyphRenderers()"
  overload: "ui.Text.getGlyphRenderers*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public ArrayList<GlyphRenderer> getGlyphRenderers()"
    return:
      type: "java.util.ArrayList<ui.fonts.GlyphRenderer>"
- uid: "ui.Text.getHeight()"
  id: "getHeight()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "getHeight()"
  nameWithType: "Text.getHeight()"
  fullName: "ui.Text.getHeight()"
  overload: "ui.Text.getHeight*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public float getHeight()"
    return:
      type: "float"
- uid: "ui.Text.getLongestLineWidth()"
  id: "getLongestLineWidth()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "getLongestLineWidth()"
  nameWithType: "Text.getLongestLineWidth()"
  fullName: "ui.Text.getLongestLineWidth()"
  overload: "ui.Text.getLongestLineWidth*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public float getLongestLineWidth()"
    return:
      type: "float"
- uid: "ui.Text.getText()"
  id: "getText()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "getText()"
  nameWithType: "Text.getText()"
  fullName: "ui.Text.getText()"
  overload: "ui.Text.getText*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public String getText()"
    return:
      type: "java.lang.String"
- uid: "ui.Text.getX()"
  id: "getX()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "getX()"
  nameWithType: "Text.getX()"
  fullName: "ui.Text.getX()"
  overload: "ui.Text.getX*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public float getX()"
    return:
      type: "float"
- uid: "ui.Text.getY()"
  id: "getY()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "getY()"
  nameWithType: "Text.getY()"
  fullName: "ui.Text.getY()"
  overload: "ui.Text.getY*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public float getY()"
    return:
      type: "float"
- uid: "ui.Text.isCentered()"
  id: "isCentered()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "isCentered()"
  nameWithType: "Text.isCentered()"
  fullName: "ui.Text.isCentered()"
  overload: "ui.Text.isCentered*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public boolean isCentered()"
    return:
      type: "boolean"
      description: "boolean value of isCentered."
- uid: "ui.Text.rainbowify()"
  id: "rainbowify()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "rainbowify()"
  nameWithType: "Text.rainbowify()"
  fullName: "ui.Text.rainbowify()"
  overload: "ui.Text.rainbowify*"
  type: "Method"
  package: "ui"
  summary: "Applies a rainbow effect to the Text, gradually changing the color of each Glyph in a rainbow."
  syntax:
    content: "public void rainbowify()"
- uid: "ui.Text.setCentered(boolean)"
  id: "setCentered(boolean)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "setCentered(boolean centered)"
  nameWithType: "Text.setCentered(boolean centered)"
  fullName: "ui.Text.setCentered(boolean centered)"
  overload: "ui.Text.setCentered*"
  type: "Method"
  package: "ui"
  summary: "Allows the user to change the text alignment after creation."
  syntax:
    content: "public void setCentered(boolean centered)"
    parameters:
    - id: "centered"
      type: "boolean"
      description: "boolean isCentered."
- uid: "ui.Text.setColor(graphics.Color)"
  id: "setColor(graphics.Color)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "setColor(Color color)"
  nameWithType: "Text.setColor(Color color)"
  fullName: "ui.Text.setColor(Color color)"
  overload: "ui.Text.setColor*"
  type: "Method"
  package: "ui"
  summary: "Set the color of the entire Text object."
  syntax:
    content: "public void setColor(Color color)"
    parameters:
    - id: "color"
      type: "graphics.Color"
      description: "RGBA Color object."
- uid: "ui.Text.setPosition(float,float)"
  id: "setPosition(float,float)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "setPosition(float x, float y)"
  nameWithType: "Text.setPosition(float x, float y)"
  fullName: "ui.Text.setPosition(float x, float y)"
  overload: "ui.Text.setPosition*"
  type: "Method"
  package: "ui"
  summary: "Allows the user to change the position of the Text object."
  syntax:
    content: "public void setPosition(float x, float y)"
    parameters:
    - id: "x"
      type: "float"
      description: "x position"
    - id: "y"
      type: "float"
      description: "y position"
- uid: "ui.Text.setPosition(org.joml.Vector2f)"
  id: "setPosition(org.joml.Vector2f)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "setPosition(Vector2f position)"
  nameWithType: "Text.setPosition(Vector2f position)"
  fullName: "ui.Text.setPosition(Vector2f position)"
  overload: "ui.Text.setPosition*"
  type: "Method"
  package: "ui"
  summary: "Allows the user to change the position of the Text object."
  syntax:
    content: "public void setPosition(Vector2f position)"
    parameters:
    - id: "position"
      type: "org.joml.Vector2f"
      description: "Vector2f containing new position data."
- uid: "ui.Text.setX(float)"
  id: "setX(float)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "setX(float x)"
  nameWithType: "Text.setX(float x)"
  fullName: "ui.Text.setX(float x)"
  overload: "ui.Text.setX*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public void setX(float x)"
    parameters:
    - id: "x"
      type: "float"
- uid: "ui.Text.setY(float)"
  id: "setY(float)"
  parent: "ui.Text"
  langs:
  - "java"
  name: "setY(float y)"
  nameWithType: "Text.setY(float y)"
  fullName: "ui.Text.setY(float y)"
  overload: "ui.Text.setY*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public void setY(float y)"
    parameters:
    - id: "y"
      type: "float"
- uid: "ui.Text.update()"
  id: "update()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "update()"
  nameWithType: "Text.update()"
  fullName: "ui.Text.update()"
  overload: "ui.Text.update*"
  type: "Method"
  package: "ui"
  summary: "Update method called for every text object by the scene.Scene.updateUI() method. This should not be called by general users."
  syntax:
    content: "public void update()"
- uid: "ui.Text.zIndex()"
  id: "zIndex()"
  parent: "ui.Text"
  langs:
  - "java"
  name: "zIndex()"
  nameWithType: "Text.zIndex()"
  fullName: "ui.Text.zIndex()"
  overload: "ui.Text.zIndex*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public int zIndex()"
    return:
      type: "int"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "ui.fonts.Font"
  name: "Font"
  nameWithType: "Font"
  fullName: "ui.fonts.Font"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "ui.Text.Text*"
  name: "Text"
  nameWithType: "Text.Text"
  fullName: "ui.Text.Text"
  package: "ui"
- uid: "ui.Text.update*"
  name: "update"
  nameWithType: "Text.update"
  fullName: "ui.Text.update"
  package: "ui"
- uid: "ui.Text.change*"
  name: "change"
  nameWithType: "Text.change"
  fullName: "ui.Text.change"
  package: "ui"
- uid: "ui.Text.getText*"
  name: "getText"
  nameWithType: "Text.getText"
  fullName: "ui.Text.getText"
  package: "ui"
- uid: "java.util.ArrayList<ui.fonts.GlyphRenderer>"
  spec.java:
  - uid: "java.util.ArrayList"
    name: "ArrayList"
    fullName: "java.util.ArrayList"
  - name: "<"
    fullName: "<"
  - uid: "ui.fonts.GlyphRenderer"
    name: "GlyphRenderer"
    fullName: "ui.fonts.GlyphRenderer"
  - name: ">"
    fullName: ">"
- uid: "ui.Text.getGlyphRenderers*"
  name: "getGlyphRenderers"
  nameWithType: "Text.getGlyphRenderers"
  fullName: "ui.Text.getGlyphRenderers"
  package: "ui"
- uid: "ui.Text.setColor*"
  name: "setColor"
  nameWithType: "Text.setColor"
  fullName: "ui.Text.setColor"
  package: "ui"
- uid: "ui.Text.rainbowify*"
  name: "rainbowify"
  nameWithType: "Text.rainbowify"
  fullName: "ui.Text.rainbowify"
  package: "ui"
- uid: "ui.Text.isCentered*"
  name: "isCentered"
  nameWithType: "Text.isCentered"
  fullName: "ui.Text.isCentered"
  package: "ui"
- uid: "ui.Text.setCentered*"
  name: "setCentered"
  nameWithType: "Text.setCentered"
  fullName: "ui.Text.setCentered"
  package: "ui"
- uid: "ui.Text.zIndex*"
  name: "zIndex"
  nameWithType: "Text.zIndex"
  fullName: "ui.Text.zIndex"
  package: "ui"
- uid: "ui.Text.getX*"
  name: "getX"
  nameWithType: "Text.getX"
  fullName: "ui.Text.getX"
  package: "ui"
- uid: "ui.Text.getY*"
  name: "getY"
  nameWithType: "Text.getY"
  fullName: "ui.Text.getY"
  package: "ui"
- uid: "ui.Text.getHeight*"
  name: "getHeight"
  nameWithType: "Text.getHeight"
  fullName: "ui.Text.getHeight"
  package: "ui"
- uid: "ui.Text.getLongestLineWidth*"
  name: "getLongestLineWidth"
  nameWithType: "Text.getLongestLineWidth"
  fullName: "ui.Text.getLongestLineWidth"
  package: "ui"
- uid: "ui.Text.setX*"
  name: "setX"
  nameWithType: "Text.setX"
  fullName: "ui.Text.setX"
  package: "ui"
- uid: "ui.Text.setY*"
  name: "setY"
  nameWithType: "Text.setY"
  fullName: "ui.Text.setY"
  package: "ui"
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "ui.Text.setPosition*"
  name: "setPosition"
  nameWithType: "Text.setPosition"
  fullName: "ui.Text.setPosition"
  package: "ui"
- uid: "ui.Text.addY*"
  name: "addY"
  nameWithType: "Text.addY"
  fullName: "ui.Text.addY"
  package: "ui"
- uid: "ui.Text.addX*"
  name: "addX"
  nameWithType: "Text.addX"
  fullName: "ui.Text.addX"
  package: "ui"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ui.fonts.GlyphRenderer"
  name: "GlyphRenderer"
  nameWithType: "GlyphRenderer"
  fullName: "ui.fonts.GlyphRenderer"
- uid: "java.util.ArrayList"
  name: "ArrayList"
  nameWithType: "ArrayList"
  fullName: "java.util.ArrayList"
