### YamlMime:ManagedReference
items:
- uid: "physics.collision.Shapes"
  id: "Shapes"
  parent: "physics.collision"
  children:
  - "physics.collision.Shapes.Shapes()"
  - "physics.collision.Shapes.axisAlignedRectangle(float,float,float,float)"
  - "physics.collision.Shapes.axisAlignedRectangle(org.joml.Vector2f,org.joml.Vector2f)"
  - "physics.collision.Shapes.circle(float,float,float)"
  - "physics.collision.Shapes.circle(org.joml.Vector2f,float)"
  - "physics.collision.Shapes.circle(org.joml.Vector2f,org.joml.Vector2f,float)"
  - "physics.collision.Shapes.convexPolygon(float...)"
  - "physics.collision.Shapes.quadrilateral(org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f)"
  - "physics.collision.Shapes.triangle(float,float,float,float,float,float)"
  - "physics.collision.Shapes.triangle(org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f)"
  langs:
  - "java"
  name: "Shapes"
  nameWithType: "Shapes"
  fullName: "physics.collision.Shapes"
  type: "Class"
  package: "physics.collision"
  summary: "Util methods to create <xref uid=\"physics.collision.shape.PrimitiveShape\" data-throw-if-not-resolved=\"false\">physics.collision.shape.PrimitiveShape</xref> on the fly."
  syntax:
    content: "public class Shapes"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "physics.collision.Shapes.Shapes()"
  id: "Shapes()"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "Shapes()"
  nameWithType: "Shapes.Shapes()"
  fullName: "physics.collision.Shapes.Shapes()"
  overload: "physics.collision.Shapes.Shapes*"
  type: "Constructor"
  package: "physics.collision"
  syntax:
    content: "public Shapes()"
- uid: "physics.collision.Shapes.axisAlignedRectangle(float,float,float,float)"
  id: "axisAlignedRectangle(float,float,float,float)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "axisAlignedRectangle(float ax, float ay, float bx, float by)"
  nameWithType: "Shapes.axisAlignedRectangle(float ax, float ay, float bx, float by)"
  fullName: "physics.collision.Shapes.axisAlignedRectangle(float ax, float ay, float bx, float by)"
  overload: "physics.collision.Shapes.axisAlignedRectangle*"
  type: "Method"
  package: "physics.collision"
  summary: "Create an axis aligned rectangle. This will find min corner and max corner and generate both missing points through basic geometry"
  syntax:
    content: "public static Quadrilateral axisAlignedRectangle(float ax, float ay, float bx, float by)"
    parameters:
    - id: "ax"
      type: "float"
      description: "relative coordinate Ax"
    - id: "ay"
      type: "float"
      description: "relative coordinate Ay"
    - id: "bx"
      type: "float"
      description: "relative coordinate Bx"
    - id: "by"
      type: "float"
      description: "relative coordinate By"
    return:
      type: "physics.collision.shape.Quadrilateral"
      description: "an axis aligned rectangle"
- uid: "physics.collision.Shapes.axisAlignedRectangle(org.joml.Vector2f,org.joml.Vector2f)"
  id: "axisAlignedRectangle(org.joml.Vector2f,org.joml.Vector2f)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "axisAlignedRectangle(Vector2f a, Vector2f b)"
  nameWithType: "Shapes.axisAlignedRectangle(Vector2f a, Vector2f b)"
  fullName: "physics.collision.Shapes.axisAlignedRectangle(Vector2f a, Vector2f b)"
  overload: "physics.collision.Shapes.axisAlignedRectangle*"
  type: "Method"
  package: "physics.collision"
  summary: "Create an axis aligned rectangle. This will find min corner and max corner and generate both missing points through basic geometry"
  syntax:
    content: "public static Quadrilateral axisAlignedRectangle(Vector2f a, Vector2f b)"
    parameters:
    - id: "a"
      type: "org.joml.Vector2f"
      description: "relative point a"
    - id: "b"
      type: "org.joml.Vector2f"
      description: "relative point b"
    return:
      type: "physics.collision.shape.Quadrilateral"
      description: "an axis aligned rectangle"
- uid: "physics.collision.Shapes.circle(float,float,float)"
  id: "circle(float,float,float)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "circle(float x, float y, float r)"
  nameWithType: "Shapes.circle(float x, float y, float r)"
  fullName: "physics.collision.Shapes.circle(float x, float y, float r)"
  overload: "physics.collision.Shapes.circle*"
  type: "Method"
  package: "physics.collision"
  summary: "Create a circle."
  syntax:
    content: "public static Circle circle(float x, float y, float r)"
    parameters:
    - id: "x"
      type: "float"
      description: "the relative x coord of the circles center"
    - id: "y"
      type: "float"
      description: "the relative y coord of the circles center"
    - id: "r"
      type: "float"
      description: "the radius of the circle"
    return:
      type: "physics.collision.shape.Circle"
      description: "a circle"
- uid: "physics.collision.Shapes.circle(org.joml.Vector2f,float)"
  id: "circle(org.joml.Vector2f,float)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "circle(Vector2f center, float radius)"
  nameWithType: "Shapes.circle(Vector2f center, float radius)"
  fullName: "physics.collision.Shapes.circle(Vector2f center, float radius)"
  overload: "physics.collision.Shapes.circle*"
  type: "Method"
  package: "physics.collision"
  summary: "Create a circle."
  syntax:
    content: "public static Circle circle(Vector2f center, float radius)"
    parameters:
    - id: "center"
      type: "org.joml.Vector2f"
      description: "the relative center of the circle"
    - id: "radius"
      type: "float"
      description: "the radius of the circle"
    return:
      type: "physics.collision.shape.Circle"
      description: "a circle"
- uid: "physics.collision.Shapes.circle(org.joml.Vector2f,org.joml.Vector2f,float)"
  id: "circle(org.joml.Vector2f,org.joml.Vector2f,float)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "circle(Vector2f center, Vector2f circlePosition, float radius)"
  nameWithType: "Shapes.circle(Vector2f center, Vector2f circlePosition, float radius)"
  fullName: "physics.collision.Shapes.circle(Vector2f center, Vector2f circlePosition, float radius)"
  overload: "physics.collision.Shapes.circle*"
  type: "Method"
  package: "physics.collision"
  summary: "Create a circle."
  syntax:
    content: "public static Circle circle(Vector2f center, Vector2f circlePosition, float radius)"
    parameters:
    - id: "center"
      type: "org.joml.Vector2f"
      description: "the absolute center of the circle"
    - id: "circlePosition"
      type: "org.joml.Vector2f"
      description: "the current absolute position of the circle's center"
    - id: "radius"
      type: "float"
      description: "the radius of the circle"
    return:
      type: "physics.collision.shape.Circle"
      description: "a circle"
- uid: "physics.collision.Shapes.convexPolygon(float...)"
  id: "convexPolygon(float...)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "convexPolygon(float[] coordPairs)"
  nameWithType: "Shapes.convexPolygon(float[] coordPairs)"
  fullName: "physics.collision.Shapes.convexPolygon(float[] coordPairs)"
  overload: "physics.collision.Shapes.convexPolygon*"
  type: "Method"
  package: "physics.collision"
  summary: "Create a convex polygon by a given set of coordinate pairs."
  syntax:
    content: "public static ConvexPolygon convexPolygon(float[] coordPairs)"
    parameters:
    - id: "coordPairs"
      type: "float[]"
      description: "a dynamic array of coordinates, which must have an even size."
    return:
      type: "physics.collision.shape.ConvexPolygon"
      description: "a <xref uid=\"physics.collision.shape.ConvexPolygon\" data-throw-if-not-resolved=\"false\">ConvexPolygon</xref> over all given points or null if the coordinates have a odd size"
- uid: "physics.collision.Shapes.quadrilateral(org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f)"
  id: "quadrilateral(org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "quadrilateral(Vector2f a, Vector2f b, Vector2f c, Vector2f d)"
  nameWithType: "Shapes.quadrilateral(Vector2f a, Vector2f b, Vector2f c, Vector2f d)"
  fullName: "physics.collision.Shapes.quadrilateral(Vector2f a, Vector2f b, Vector2f c, Vector2f d)"
  overload: "physics.collision.Shapes.quadrilateral*"
  type: "Method"
  package: "physics.collision"
  summary: "Create a quadrilateral."
  syntax:
    content: "public static Quadrilateral quadrilateral(Vector2f a, Vector2f b, Vector2f c, Vector2f d)"
    parameters:
    - id: "a"
      type: "org.joml.Vector2f"
      description: "relative point a"
    - id: "b"
      type: "org.joml.Vector2f"
      description: "relative point b"
    - id: "c"
      type: "org.joml.Vector2f"
      description: "relative point c"
    - id: "d"
      type: "org.joml.Vector2f"
      description: "relative point d"
    return:
      type: "physics.collision.shape.Quadrilateral"
      description: "a quadrilateral"
- uid: "physics.collision.Shapes.triangle(float,float,float,float,float,float)"
  id: "triangle(float,float,float,float,float,float)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "triangle(float ax, float ay, float bx, float by, float cx, float cy)"
  nameWithType: "Shapes.triangle(float ax, float ay, float bx, float by, float cx, float cy)"
  fullName: "physics.collision.Shapes.triangle(float ax, float ay, float bx, float by, float cx, float cy)"
  overload: "physics.collision.Shapes.triangle*"
  type: "Method"
  package: "physics.collision"
  summary: "Create a triangle."
  syntax:
    content: "public static Triangle triangle(float ax, float ay, float bx, float by, float cx, float cy)"
    parameters:
    - id: "ax"
      type: "float"
      description: "relative coordinate Ax"
    - id: "ay"
      type: "float"
      description: "relative coordinate Ay"
    - id: "bx"
      type: "float"
      description: "relative coordinate Bx"
    - id: "by"
      type: "float"
      description: "relative coordinate By"
    - id: "cx"
      type: "float"
      description: "relative coordinate Cx"
    - id: "cy"
      type: "float"
      description: "relative coordinate Cy"
    return:
      type: "physics.collision.shape.Triangle"
      description: "a triangle"
- uid: "physics.collision.Shapes.triangle(org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f)"
  id: "triangle(org.joml.Vector2f,org.joml.Vector2f,org.joml.Vector2f)"
  parent: "physics.collision.Shapes"
  langs:
  - "java"
  name: "triangle(Vector2f a, Vector2f b, Vector2f c)"
  nameWithType: "Shapes.triangle(Vector2f a, Vector2f b, Vector2f c)"
  fullName: "physics.collision.Shapes.triangle(Vector2f a, Vector2f b, Vector2f c)"
  overload: "physics.collision.Shapes.triangle*"
  type: "Method"
  package: "physics.collision"
  summary: "Create a triangle."
  syntax:
    content: "public static Triangle triangle(Vector2f a, Vector2f b, Vector2f c)"
    parameters:
    - id: "a"
      type: "org.joml.Vector2f"
      description: "relative point a"
    - id: "b"
      type: "org.joml.Vector2f"
      description: "relative point b"
    - id: "c"
      type: "org.joml.Vector2f"
      description: "relative point c"
    return:
      type: "physics.collision.shape.Triangle"
      description: "a triangle"
references:
- uid: "physics.collision.Shapes.Shapes*"
  name: "Shapes"
  nameWithType: "Shapes.Shapes"
  fullName: "physics.collision.Shapes.Shapes"
  package: "physics.collision"
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "physics.collision.shape.Circle"
  name: "Circle"
  nameWithType: "Circle"
  fullName: "physics.collision.shape.Circle"
- uid: "physics.collision.Shapes.circle*"
  name: "circle"
  nameWithType: "Shapes.circle"
  fullName: "physics.collision.Shapes.circle"
  package: "physics.collision"
- uid: "float[]"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
  - name: "[]"
    fullName: "[]"
- uid: "physics.collision.shape.ConvexPolygon"
  name: "ConvexPolygon"
  nameWithType: "ConvexPolygon"
  fullName: "physics.collision.shape.ConvexPolygon"
- uid: "physics.collision.Shapes.convexPolygon*"
  name: "convexPolygon"
  nameWithType: "Shapes.convexPolygon"
  fullName: "physics.collision.Shapes.convexPolygon"
  package: "physics.collision"
- uid: "physics.collision.shape.Triangle"
  name: "Triangle"
  nameWithType: "Triangle"
  fullName: "physics.collision.shape.Triangle"
- uid: "physics.collision.Shapes.triangle*"
  name: "triangle"
  nameWithType: "Shapes.triangle"
  fullName: "physics.collision.Shapes.triangle"
  package: "physics.collision"
- uid: "physics.collision.shape.Quadrilateral"
  name: "Quadrilateral"
  nameWithType: "Quadrilateral"
  fullName: "physics.collision.shape.Quadrilateral"
- uid: "physics.collision.Shapes.axisAlignedRectangle*"
  name: "axisAlignedRectangle"
  nameWithType: "Shapes.axisAlignedRectangle"
  fullName: "physics.collision.Shapes.axisAlignedRectangle"
  package: "physics.collision"
- uid: "physics.collision.Shapes.quadrilateral*"
  name: "quadrilateral"
  nameWithType: "Shapes.quadrilateral"
  fullName: "physics.collision.Shapes.quadrilateral"
  package: "physics.collision"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
