### YamlMime:ManagedReference
items:
- uid: "scene.SceneManager"
  id: "SceneManager"
  parent: "scene"
  children:
  - "scene.SceneManager.SceneManager()"
  - "scene.SceneManager.addScene(scene.Scene)"
  - "scene.SceneManager.currentScene()"
  - "scene.SceneManager.debugRender()"
  - "scene.SceneManager.enable()"
  - "scene.SceneManager.getMinSceneLight()"
  - "scene.SceneManager.postProcess(graphics.Texture)"
  - "scene.SceneManager.render()"
  - "scene.SceneManager.sceneIds()"
  - "scene.SceneManager.setMinSceneLight(float)"
  - "scene.SceneManager.switchScene(int)"
  - "scene.SceneManager.switchScene(scene.Scene,boolean)"
  - "scene.SceneManager.update()"
  - "scene.SceneManager.updateGameObjects()"
  - "scene.SceneManager.updateUI()"
  langs:
  - "java"
  name: "SceneManager"
  nameWithType: "SceneManager"
  fullName: "scene.SceneManager"
  type: "Class"
  package: "scene"
  summary: "# Azurite #\n\nThe SceneManager to handle all scenes of a window instance. It contains a scene pool and a currently active scene."
  syntax:
    content: "public class SceneManager"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "scene.SceneManager.SceneManager()"
  id: "SceneManager()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "SceneManager()"
  nameWithType: "SceneManager.SceneManager()"
  fullName: "scene.SceneManager.SceneManager()"
  overload: "scene.SceneManager.SceneManager*"
  type: "Constructor"
  package: "scene"
  syntax:
    content: "public SceneManager()"
- uid: "scene.SceneManager.addScene(scene.Scene)"
  id: "addScene(scene.Scene)"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "addScene(Scene scene)"
  nameWithType: "SceneManager.addScene(Scene scene)"
  fullName: "scene.SceneManager.addScene(Scene scene)"
  overload: "scene.SceneManager.addScene*"
  type: "Method"
  package: "scene"
  summary: "Adds a scene to the pool of the manager instance. Will call all initialization methods of the scene in preset order"
  syntax:
    content: "public boolean addScene(Scene scene)"
    parameters:
    - id: "scene"
      type: "scene.Scene"
    return:
      type: "boolean"
      description: "true, if and only if the scene instance is unique in the pool"
- uid: "scene.SceneManager.currentScene()"
  id: "currentScene()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "currentScene()"
  nameWithType: "SceneManager.currentScene()"
  fullName: "scene.SceneManager.currentScene()"
  overload: "scene.SceneManager.currentScene*"
  type: "Method"
  package: "scene"
  summary: "The currently active scene."
  syntax:
    content: "public Scene currentScene()"
    return:
      type: "scene.Scene"
- uid: "scene.SceneManager.debugRender()"
  id: "debugRender()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "debugRender()"
  nameWithType: "SceneManager.debugRender()"
  fullName: "scene.SceneManager.debugRender()"
  overload: "scene.SceneManager.debugRender*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void debugRender()"
- uid: "scene.SceneManager.enable()"
  id: "enable()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "enable()"
  nameWithType: "SceneManager.enable()"
  fullName: "scene.SceneManager.enable()"
  overload: "scene.SceneManager.enable*"
  type: "Method"
  package: "scene"
  summary: "This method is used to enable the sceneManager and call all initialization methods on a possible currentScene. After this method finished, all newly added scenes will call this methods directly."
  syntax:
    content: "public void enable()"
- uid: "scene.SceneManager.getMinSceneLight()"
  id: "getMinSceneLight()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "getMinSceneLight()"
  nameWithType: "SceneManager.getMinSceneLight()"
  fullName: "scene.SceneManager.getMinSceneLight()"
  overload: "scene.SceneManager.getMinSceneLight*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public float getMinSceneLight()"
    return:
      type: "float"
- uid: "scene.SceneManager.postProcess(graphics.Texture)"
  id: "postProcess(graphics.Texture)"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "postProcess(Texture texture)"
  nameWithType: "SceneManager.postProcess(Texture texture)"
  fullName: "scene.SceneManager.postProcess(Texture texture)"
  overload: "scene.SceneManager.postProcess*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void postProcess(Texture texture)"
    parameters:
    - id: "texture"
      type: "graphics.Texture"
- uid: "scene.SceneManager.render()"
  id: "render()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "render()"
  nameWithType: "SceneManager.render()"
  fullName: "scene.SceneManager.render()"
  overload: "scene.SceneManager.render*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void render()"
- uid: "scene.SceneManager.sceneIds()"
  id: "sceneIds()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "sceneIds()"
  nameWithType: "SceneManager.sceneIds()"
  fullName: "scene.SceneManager.sceneIds()"
  overload: "scene.SceneManager.sceneIds*"
  type: "Method"
  package: "scene"
  summary: "Creates a new set of all known scene ids."
  syntax:
    content: "public Set<Integer> sceneIds()"
    return:
      type: "java.util.Set<java.lang.Integer>"
- uid: "scene.SceneManager.setMinSceneLight(float)"
  id: "setMinSceneLight(float)"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "setMinSceneLight(float minSceneLight)"
  nameWithType: "SceneManager.setMinSceneLight(float minSceneLight)"
  fullName: "scene.SceneManager.setMinSceneLight(float minSceneLight)"
  overload: "scene.SceneManager.setMinSceneLight*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void setMinSceneLight(float minSceneLight)"
    parameters:
    - id: "minSceneLight"
      type: "float"
- uid: "scene.SceneManager.switchScene(int)"
  id: "switchScene(int)"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "switchScene(int id)"
  nameWithType: "SceneManager.switchScene(int id)"
  fullName: "scene.SceneManager.switchScene(int id)"
  overload: "scene.SceneManager.switchScene*"
  type: "Method"
  package: "scene"
  summary: "Switches the current scene to another scene with the given id, which has to be in the scene pool."
  syntax:
    content: "public boolean switchScene(int id)"
    parameters:
    - id: "id"
      type: "int"
      description: "the scene id belonging to the target scene to switch to"
    return:
      type: "boolean"
      description: "true if the given scene is now the new current scene"
- uid: "scene.SceneManager.switchScene(scene.Scene,boolean)"
  id: "switchScene(scene.Scene,boolean)"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "switchScene(Scene scene, boolean addIfUnknown)"
  nameWithType: "SceneManager.switchScene(Scene scene, boolean addIfUnknown)"
  fullName: "scene.SceneManager.switchScene(Scene scene, boolean addIfUnknown)"
  overload: "scene.SceneManager.switchScene*"
  type: "Method"
  package: "scene"
  summary: "Switches the current scene to a given one."
  syntax:
    content: "public boolean switchScene(Scene scene, boolean addIfUnknown)"
    parameters:
    - id: "scene"
      type: "scene.Scene"
      description: "the scene to switch to"
    - id: "addIfUnknown"
      type: "boolean"
      description: "whether the scene should be added\n                     if the scene is currently unknown to the scene pool"
    return:
      type: "boolean"
      description: "true if the given scene is now the new current scene"
- uid: "scene.SceneManager.update()"
  id: "update()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "update()"
  nameWithType: "SceneManager.update()"
  fullName: "scene.SceneManager.update()"
  overload: "scene.SceneManager.update*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void update()"
- uid: "scene.SceneManager.updateGameObjects()"
  id: "updateGameObjects()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "updateGameObjects()"
  nameWithType: "SceneManager.updateGameObjects()"
  fullName: "scene.SceneManager.updateGameObjects()"
  overload: "scene.SceneManager.updateGameObjects*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void updateGameObjects()"
- uid: "scene.SceneManager.updateUI()"
  id: "updateUI()"
  parent: "scene.SceneManager"
  langs:
  - "java"
  name: "updateUI()"
  nameWithType: "SceneManager.updateUI()"
  fullName: "scene.SceneManager.updateUI()"
  overload: "scene.SceneManager.updateUI*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void updateUI()"
references:
- uid: "scene.SceneManager.SceneManager*"
  name: "SceneManager"
  nameWithType: "SceneManager.SceneManager"
  fullName: "scene.SceneManager.SceneManager"
  package: "scene"
- uid: "scene.SceneManager.enable*"
  name: "enable"
  nameWithType: "SceneManager.enable"
  fullName: "scene.SceneManager.enable"
  package: "scene"
- uid: "scene.Scene"
  name: "Scene"
  nameWithType: "Scene"
  fullName: "scene.Scene"
- uid: "scene.SceneManager.currentScene*"
  name: "currentScene"
  nameWithType: "SceneManager.currentScene"
  fullName: "scene.SceneManager.currentScene"
  package: "scene"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "scene.SceneManager.addScene*"
  name: "addScene"
  nameWithType: "SceneManager.addScene"
  fullName: "scene.SceneManager.addScene"
  package: "scene"
- uid: "scene.SceneManager.updateUI*"
  name: "updateUI"
  nameWithType: "SceneManager.updateUI"
  fullName: "scene.SceneManager.updateUI"
  package: "scene"
- uid: "scene.SceneManager.switchScene*"
  name: "switchScene"
  nameWithType: "SceneManager.switchScene"
  fullName: "scene.SceneManager.switchScene"
  package: "scene"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.util.Set<java.lang.Integer>"
  spec.java:
  - uid: "java.util.Set"
    name: "Set"
    fullName: "java.util.Set"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "scene.SceneManager.sceneIds*"
  name: "sceneIds"
  nameWithType: "SceneManager.sceneIds"
  fullName: "scene.SceneManager.sceneIds"
  package: "scene"
- uid: "scene.SceneManager.update*"
  name: "update"
  nameWithType: "SceneManager.update"
  fullName: "scene.SceneManager.update"
  package: "scene"
- uid: "scene.SceneManager.updateGameObjects*"
  name: "updateGameObjects"
  nameWithType: "SceneManager.updateGameObjects"
  fullName: "scene.SceneManager.updateGameObjects"
  package: "scene"
- uid: "scene.SceneManager.render*"
  name: "render"
  nameWithType: "SceneManager.render"
  fullName: "scene.SceneManager.render"
  package: "scene"
- uid: "graphics.Texture"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
- uid: "scene.SceneManager.postProcess*"
  name: "postProcess"
  nameWithType: "SceneManager.postProcess"
  fullName: "scene.SceneManager.postProcess"
  package: "scene"
- uid: "scene.SceneManager.debugRender*"
  name: "debugRender"
  nameWithType: "SceneManager.debugRender"
  fullName: "scene.SceneManager.debugRender"
  package: "scene"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "scene.SceneManager.getMinSceneLight*"
  name: "getMinSceneLight"
  nameWithType: "SceneManager.getMinSceneLight"
  fullName: "scene.SceneManager.getMinSceneLight"
  package: "scene"
- uid: "scene.SceneManager.setMinSceneLight*"
  name: "setMinSceneLight"
  nameWithType: "SceneManager.setMinSceneLight"
  fullName: "scene.SceneManager.setMinSceneLight"
  package: "scene"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.Set"
  name: "Set"
  nameWithType: "Set"
  fullName: "java.util.Set"
- uid: "java.lang.Integer"
  name: "Integer"
  nameWithType: "Integer"
  fullName: "java.lang.Integer"
