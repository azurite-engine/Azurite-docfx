### YamlMime:ManagedReference
items:
- uid: "graphics.Shader"
  id: "Shader"
  parent: "graphics"
  children:
  - "graphics.Shader.Shader(java.lang.String)"
  - "graphics.Shader.attach()"
  - "graphics.Shader.compile()"
  - "graphics.Shader.detach()"
  - "graphics.Shader.fragmentID"
  - "graphics.Shader.uploadFloat(java.lang.String,float)"
  - "graphics.Shader.uploadFloatArray(java.lang.String,float[])"
  - "graphics.Shader.uploadInt(java.lang.String,int)"
  - "graphics.Shader.uploadIntArray(java.lang.String,int[])"
  - "graphics.Shader.uploadMat3f(java.lang.String,org.joml.Matrix3f)"
  - "graphics.Shader.uploadMat4f(java.lang.String,org.joml.Matrix4f)"
  - "graphics.Shader.uploadTexture(java.lang.String,int)"
  - "graphics.Shader.uploadVec2f(java.lang.String,org.joml.Vector2f)"
  - "graphics.Shader.uploadVec2fArray(java.lang.String,org.joml.Vector2f[])"
  - "graphics.Shader.uploadVec3fArray(java.lang.String,org.joml.Vector3f[])"
  - "graphics.Shader.uploadVec4f(java.lang.String,org.joml.Vector4f)"
  - "graphics.Shader.vertexID"
  langs:
  - "java"
  name: "Shader"
  nameWithType: "Shader"
  fullName: "graphics.Shader"
  type: "Class"
  package: "graphics"
  syntax:
    content: "public class Shader"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "graphics.Shader.Shader(java.lang.String)"
  id: "Shader(java.lang.String)"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "Shader(String filePath)"
  nameWithType: "Shader.Shader(String filePath)"
  fullName: "graphics.Shader.Shader(String filePath)"
  overload: "graphics.Shader.Shader*"
  type: "Constructor"
  package: "graphics"
  summary: "Loads the shader file at filepath. The shader file should have both shaders. Vertex Shader and fragment shader. \\#type should be used to separate them."
  syntax:
    content: "public Shader(String filePath)"
    parameters:
    - id: "filePath"
      type: "java.lang.String"
- uid: "graphics.Shader.attach()"
  id: "attach()"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "attach()"
  nameWithType: "Shader.attach()"
  fullName: "graphics.Shader.attach()"
  overload: "graphics.Shader.attach*"
  type: "Method"
  package: "graphics"
  summary: "Bind the shader program"
  syntax:
    content: "public void attach()"
- uid: "graphics.Shader.compile()"
  id: "compile()"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "compile()"
  nameWithType: "Shader.compile()"
  fullName: "graphics.Shader.compile()"
  overload: "graphics.Shader.compile*"
  type: "Method"
  package: "graphics"
  summary: "Creates vertex and fragment shader objects and compiles them. Also links them with the shader program"
  syntax:
    content: "public void compile()"
- uid: "graphics.Shader.detach()"
  id: "detach()"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "detach()"
  nameWithType: "Shader.detach()"
  fullName: "graphics.Shader.detach()"
  overload: "graphics.Shader.detach*"
  type: "Method"
  package: "graphics"
  summary: "Unbind the shader program"
  syntax:
    content: "public void detach()"
- uid: "graphics.Shader.fragmentID"
  id: "fragmentID"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "fragmentID"
  nameWithType: "Shader.fragmentID"
  fullName: "graphics.Shader.fragmentID"
  type: "Field"
  package: "graphics"
  summary: "Fragment Shader ID"
  syntax:
    content: "public static int fragmentID"
    return:
      type: "int"
- uid: "graphics.Shader.uploadFloat(java.lang.String,float)"
  id: "uploadFloat(java.lang.String,float)"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadFloat(String varName, float val)"
  nameWithType: "Shader.uploadFloat(String varName, float val)"
  fullName: "graphics.Shader.uploadFloat(String varName, float val)"
  overload: "graphics.Shader.uploadFloat*"
  type: "Method"
  package: "graphics"
  summary: "Upload a float to the gpu"
  syntax:
    content: "public void uploadFloat(String varName, float val)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "val"
      type: "float"
      description: "the float value to be uploaded"
- uid: "graphics.Shader.uploadFloatArray(java.lang.String,float[])"
  id: "uploadFloatArray(java.lang.String,float[])"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadFloatArray(String varName, float[] array)"
  nameWithType: "Shader.uploadFloatArray(String varName, float[] array)"
  fullName: "graphics.Shader.uploadFloatArray(String varName, float[] array)"
  overload: "graphics.Shader.uploadFloatArray*"
  type: "Method"
  package: "graphics"
  summary: "Upload a float array to the gpu"
  syntax:
    content: "public void uploadFloatArray(String varName, float[] array)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "array"
      type: "float[]"
      description: "the array to be uploaded"
- uid: "graphics.Shader.uploadInt(java.lang.String,int)"
  id: "uploadInt(java.lang.String,int)"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadInt(String varName, int val)"
  nameWithType: "Shader.uploadInt(String varName, int val)"
  fullName: "graphics.Shader.uploadInt(String varName, int val)"
  overload: "graphics.Shader.uploadInt*"
  type: "Method"
  package: "graphics"
  summary: "Upload an int to the gpu"
  syntax:
    content: "public void uploadInt(String varName, int val)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "val"
      type: "int"
      description: "the int value to be uploaded"
- uid: "graphics.Shader.uploadIntArray(java.lang.String,int[])"
  id: "uploadIntArray(java.lang.String,int[])"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadIntArray(String varName, int[] array)"
  nameWithType: "Shader.uploadIntArray(String varName, int[] array)"
  fullName: "graphics.Shader.uploadIntArray(String varName, int[] array)"
  overload: "graphics.Shader.uploadIntArray*"
  type: "Method"
  package: "graphics"
  summary: "Upload a int array to the gpu"
  syntax:
    content: "public void uploadIntArray(String varName, int[] array)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "array"
      type: "int[]"
      description: "the array to be uploaded"
- uid: "graphics.Shader.uploadMat3f(java.lang.String,org.joml.Matrix3f)"
  id: "uploadMat3f(java.lang.String,org.joml.Matrix3f)"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadMat3f(String varName, Matrix3f mat3)"
  nameWithType: "Shader.uploadMat3f(String varName, Matrix3f mat3)"
  fullName: "graphics.Shader.uploadMat3f(String varName, Matrix3f mat3)"
  overload: "graphics.Shader.uploadMat3f*"
  type: "Method"
  package: "graphics"
  summary: "Upload a 3x3 Matrix to the gpu"
  syntax:
    content: "public void uploadMat3f(String varName, Matrix3f mat3)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "mat3"
      type: "org.joml.Matrix3f"
      description: "the matrix to be uploaded"
- uid: "graphics.Shader.uploadMat4f(java.lang.String,org.joml.Matrix4f)"
  id: "uploadMat4f(java.lang.String,org.joml.Matrix4f)"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadMat4f(String varName, Matrix4f mat4)"
  nameWithType: "Shader.uploadMat4f(String varName, Matrix4f mat4)"
  fullName: "graphics.Shader.uploadMat4f(String varName, Matrix4f mat4)"
  overload: "graphics.Shader.uploadMat4f*"
  type: "Method"
  package: "graphics"
  summary: "Upload a 4x4 Matrix to the gpu"
  syntax:
    content: "public void uploadMat4f(String varName, Matrix4f mat4)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "mat4"
      type: "org.joml.Matrix4f"
      description: "the matrix to be uploaded"
- uid: "graphics.Shader.uploadTexture(java.lang.String,int)"
  id: "uploadTexture(java.lang.String,int)"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadTexture(String varName, int slot)"
  nameWithType: "Shader.uploadTexture(String varName, int slot)"
  fullName: "graphics.Shader.uploadTexture(String varName, int slot)"
  overload: "graphics.Shader.uploadTexture*"
  type: "Method"
  package: "graphics"
  summary: "Upload a integer texture sampler to the gpu"
  syntax:
    content: "public void uploadTexture(String varName, int slot)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "slot"
      type: "int"
      description: "the texture slot to which the texture is bound"
- uid: "graphics.Shader.uploadVec2f(java.lang.String,org.joml.Vector2f)"
  id: "uploadVec2f(java.lang.String,org.joml.Vector2f)"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadVec2f(String varName, Vector2f vec)"
  nameWithType: "Shader.uploadVec2f(String varName, Vector2f vec)"
  fullName: "graphics.Shader.uploadVec2f(String varName, Vector2f vec)"
  overload: "graphics.Shader.uploadVec2f*"
  type: "Method"
  package: "graphics"
  summary: "Upload a 2-d Vector to the gpu"
  syntax:
    content: "public void uploadVec2f(String varName, Vector2f vec)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "vec"
      type: "org.joml.Vector2f"
      description: "the vector to be uploaded"
- uid: "graphics.Shader.uploadVec2fArray(java.lang.String,org.joml.Vector2f[])"
  id: "uploadVec2fArray(java.lang.String,org.joml.Vector2f[])"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadVec2fArray(String varName, Vector2f[] vec)"
  nameWithType: "Shader.uploadVec2fArray(String varName, Vector2f[] vec)"
  fullName: "graphics.Shader.uploadVec2fArray(String varName, Vector2f[] vec)"
  overload: "graphics.Shader.uploadVec2fArray*"
  type: "Method"
  package: "graphics"
  summary: "Upload a 2-d Vector array to the gpu"
  syntax:
    content: "public void uploadVec2fArray(String varName, Vector2f[] vec)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "vec"
      type: "org.joml.Vector2f[]"
      description: "the array to be uploaded"
- uid: "graphics.Shader.uploadVec3fArray(java.lang.String,org.joml.Vector3f[])"
  id: "uploadVec3fArray(java.lang.String,org.joml.Vector3f[])"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadVec3fArray(String varName, Vector3f[] vec)"
  nameWithType: "Shader.uploadVec3fArray(String varName, Vector3f[] vec)"
  fullName: "graphics.Shader.uploadVec3fArray(String varName, Vector3f[] vec)"
  overload: "graphics.Shader.uploadVec3fArray*"
  type: "Method"
  package: "graphics"
  summary: "Upload a 3-d Vector array to the gpu"
  syntax:
    content: "public void uploadVec3fArray(String varName, Vector3f[] vec)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "vec"
      type: "org.joml.Vector3f[]"
      description: "the array to be uploaded"
- uid: "graphics.Shader.uploadVec4f(java.lang.String,org.joml.Vector4f)"
  id: "uploadVec4f(java.lang.String,org.joml.Vector4f)"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "uploadVec4f(String varName, Vector4f vec)"
  nameWithType: "Shader.uploadVec4f(String varName, Vector4f vec)"
  fullName: "graphics.Shader.uploadVec4f(String varName, Vector4f vec)"
  overload: "graphics.Shader.uploadVec4f*"
  type: "Method"
  package: "graphics"
  summary: "Upload a 4-d Vector to the gpu"
  syntax:
    content: "public void uploadVec4f(String varName, Vector4f vec)"
    parameters:
    - id: "varName"
      type: "java.lang.String"
      description: "name of the uniform"
    - id: "vec"
      type: "org.joml.Vector4f"
      description: "the vector to be uploaded"
- uid: "graphics.Shader.vertexID"
  id: "vertexID"
  parent: "graphics.Shader"
  langs:
  - "java"
  name: "vertexID"
  nameWithType: "Shader.vertexID"
  fullName: "graphics.Shader.vertexID"
  type: "Field"
  package: "graphics"
  summary: "Vertex Shader ID"
  syntax:
    content: "public static int vertexID"
    return:
      type: "int"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "graphics.Shader.Shader*"
  name: "Shader"
  nameWithType: "Shader.Shader"
  fullName: "graphics.Shader.Shader"
  package: "graphics"
- uid: "graphics.Shader.compile*"
  name: "compile"
  nameWithType: "Shader.compile"
  fullName: "graphics.Shader.compile"
  package: "graphics"
- uid: "graphics.Shader.attach*"
  name: "attach"
  nameWithType: "Shader.attach"
  fullName: "graphics.Shader.attach"
  package: "graphics"
- uid: "graphics.Shader.detach*"
  name: "detach"
  nameWithType: "Shader.detach"
  fullName: "graphics.Shader.detach"
  package: "graphics"
- uid: "org.joml.Matrix4f"
  spec.java:
  - uid: "org.joml.Matrix4f"
    name: "Matrix4f"
    fullName: "org.joml.Matrix4f"
- uid: "graphics.Shader.uploadMat4f*"
  name: "uploadMat4f"
  nameWithType: "Shader.uploadMat4f"
  fullName: "graphics.Shader.uploadMat4f"
  package: "graphics"
- uid: "org.joml.Matrix3f"
  spec.java:
  - uid: "org.joml.Matrix3f"
    name: "Matrix3f"
    fullName: "org.joml.Matrix3f"
- uid: "graphics.Shader.uploadMat3f*"
  name: "uploadMat3f"
  nameWithType: "Shader.uploadMat3f"
  fullName: "graphics.Shader.uploadMat3f"
  package: "graphics"
- uid: "org.joml.Vector4f"
  spec.java:
  - uid: "org.joml.Vector4f"
    name: "Vector4f"
    fullName: "org.joml.Vector4f"
- uid: "graphics.Shader.uploadVec4f*"
  name: "uploadVec4f"
  nameWithType: "Shader.uploadVec4f"
  fullName: "graphics.Shader.uploadVec4f"
  package: "graphics"
- uid: "org.joml.Vector3f[]"
  spec.java:
  - uid: "org.joml.Vector3f"
    name: "Vector3f"
    fullName: "org.joml.Vector3f"
  - name: "[]"
    fullName: "[]"
- uid: "graphics.Shader.uploadVec3fArray*"
  name: "uploadVec3fArray"
  nameWithType: "Shader.uploadVec3fArray"
  fullName: "graphics.Shader.uploadVec3fArray"
  package: "graphics"
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "graphics.Shader.uploadVec2f*"
  name: "uploadVec2f"
  nameWithType: "Shader.uploadVec2f"
  fullName: "graphics.Shader.uploadVec2f"
  package: "graphics"
- uid: "org.joml.Vector2f[]"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
  - name: "[]"
    fullName: "[]"
- uid: "graphics.Shader.uploadVec2fArray*"
  name: "uploadVec2fArray"
  nameWithType: "Shader.uploadVec2fArray"
  fullName: "graphics.Shader.uploadVec2fArray"
  package: "graphics"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "graphics.Shader.uploadFloat*"
  name: "uploadFloat"
  nameWithType: "Shader.uploadFloat"
  fullName: "graphics.Shader.uploadFloat"
  package: "graphics"
- uid: "float[]"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
  - name: "[]"
    fullName: "[]"
- uid: "graphics.Shader.uploadFloatArray*"
  name: "uploadFloatArray"
  nameWithType: "Shader.uploadFloatArray"
  fullName: "graphics.Shader.uploadFloatArray"
  package: "graphics"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "graphics.Shader.uploadInt*"
  name: "uploadInt"
  nameWithType: "Shader.uploadInt"
  fullName: "graphics.Shader.uploadInt"
  package: "graphics"
- uid: "graphics.Shader.uploadTexture*"
  name: "uploadTexture"
  nameWithType: "Shader.uploadTexture"
  fullName: "graphics.Shader.uploadTexture"
  package: "graphics"
- uid: "int[]"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
  - name: "[]"
    fullName: "[]"
- uid: "graphics.Shader.uploadIntArray*"
  name: "uploadIntArray"
  nameWithType: "Shader.uploadIntArray"
  fullName: "graphics.Shader.uploadIntArray"
  package: "graphics"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
