### YamlMime:ManagedReference
items:
- uid: "util.OrderPreservingList"
  id: "OrderPreservingList"
  parent: "util"
  children:
  - "util.OrderPreservingList.OrderPreservingList()"
  - "util.OrderPreservingList.OrderPreservingList(java.util.Collection<T>)"
  - "util.OrderPreservingList.add(T)"
  - "util.OrderPreservingList.add(int,T)"
  - "util.OrderPreservingList.addAll(int,java.util.Collection<? extends T>)"
  - "util.OrderPreservingList.addAll(java.util.Collection<? extends T>)"
  - "util.OrderPreservingList.set(int,T)"
  langs:
  - "java"
  name: "OrderPreservingList<T>"
  nameWithType: "OrderPreservingList<T>"
  fullName: "util.OrderPreservingList<T>"
  type: "Class"
  package: "util"
  summary: "A LinkedList override to create an order-preserving list to improve speed in a special use case:\nYou want to remove and add object from/to a list and keep the elements in the list sorted without having to re-sort each time."
  syntax:
    content: "public class OrderPreservingList<T> extends ArrayList<T>"
    typeParameters:
    - id: "T"
  inheritance:
  - "java.lang.Object"
  - "java.util.AbstractCollection"
  - "java.util.AbstractList"
  - "java.util.ArrayList"
  inheritedMembers:
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
  - "java.util.AbstractCollection.toString()"
  - "java.util.ArrayList.<T>toArray(T[])"
  - "java.util.ArrayList.add(E)"
  - "java.util.ArrayList.add(int,E)"
  - "java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)"
  - "java.util.ArrayList.addAll(java.util.Collection<? extends E>)"
  - "java.util.ArrayList.clear()"
  - "java.util.ArrayList.clone()"
  - "java.util.ArrayList.contains(java.lang.Object)"
  - "java.util.ArrayList.ensureCapacity(int)"
  - "java.util.ArrayList.equals(java.lang.Object)"
  - "java.util.ArrayList.forEach(java.util.function.Consumer<? super E>)"
  - "java.util.ArrayList.get(int)"
  - "java.util.ArrayList.hashCode()"
  - "java.util.ArrayList.indexOf(java.lang.Object)"
  - "java.util.ArrayList.isEmpty()"
  - "java.util.ArrayList.iterator()"
  - "java.util.ArrayList.lastIndexOf(java.lang.Object)"
  - "java.util.ArrayList.listIterator()"
  - "java.util.ArrayList.listIterator(int)"
  - "java.util.ArrayList.remove(int)"
  - "java.util.ArrayList.remove(java.lang.Object)"
  - "java.util.ArrayList.removeAll(java.util.Collection<?>)"
  - "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>)"
  - "java.util.ArrayList.removeRange(int,int)"
  - "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>)"
  - "java.util.ArrayList.retainAll(java.util.Collection<?>)"
  - "java.util.ArrayList.set(int,E)"
  - "java.util.ArrayList.size()"
  - "java.util.ArrayList.sort(java.util.Comparator<? super E>)"
  - "java.util.ArrayList.spliterator()"
  - "java.util.ArrayList.subList(int,int)"
  - "java.util.ArrayList.toArray()"
  - "java.util.ArrayList.trimToSize()"
- uid: "util.OrderPreservingList.OrderPreservingList()"
  id: "OrderPreservingList()"
  parent: "util.OrderPreservingList"
  langs:
  - "java"
  name: "OrderPreservingList()"
  nameWithType: "OrderPreservingList<T>.OrderPreservingList()"
  fullName: "util.OrderPreservingList<T>.OrderPreservingList()"
  overload: "util.OrderPreservingList.OrderPreservingList*"
  type: "Constructor"
  package: "util"
  syntax:
    content: "public OrderPreservingList()"
- uid: "util.OrderPreservingList.OrderPreservingList(java.util.Collection<T>)"
  id: "OrderPreservingList(java.util.Collection<T>)"
  parent: "util.OrderPreservingList"
  langs:
  - "java"
  name: "OrderPreservingList(Collection<T> data)"
  nameWithType: "OrderPreservingList<T>.OrderPreservingList(Collection<T> data)"
  fullName: "util.OrderPreservingList<T>.OrderPreservingList(Collection<T> data)"
  overload: "util.OrderPreservingList.OrderPreservingList*"
  type: "Constructor"
  package: "util"
  syntax:
    content: "public OrderPreservingList(Collection<T> data)"
    parameters:
    - id: "data"
      type: "java.util.Collection<T>"
- uid: "util.OrderPreservingList.add(T)"
  id: "add(T)"
  parent: "util.OrderPreservingList"
  langs:
  - "java"
  name: "add(T t)"
  nameWithType: "OrderPreservingList<T>.add(T t)"
  fullName: "util.OrderPreservingList<T>.add(T t)"
  overload: "util.OrderPreservingList.add*"
  overridden: "java.util.ArrayList.add(E)"
  type: "Method"
  package: "util"
  syntax:
    content: "public boolean add(T t)"
    parameters:
    - id: "t"
      type: "T"
    return:
      type: "boolean"
- uid: "util.OrderPreservingList.add(int,T)"
  id: "add(int,T)"
  parent: "util.OrderPreservingList"
  langs:
  - "java"
  name: "add(int index, T element)"
  nameWithType: "OrderPreservingList<T>.add(int index, T element)"
  fullName: "util.OrderPreservingList<T>.add(int index, T element)"
  overload: "util.OrderPreservingList.add*"
  overridden: "java.util.ArrayList.add(int,E)"
  type: "Method"
  package: "util"
  syntax:
    content: "public void add(int index, T element)"
    parameters:
    - id: "index"
      type: "int"
    - id: "element"
      type: "T"
- uid: "util.OrderPreservingList.addAll(int,java.util.Collection<? extends T>)"
  id: "addAll(int,java.util.Collection<? extends T>)"
  parent: "util.OrderPreservingList"
  langs:
  - "java"
  name: "addAll(int index, Collection<? extends T> c)"
  nameWithType: "OrderPreservingList<T>.addAll(int index, Collection<? extends T> c)"
  fullName: "util.OrderPreservingList<T>.addAll(int index, Collection<? extends T> c)"
  overload: "util.OrderPreservingList.addAll*"
  overridden: "java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)"
  type: "Method"
  package: "util"
  syntax:
    content: "public boolean addAll(int index, Collection<? extends T> c)"
    parameters:
    - id: "index"
      type: "int"
    - id: "c"
      type: "java.util.Collection<? extends T>"
    return:
      type: "boolean"
- uid: "util.OrderPreservingList.addAll(java.util.Collection<? extends T>)"
  id: "addAll(java.util.Collection<? extends T>)"
  parent: "util.OrderPreservingList"
  langs:
  - "java"
  name: "addAll(Collection<? extends T> c)"
  nameWithType: "OrderPreservingList<T>.addAll(Collection<? extends T> c)"
  fullName: "util.OrderPreservingList<T>.addAll(Collection<? extends T> c)"
  overload: "util.OrderPreservingList.addAll*"
  overridden: "java.util.ArrayList.addAll(java.util.Collection<? extends E>)"
  type: "Method"
  package: "util"
  syntax:
    content: "public boolean addAll(Collection<? extends T> c)"
    parameters:
    - id: "c"
      type: "java.util.Collection<? extends T>"
    return:
      type: "boolean"
- uid: "util.OrderPreservingList.set(int,T)"
  id: "set(int,T)"
  parent: "util.OrderPreservingList"
  langs:
  - "java"
  name: "set(int index, T element)"
  nameWithType: "OrderPreservingList<T>.set(int index, T element)"
  fullName: "util.OrderPreservingList<T>.set(int index, T element)"
  overload: "util.OrderPreservingList.set*"
  overridden: "java.util.ArrayList.set(int,E)"
  type: "Method"
  package: "util"
  syntax:
    content: "public T set(int index, T element)"
    parameters:
    - id: "index"
      type: "int"
    - id: "element"
      type: "T"
    return:
      type: "T"
references:
- uid: "java.util.Collection<T>"
  spec.java:
  - uid: "java.util.Collection"
    name: "Collection"
    fullName: "java.util.Collection"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "util.OrderPreservingList.OrderPreservingList*"
  name: "OrderPreservingList"
  nameWithType: "OrderPreservingList<T>.OrderPreservingList"
  fullName: "util.OrderPreservingList<T>.OrderPreservingList"
  package: "util"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "util.OrderPreservingList.add*"
  name: "add"
  nameWithType: "OrderPreservingList<T>.add"
  fullName: "util.OrderPreservingList<T>.add"
  package: "util"
- uid: "java.util.Collection<? extends T>"
  spec.java:
  - uid: "java.util.Collection"
    name: "Collection"
    fullName: "java.util.Collection"
  - name: "<"
    fullName: "<"
  - uid: "? extends T"
    name: "? extends T"
    fullName: "? extends T"
  - name: ">"
    fullName: ">"
- uid: "util.OrderPreservingList.addAll*"
  name: "addAll"
  nameWithType: "OrderPreservingList<T>.addAll"
  fullName: "util.OrderPreservingList<T>.addAll"
  package: "util"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "util.OrderPreservingList.set*"
  name: "set"
  nameWithType: "OrderPreservingList<T>.set"
  fullName: "util.OrderPreservingList<T>.set"
  package: "util"
- uid: "java.util.ArrayList<T>"
  name: "ArrayList<T>"
  nameWithType: "ArrayList<T>"
  fullName: "java.util.ArrayList<T>"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)"
  name: "ArrayList.addAll(int,Collection<? extends E>)"
  nameWithType: "ArrayList.addAll(int,Collection<? extends E>)"
  fullName: "java.util.ArrayList.addAll(int,java.util.Collection<? extends E>)"
- uid: "java.util.ArrayList.removeRange(int,int)"
  name: "ArrayList.removeRange(int,int)"
  nameWithType: "ArrayList.removeRange(int,int)"
  fullName: "java.util.ArrayList.removeRange(int,int)"
- uid: "java.util.ArrayList.subList(int,int)"
  name: "ArrayList.subList(int,int)"
  nameWithType: "ArrayList.subList(int,int)"
  fullName: "java.util.ArrayList.subList(int,int)"
- uid: "java.util.ArrayList.remove(java.lang.Object)"
  name: "ArrayList.remove(Object)"
  nameWithType: "ArrayList.remove(Object)"
  fullName: "java.util.ArrayList.remove(java.lang.Object)"
- uid: "java.util.ArrayList.ensureCapacity(int)"
  name: "ArrayList.ensureCapacity(int)"
  nameWithType: "ArrayList.ensureCapacity(int)"
  fullName: "java.util.ArrayList.ensureCapacity(int)"
- uid: "java.util.ArrayList.removeAll(java.util.Collection<?>)"
  name: "ArrayList.removeAll(Collection<?>)"
  nameWithType: "ArrayList.removeAll(Collection<?>)"
  fullName: "java.util.ArrayList.removeAll(java.util.Collection<?>)"
- uid: "java.util.ArrayList.indexOf(java.lang.Object)"
  name: "ArrayList.indexOf(Object)"
  nameWithType: "ArrayList.indexOf(Object)"
  fullName: "java.util.ArrayList.indexOf(java.lang.Object)"
- uid: "java.util.ArrayList.hashCode()"
  name: "ArrayList.hashCode()"
  nameWithType: "ArrayList.hashCode()"
  fullName: "java.util.ArrayList.hashCode()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.util.ArrayList.spliterator()"
  name: "ArrayList.spliterator()"
  nameWithType: "ArrayList.spliterator()"
  fullName: "java.util.ArrayList.spliterator()"
- uid: "java.util.ArrayList.forEach(java.util.function.Consumer<? super E>)"
  name: "ArrayList.forEach(Consumer<? super E>)"
  nameWithType: "ArrayList.forEach(Consumer<? super E>)"
  fullName: "java.util.ArrayList.forEach(java.util.function.Consumer<? super E>)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.ArrayList.remove(int)"
  name: "ArrayList.remove(int)"
  nameWithType: "ArrayList.remove(int)"
  fullName: "java.util.ArrayList.remove(int)"
- uid: "java.util.ArrayList.add(int,E)"
  name: "ArrayList.add(int,E)"
  nameWithType: "ArrayList.add(int,E)"
  fullName: "java.util.ArrayList.add(int,E)"
- uid: "java.util.ArrayList.clear()"
  name: "ArrayList.clear()"
  nameWithType: "ArrayList.clear()"
  fullName: "java.util.ArrayList.clear()"
- uid: "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>)"
  name: "ArrayList.replaceAll(UnaryOperator<E>)"
  nameWithType: "ArrayList.replaceAll(UnaryOperator<E>)"
  fullName: "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>)"
- uid: "java.util.ArrayList.add(E)"
  name: "ArrayList.add(E)"
  nameWithType: "ArrayList.add(E)"
  fullName: "java.util.ArrayList.add(E)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.util.ArrayList.trimToSize()"
  name: "ArrayList.trimToSize()"
  nameWithType: "ArrayList.trimToSize()"
  fullName: "java.util.ArrayList.trimToSize()"
- uid: "java.util.ArrayList.equals(java.lang.Object)"
  name: "ArrayList.equals(Object)"
  nameWithType: "ArrayList.equals(Object)"
  fullName: "java.util.ArrayList.equals(java.lang.Object)"
- uid: "java.util.ArrayList.isEmpty()"
  name: "ArrayList.isEmpty()"
  nameWithType: "ArrayList.isEmpty()"
  fullName: "java.util.ArrayList.isEmpty()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.util.ArrayList.lastIndexOf(java.lang.Object)"
  name: "ArrayList.lastIndexOf(Object)"
  nameWithType: "ArrayList.lastIndexOf(Object)"
  fullName: "java.util.ArrayList.lastIndexOf(java.lang.Object)"
- uid: "java.util.ArrayList.<T>toArray(T[])"
  name: "ArrayList.<T>toArray(T[])"
  nameWithType: "ArrayList.<T>toArray(T[])"
  fullName: "java.util.ArrayList.<T>toArray(T[])"
- uid: "java.util.ArrayList.iterator()"
  name: "ArrayList.iterator()"
  nameWithType: "ArrayList.iterator()"
  fullName: "java.util.ArrayList.iterator()"
- uid: "java.util.ArrayList.sort(java.util.Comparator<? super E>)"
  name: "ArrayList.sort(Comparator<? super E>)"
  nameWithType: "ArrayList.sort(Comparator<? super E>)"
  fullName: "java.util.ArrayList.sort(java.util.Comparator<? super E>)"
- uid: "java.util.ArrayList.addAll(java.util.Collection<? extends E>)"
  name: "ArrayList.addAll(Collection<? extends E>)"
  nameWithType: "ArrayList.addAll(Collection<? extends E>)"
  fullName: "java.util.ArrayList.addAll(java.util.Collection<? extends E>)"
- uid: "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
  name: "AbstractCollection.containsAll(Collection<?>)"
  nameWithType: "AbstractCollection.containsAll(Collection<?>)"
  fullName: "java.util.AbstractCollection.containsAll(java.util.Collection<?>)"
- uid: "java.util.ArrayList.contains(java.lang.Object)"
  name: "ArrayList.contains(Object)"
  nameWithType: "ArrayList.contains(Object)"
  fullName: "java.util.ArrayList.contains(java.lang.Object)"
- uid: "java.util.ArrayList.retainAll(java.util.Collection<?>)"
  name: "ArrayList.retainAll(Collection<?>)"
  nameWithType: "ArrayList.retainAll(Collection<?>)"
  fullName: "java.util.ArrayList.retainAll(java.util.Collection<?>)"
- uid: "java.util.ArrayList.size()"
  name: "ArrayList.size()"
  nameWithType: "ArrayList.size()"
  fullName: "java.util.ArrayList.size()"
- uid: "java.util.ArrayList.listIterator(int)"
  name: "ArrayList.listIterator(int)"
  nameWithType: "ArrayList.listIterator(int)"
  fullName: "java.util.ArrayList.listIterator(int)"
- uid: "java.util.AbstractCollection.toString()"
  name: "AbstractCollection.toString()"
  nameWithType: "AbstractCollection.toString()"
  fullName: "java.util.AbstractCollection.toString()"
- uid: "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>)"
  name: "ArrayList.removeIf(Predicate<? super E>)"
  nameWithType: "ArrayList.removeIf(Predicate<? super E>)"
  fullName: "java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>)"
- uid: "java.util.ArrayList.clone()"
  name: "ArrayList.clone()"
  nameWithType: "ArrayList.clone()"
  fullName: "java.util.ArrayList.clone()"
- uid: "java.util.ArrayList.set(int,E)"
  name: "ArrayList.set(int,E)"
  nameWithType: "ArrayList.set(int,E)"
  fullName: "java.util.ArrayList.set(int,E)"
- uid: "java.util.ArrayList.listIterator()"
  name: "ArrayList.listIterator()"
  nameWithType: "ArrayList.listIterator()"
  fullName: "java.util.ArrayList.listIterator()"
- uid: "java.util.ArrayList.get(int)"
  name: "ArrayList.get(int)"
  nameWithType: "ArrayList.get(int)"
  fullName: "java.util.ArrayList.get(int)"
- uid: "java.util.ArrayList.toArray()"
  name: "ArrayList.toArray()"
  nameWithType: "ArrayList.toArray()"
  fullName: "java.util.ArrayList.toArray()"
- uid: "java.util.Collection"
  name: "Collection"
  nameWithType: "Collection"
  fullName: "java.util.Collection"
- uid: "? extends T"
  name: "? extends T"
  nameWithType: "? extends T"
  fullName: "? extends T"
- uid: "java.util.ArrayList"
  name: "ArrayList"
  nameWithType: "ArrayList"
  fullName: "java.util.ArrayList"
- uid: "? extends E>)"
  name: "? extends E>)"
  nameWithType: "? extends E>)"
  fullName: "? extends E>)"
- uid: "java.util.ArrayList.addAll(int,java.util.Collection"
  name: "ArrayList.addAll(int,Collection"
  nameWithType: "ArrayList.addAll(int,Collection"
  fullName: "java.util.ArrayList.addAll(int,java.util.Collection"
- uid: "java.util.ArrayList.removeAll(java.util.Collection"
  name: "ArrayList.removeAll(Collection"
  nameWithType: "ArrayList.removeAll(Collection"
  fullName: "java.util.ArrayList.removeAll(java.util.Collection"
- uid: "?>)"
  name: "?>)"
  nameWithType: "?>)"
  fullName: "?>)"
- uid: "? super E>)"
  name: "? super E>)"
  nameWithType: "? super E>)"
  fullName: "? super E>)"
- uid: "java.util.ArrayList.forEach(java.util.function.Consumer"
  name: "ArrayList.forEach(Consumer"
  nameWithType: "ArrayList.forEach(Consumer"
  fullName: "java.util.ArrayList.forEach(java.util.function.Consumer"
- uid: "E>)"
  name: "E>)"
  nameWithType: "E>)"
  fullName: "E>)"
- uid: "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator"
  name: "ArrayList.replaceAll(UnaryOperator"
  nameWithType: "ArrayList.replaceAll(UnaryOperator"
  fullName: "java.util.ArrayList.replaceAll(java.util.function.UnaryOperator"
- uid: "T>toArray(T[])"
  name: "T>toArray(T[])"
  nameWithType: "T>toArray(T[])"
  fullName: "T>toArray(T[])"
- uid: "java.util.ArrayList."
  name: "ArrayList."
  nameWithType: "ArrayList."
  fullName: "java.util.ArrayList."
- uid: "java.util.ArrayList.sort(java.util.Comparator"
  name: "ArrayList.sort(Comparator"
  nameWithType: "ArrayList.sort(Comparator"
  fullName: "java.util.ArrayList.sort(java.util.Comparator"
- uid: "java.util.ArrayList.addAll(java.util.Collection"
  name: "ArrayList.addAll(Collection"
  nameWithType: "ArrayList.addAll(Collection"
  fullName: "java.util.ArrayList.addAll(java.util.Collection"
- uid: "java.util.AbstractCollection.containsAll(java.util.Collection"
  name: "AbstractCollection.containsAll(Collection"
  nameWithType: "AbstractCollection.containsAll(Collection"
  fullName: "java.util.AbstractCollection.containsAll(java.util.Collection"
- uid: "java.util.ArrayList.retainAll(java.util.Collection"
  name: "ArrayList.retainAll(Collection"
  nameWithType: "ArrayList.retainAll(Collection"
  fullName: "java.util.ArrayList.retainAll(java.util.Collection"
- uid: "java.util.ArrayList.removeIf(java.util.function.Predicate"
  name: "ArrayList.removeIf(Predicate"
  nameWithType: "ArrayList.removeIf(Predicate"
  fullName: "java.util.ArrayList.removeIf(java.util.function.Predicate"
