### YamlMime:ManagedReference
items:
- uid: "io.Tokenizer"
  id: "Tokenizer"
  parent: "io"
  children:
  - "io.Tokenizer.Tokenizer()"
  - "io.Tokenizer.detectCharset(byte[])"
  - "io.Tokenizer.tokenize(byte[])"
  - "io.Tokenizer.tokenize(byte[],java.nio.charset.Charset)"
  - "io.Tokenizer.tokenize(java.lang.String)"
  langs:
  - "java"
  name: "Tokenizer"
  nameWithType: "Tokenizer"
  fullName: "io.Tokenizer"
  type: "Class"
  package: "io"
  syntax:
    content: "public abstract class Tokenizer"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "io.Tokenizer.Tokenizer()"
  id: "Tokenizer()"
  parent: "io.Tokenizer"
  langs:
  - "java"
  name: "Tokenizer()"
  nameWithType: "Tokenizer.Tokenizer()"
  fullName: "io.Tokenizer.Tokenizer()"
  overload: "io.Tokenizer.Tokenizer*"
  type: "Constructor"
  package: "io"
  syntax:
    content: "public Tokenizer()"
- uid: "io.Tokenizer.detectCharset(byte[])"
  id: "detectCharset(byte[])"
  parent: "io.Tokenizer"
  langs:
  - "java"
  name: "detectCharset(byte[] input)"
  nameWithType: "Tokenizer.detectCharset(byte[] input)"
  fullName: "io.Tokenizer.detectCharset(byte[] input)"
  overload: "io.Tokenizer.detectCharset*"
  type: "Method"
  package: "io"
  summary: "Read raw input data to determine the charset based on the input - or return a default one."
  syntax:
    content: "public abstract Charset detectCharset(byte[] input)"
    parameters:
    - id: "input"
      type: "byte[]"
      description: "the raw input byte"
    return:
      type: "java.nio.charset.Charset"
      description: "the charset somewhere defined in the input data or a default charset"
- uid: "io.Tokenizer.tokenize(byte[])"
  id: "tokenize(byte[])"
  parent: "io.Tokenizer"
  langs:
  - "java"
  name: "tokenize(byte[] input)"
  nameWithType: "Tokenizer.tokenize(byte[] input)"
  fullName: "io.Tokenizer.tokenize(byte[] input)"
  overload: "io.Tokenizer.tokenize*"
  type: "Method"
  package: "io"
  summary: "Tokenize data using the defined encoding in the header, or the default according to the <xref uid=\"io.FileFormat\" data-throw-if-not-resolved=\"false\">FileFormat</xref> if there is none defined and return all tokens."
  syntax:
    content: "public List<Token> tokenize(byte[] input)"
    parameters:
    - id: "input"
      type: "byte[]"
      description: "the raw utf-8 input bytes"
    return:
      type: "java.util.List<io.token.Token>"
      description: "a list of all tokens while retaining its chronological order."
- uid: "io.Tokenizer.tokenize(byte[],java.nio.charset.Charset)"
  id: "tokenize(byte[],java.nio.charset.Charset)"
  parent: "io.Tokenizer"
  langs:
  - "java"
  name: "tokenize(byte[] input, Charset charset)"
  nameWithType: "Tokenizer.tokenize(byte[] input, Charset charset)"
  fullName: "io.Tokenizer.tokenize(byte[] input, Charset charset)"
  overload: "io.Tokenizer.tokenize*"
  type: "Method"
  package: "io"
  summary: "Tokenize data using the defined encoding and return all tokens."
  syntax:
    content: "public List<Token> tokenize(byte[] input, Charset charset)"
    parameters:
    - id: "input"
      type: "byte[]"
      description: "the raw utf-8 input bytes"
    - id: "charset"
      type: "java.nio.charset.Charset"
    return:
      type: "java.util.List<io.token.Token>"
      description: "a list of all tokens while retaining its chronological order."
- uid: "io.Tokenizer.tokenize(java.lang.String)"
  id: "tokenize(java.lang.String)"
  parent: "io.Tokenizer"
  langs:
  - "java"
  name: "tokenize(String input)"
  nameWithType: "Tokenizer.tokenize(String input)"
  fullName: "io.Tokenizer.tokenize(String input)"
  overload: "io.Tokenizer.tokenize*"
  type: "Method"
  package: "io"
  summary: "Reads an input string and extracts all tokens depending on the implementation from it"
  syntax:
    content: "public abstract List<Token> tokenize(String input)"
    parameters:
    - id: "input"
      type: "java.lang.String"
      description: "the input string data"
    return:
      type: "java.util.List<io.token.Token>"
      description: "a list of all tokens while retaining its chronological order."
references:
- uid: "io.Tokenizer.Tokenizer*"
  name: "Tokenizer"
  nameWithType: "Tokenizer.Tokenizer"
  fullName: "io.Tokenizer.Tokenizer"
  package: "io"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.util.List<io.token.Token>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "io.token.Token"
    name: "Token"
    fullName: "io.token.Token"
  - name: ">"
    fullName: ">"
- uid: "io.Tokenizer.tokenize*"
  name: "tokenize"
  nameWithType: "Tokenizer.tokenize"
  fullName: "io.Tokenizer.tokenize"
  package: "io"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "java.nio.charset.Charset"
  spec.java:
  - uid: "java.nio.charset.Charset"
    name: "Charset"
    fullName: "java.nio.charset.Charset"
- uid: "io.Tokenizer.detectCharset*"
  name: "detectCharset"
  nameWithType: "Tokenizer.detectCharset"
  fullName: "io.Tokenizer.detectCharset"
  package: "io"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "io.token.Token"
  name: "Token"
  nameWithType: "Token"
  fullName: "io.token.Token"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
