### YamlMime:ManagedReference
items:
- uid: "ai.path.Pathfinding"
  id: "Pathfinding"
  parent: "ai.path"
  children:
  - "ai.path.Pathfinding.<Position>astar(ai.path.Map<Position>,java.util.function.BiFunction<Position,Position,java.lang.Float>)"
  - "ai.path.Pathfinding.<Position>dijkstra(ai.path.Map<Position>)"
  - "ai.path.Pathfinding.Pathfinding()"
  langs:
  - "java"
  name: "Pathfinding"
  nameWithType: "Pathfinding"
  fullName: "ai.path.Pathfinding"
  type: "Class"
  package: "ai.path"
  summary: "This class contains currently 2 pathfinding methods: - a-star (A\\*) - dijkstra"
  syntax:
    content: "public class Pathfinding"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ai.path.Pathfinding.<Position>astar(ai.path.Map<Position>,java.util.function.BiFunction<Position,Position,java.lang.Float>)"
  id: "<Position>astar(ai.path.Map<Position>,java.util.function.BiFunction<Position,Position,java.lang.Float>)"
  parent: "ai.path.Pathfinding"
  langs:
  - "java"
  name: "<Position>astar(Map<Position> map, BiFunction<Position,Position,Float> hCost)"
  nameWithType: "Pathfinding.<Position>astar(Map<Position> map, BiFunction<Position,Position,Float> hCost)"
  fullName: "ai.path.Pathfinding.<Position>astar(Map<Position> map, BiFunction<Position,Position,Float> hCost)"
  overload: "ai.path.Pathfinding.astar*"
  type: "Method"
  package: "ai.path"
  summary: "A fully modifiable version of the A\\* (a-star) algorithm. It uses a finite possibly directional weighted graph structure to find the shortest possible path from a given start node to a given target node. This method will not check every possible path, so if the weights are not equally distributed, it may lead to results, that are not the best solution to the problem."
  syntax:
    content: "public static Optional<ResultPath<Position>> <Position>astar(Map<Position> map, BiFunction<Position,Position,Float> hCost)"
    parameters:
    - id: "map"
      type: "ai.path.Map<Position>"
      description: "a map containing a graph of weighted node references"
    - id: "hCost"
      type: "java.util.function.BiFunction<Position,Position,java.lang.Float>"
      description: "the hCost algorithm which should make a guess about how far posA is away from posB.\n                   It is required, that the calculation never results in a value less than 0\n                   and it is preferred to be exactly 0 if both positions are identical.\n                   If possible, it is usually a good approach to measure the distance between both positions\n                   or a value that is proportional to that distance."
    return:
      type: "java.util.Optional<ai.path.ResultPath<Position>>"
      description: "an optional containing the found path if there is one"
- uid: "ai.path.Pathfinding.<Position>dijkstra(ai.path.Map<Position>)"
  id: "<Position>dijkstra(ai.path.Map<Position>)"
  parent: "ai.path.Pathfinding"
  langs:
  - "java"
  name: "<Position>dijkstra(Map<Position> map)"
  nameWithType: "Pathfinding.<Position>dijkstra(Map<Position> map)"
  fullName: "ai.path.Pathfinding.<Position>dijkstra(Map<Position> map)"
  overload: "ai.path.Pathfinding.dijkstra*"
  type: "Method"
  package: "ai.path"
  summary: "A flexible implementation of the dijkstra pathfinding algorithm. It uses a finite possibly directional weighted graph structure to find the shortest possible path from a given start node to a given target node. This method will find the global shortest possible path, if there is one, but it might be less efficient for large graphs compared to A\\* (a-star)."
  syntax:
    content: "public static Optional<ResultPath<Position>> <Position>dijkstra(Map<Position> map)"
    parameters:
    - id: "map"
      type: "ai.path.Map<Position>"
      description: "a map containing a graph of weighted node references"
    return:
      type: "java.util.Optional<ai.path.ResultPath<Position>>"
      description: "an optional containing the shortest path if there is one"
- uid: "ai.path.Pathfinding.Pathfinding()"
  id: "Pathfinding()"
  parent: "ai.path.Pathfinding"
  langs:
  - "java"
  name: "Pathfinding()"
  nameWithType: "Pathfinding.Pathfinding()"
  fullName: "ai.path.Pathfinding.Pathfinding()"
  overload: "ai.path.Pathfinding.Pathfinding*"
  type: "Constructor"
  package: "ai.path"
  syntax:
    content: "public Pathfinding()"
references:
- uid: "ai.path.Pathfinding.Pathfinding*"
  name: "Pathfinding"
  nameWithType: "Pathfinding.Pathfinding"
  fullName: "ai.path.Pathfinding.Pathfinding"
  package: "ai.path"
- uid: "ai.path.Map<Position>"
  spec.java:
  - uid: "ai.path.Map"
    name: "Map"
    fullName: "ai.path.Map"
  - name: "<"
    fullName: "<"
  - uid: "Position"
    name: "Position"
    fullName: "Position"
  - name: ">"
    fullName: ">"
- uid: "java.util.Optional<ai.path.ResultPath<Position>>"
  spec.java:
  - uid: "java.util.Optional"
    name: "Optional"
    fullName: "java.util.Optional"
  - name: "<"
    fullName: "<"
  - uid: "ai.path.ResultPath"
    name: "ResultPath"
    fullName: "ai.path.ResultPath"
  - name: "<"
    fullName: "<"
  - uid: "Position"
    name: "Position"
    fullName: "Position"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "ai.path.Pathfinding.dijkstra*"
  name: "<Position>dijkstra"
  nameWithType: "Pathfinding.<Position>dijkstra"
  fullName: "ai.path.Pathfinding.<Position>dijkstra"
  package: "ai.path"
- uid: "java.util.function.BiFunction<Position,Position,java.lang.Float>"
  spec.java:
  - uid: "java.util.function.BiFunction"
    name: "BiFunction"
    fullName: "java.util.function.BiFunction"
  - name: "<"
    fullName: "<"
  - uid: "Position"
    name: "Position"
    fullName: "Position"
  - name: ","
    fullName: ","
  - uid: "Position"
    name: "Position"
    fullName: "Position"
  - name: ","
    fullName: ","
  - uid: "java.lang.Float"
    name: "Float"
    fullName: "java.lang.Float"
  - name: ">"
    fullName: ">"
- uid: "ai.path.Pathfinding.astar*"
  name: "<Position>astar"
  nameWithType: "Pathfinding.<Position>astar"
  fullName: "ai.path.Pathfinding.<Position>astar"
  package: "ai.path"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "Position"
  name: "Position"
  nameWithType: "Position"
  fullName: "Position"
- uid: "ai.path.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "ai.path.Map"
- uid: "java.util.Optional"
  name: "Optional"
  nameWithType: "Optional"
  fullName: "java.util.Optional"
- uid: "ai.path.ResultPath"
  name: "ResultPath"
  nameWithType: "ResultPath"
  fullName: "ai.path.ResultPath"
- uid: "Position,Position,java.lang.Float"
  name: "Position,Position,Float"
  nameWithType: "Position,Position,Float"
  fullName: "Position,Position,java.lang.Float"
- uid: "java.util.function.BiFunction"
  name: "BiFunction"
  nameWithType: "BiFunction"
  fullName: "java.util.function.BiFunction"
