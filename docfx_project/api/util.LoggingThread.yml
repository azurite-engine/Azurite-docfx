### YamlMime:ManagedReference
items:
- uid: "util.LoggingThread"
  id: "LoggingThread"
  parent: "util"
  children:
  - "util.LoggingThread.CYCLE"
  - "util.LoggingThread.LOG_NAME"
  - "util.LoggingThread.LoggingThread(java.io.File,int)"
  - "util.LoggingThread.init()"
  - "util.LoggingThread.log(java.lang.String,int)"
  - "util.LoggingThread.run()"
  - "util.LoggingThread.save()"
  - "util.LoggingThread.setLogLevel(int)"
  langs:
  - "java"
  name: "LoggingThread"
  nameWithType: "LoggingThread"
  fullName: "util.LoggingThread"
  type: "Class"
  package: "util"
  syntax:
    content: "public class LoggingThread extends Thread"
  inheritance:
  - "java.lang.Object"
  - "java.lang.Thread"
  inheritedMembers:
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "java.lang.Thread.activeCount()"
  - "java.lang.Thread.checkAccess()"
  - "java.lang.Thread.clone()"
  - "java.lang.Thread.countStackFrames()"
  - "java.lang.Thread.currentThread()"
  - "java.lang.Thread.dumpStack()"
  - "java.lang.Thread.enumerate(java.lang.Thread[])"
  - "java.lang.Thread.getAllStackTraces()"
  - "java.lang.Thread.getContextClassLoader()"
  - "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
  - "java.lang.Thread.getId()"
  - "java.lang.Thread.getName()"
  - "java.lang.Thread.getPriority()"
  - "java.lang.Thread.getStackTrace()"
  - "java.lang.Thread.getState()"
  - "java.lang.Thread.getThreadGroup()"
  - "java.lang.Thread.getUncaughtExceptionHandler()"
  - "java.lang.Thread.holdsLock(java.lang.Object)"
  - "java.lang.Thread.interrupt()"
  - "java.lang.Thread.interrupted()"
  - "java.lang.Thread.isAlive()"
  - "java.lang.Thread.isDaemon()"
  - "java.lang.Thread.isInterrupted()"
  - "java.lang.Thread.join()"
  - "java.lang.Thread.join(long)"
  - "java.lang.Thread.join(long,int)"
  - "java.lang.Thread.onSpinWait()"
  - "java.lang.Thread.resume()"
  - "java.lang.Thread.run()"
  - "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
  - "java.lang.Thread.setDaemon(boolean)"
  - "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
  - "java.lang.Thread.setName(java.lang.String)"
  - "java.lang.Thread.setPriority(int)"
  - "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
  - "java.lang.Thread.sleep(long)"
  - "java.lang.Thread.sleep(long,int)"
  - "java.lang.Thread.start()"
  - "java.lang.Thread.stop()"
  - "java.lang.Thread.suspend()"
  - "java.lang.Thread.toString()"
  - "java.lang.Thread.yield()"
- uid: "util.LoggingThread.CYCLE"
  id: "CYCLE"
  parent: "util.LoggingThread"
  langs:
  - "java"
  name: "CYCLE"
  nameWithType: "LoggingThread.CYCLE"
  fullName: "util.LoggingThread.CYCLE"
  type: "Field"
  package: "util"
  syntax:
    content: "public static int CYCLE"
    return:
      type: "int"
- uid: "util.LoggingThread.LOG_NAME"
  id: "LOG_NAME"
  parent: "util.LoggingThread"
  langs:
  - "java"
  name: "LOG_NAME"
  nameWithType: "LoggingThread.LOG_NAME"
  fullName: "util.LoggingThread.LOG_NAME"
  type: "Field"
  package: "util"
  syntax:
    content: "public static String LOG_NAME"
    return:
      type: "java.lang.String"
- uid: "util.LoggingThread.LoggingThread(java.io.File,int)"
  id: "LoggingThread(java.io.File,int)"
  parent: "util.LoggingThread"
  langs:
  - "java"
  name: "LoggingThread(File path, int logLevel)"
  nameWithType: "LoggingThread.LoggingThread(File path, int logLevel)"
  fullName: "util.LoggingThread.LoggingThread(File path, int logLevel)"
  overload: "util.LoggingThread.LoggingThread*"
  type: "Constructor"
  package: "util"
  syntax:
    content: "public LoggingThread(File path, int logLevel)"
    parameters:
    - id: "path"
      type: "java.io.File"
    - id: "logLevel"
      type: "int"
- uid: "util.LoggingThread.init()"
  id: "init()"
  parent: "util.LoggingThread"
  langs:
  - "java"
  name: "init()"
  nameWithType: "LoggingThread.init()"
  fullName: "util.LoggingThread.init()"
  overload: "util.LoggingThread.init*"
  type: "Method"
  package: "util"
  syntax:
    content: "public boolean init()"
    return:
      type: "boolean"
  exceptions:
  - type: "java.io.IOException"
- uid: "util.LoggingThread.log(java.lang.String,int)"
  id: "log(java.lang.String,int)"
  parent: "util.LoggingThread"
  langs:
  - "java"
  name: "log(String log, int logLevel)"
  nameWithType: "LoggingThread.log(String log, int logLevel)"
  fullName: "util.LoggingThread.log(String log, int logLevel)"
  overload: "util.LoggingThread.log*"
  type: "Method"
  package: "util"
  syntax:
    content: "public void log(String log, int logLevel)"
    parameters:
    - id: "log"
      type: "java.lang.String"
    - id: "logLevel"
      type: "int"
- uid: "util.LoggingThread.run()"
  id: "run()"
  parent: "util.LoggingThread"
  langs:
  - "java"
  name: "run()"
  nameWithType: "LoggingThread.run()"
  fullName: "util.LoggingThread.run()"
  overload: "util.LoggingThread.run*"
  overridden: "java.lang.Thread.run()"
  type: "Method"
  package: "util"
  syntax:
    content: "public void run()"
- uid: "util.LoggingThread.save()"
  id: "save()"
  parent: "util.LoggingThread"
  langs:
  - "java"
  name: "save()"
  nameWithType: "LoggingThread.save()"
  fullName: "util.LoggingThread.save()"
  overload: "util.LoggingThread.save*"
  type: "Method"
  package: "util"
  syntax:
    content: "protected void save()"
- uid: "util.LoggingThread.setLogLevel(int)"
  id: "setLogLevel(int)"
  parent: "util.LoggingThread"
  langs:
  - "java"
  name: "setLogLevel(int logLevel)"
  nameWithType: "LoggingThread.setLogLevel(int logLevel)"
  fullName: "util.LoggingThread.setLogLevel(int logLevel)"
  overload: "util.LoggingThread.setLogLevel*"
  type: "Method"
  package: "util"
  syntax:
    content: "public void setLogLevel(int logLevel)"
    parameters:
    - id: "logLevel"
      type: "int"
references:
- uid: "java.io.File"
  spec.java:
  - uid: "java.io.File"
    name: "File"
    fullName: "java.io.File"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "util.LoggingThread.LoggingThread*"
  name: "LoggingThread"
  nameWithType: "LoggingThread.LoggingThread"
  fullName: "util.LoggingThread.LoggingThread"
  package: "util"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "util.LoggingThread.init*"
  name: "init"
  nameWithType: "LoggingThread.init"
  fullName: "util.LoggingThread.init"
  package: "util"
- uid: "util.LoggingThread.setLogLevel*"
  name: "setLogLevel"
  nameWithType: "LoggingThread.setLogLevel"
  fullName: "util.LoggingThread.setLogLevel"
  package: "util"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "util.LoggingThread.log*"
  name: "log"
  nameWithType: "LoggingThread.log"
  fullName: "util.LoggingThread.log"
  package: "util"
- uid: "util.LoggingThread.save*"
  name: "save"
  nameWithType: "LoggingThread.save"
  fullName: "util.LoggingThread.save"
  package: "util"
- uid: "util.LoggingThread.run*"
  name: "run"
  nameWithType: "LoggingThread.run"
  fullName: "util.LoggingThread.run"
  package: "util"
- uid: "java.lang.Thread"
  name: "Thread"
  nameWithType: "Thread"
  fullName: "java.lang.Thread"
- uid: "java.lang.Thread.toString()"
  name: "Thread.toString()"
  nameWithType: "Thread.toString()"
  fullName: "java.lang.Thread.toString()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Thread.getUncaughtExceptionHandler()"
  name: "Thread.getUncaughtExceptionHandler()"
  nameWithType: "Thread.getUncaughtExceptionHandler()"
  fullName: "java.lang.Thread.getUncaughtExceptionHandler()"
- uid: "java.lang.Thread.isInterrupted()"
  name: "Thread.isInterrupted()"
  nameWithType: "Thread.isInterrupted()"
  fullName: "java.lang.Thread.isInterrupted()"
- uid: "java.lang.Thread.getName()"
  name: "Thread.getName()"
  nameWithType: "Thread.getName()"
  fullName: "java.lang.Thread.getName()"
- uid: "java.lang.Thread.interrupt()"
  name: "Thread.interrupt()"
  nameWithType: "Thread.interrupt()"
  fullName: "java.lang.Thread.interrupt()"
- uid: "java.lang.Thread.countStackFrames()"
  name: "Thread.countStackFrames()"
  nameWithType: "Thread.countStackFrames()"
  fullName: "java.lang.Thread.countStackFrames()"
- uid: "java.lang.Thread.isAlive()"
  name: "Thread.isAlive()"
  nameWithType: "Thread.isAlive()"
  fullName: "java.lang.Thread.isAlive()"
- uid: "java.lang.Thread.getThreadGroup()"
  name: "Thread.getThreadGroup()"
  nameWithType: "Thread.getThreadGroup()"
  fullName: "java.lang.Thread.getThreadGroup()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Thread.getAllStackTraces()"
  name: "Thread.getAllStackTraces()"
  nameWithType: "Thread.getAllStackTraces()"
  fullName: "java.lang.Thread.getAllStackTraces()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Thread.dumpStack()"
  name: "Thread.dumpStack()"
  nameWithType: "Thread.dumpStack()"
  fullName: "java.lang.Thread.dumpStack()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Thread.setDaemon(boolean)"
  name: "Thread.setDaemon(boolean)"
  nameWithType: "Thread.setDaemon(boolean)"
  fullName: "java.lang.Thread.setDaemon(boolean)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Thread.resume()"
  name: "Thread.resume()"
  nameWithType: "Thread.resume()"
  fullName: "java.lang.Thread.resume()"
- uid: "java.lang.Thread.currentThread()"
  name: "Thread.currentThread()"
  nameWithType: "Thread.currentThread()"
  fullName: "java.lang.Thread.currentThread()"
- uid: "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
  name: "Thread.setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)"
  nameWithType: "Thread.setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)"
  fullName: "java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
- uid: "java.lang.Thread.getPriority()"
  name: "Thread.getPriority()"
  nameWithType: "Thread.getPriority()"
  fullName: "java.lang.Thread.getPriority()"
- uid: "java.lang.Thread.activeCount()"
  name: "Thread.activeCount()"
  nameWithType: "Thread.activeCount()"
  fullName: "java.lang.Thread.activeCount()"
- uid: "java.lang.Thread.getStackTrace()"
  name: "Thread.getStackTrace()"
  nameWithType: "Thread.getStackTrace()"
  fullName: "java.lang.Thread.getStackTrace()"
- uid: "java.lang.Thread.sleep(long)"
  name: "Thread.sleep(long)"
  nameWithType: "Thread.sleep(long)"
  fullName: "java.lang.Thread.sleep(long)"
- uid: "java.lang.Thread.setName(java.lang.String)"
  name: "Thread.setName(String)"
  nameWithType: "Thread.setName(String)"
  fullName: "java.lang.Thread.setName(java.lang.String)"
- uid: "java.lang.Thread.yield()"
  name: "Thread.yield()"
  nameWithType: "Thread.yield()"
  fullName: "java.lang.Thread.yield()"
- uid: "java.lang.Thread.getState()"
  name: "Thread.getState()"
  nameWithType: "Thread.getState()"
  fullName: "java.lang.Thread.getState()"
- uid: "java.lang.Thread.join(long)"
  name: "Thread.join(long)"
  nameWithType: "Thread.join(long)"
  fullName: "java.lang.Thread.join(long)"
- uid: "java.lang.Thread.setPriority(int)"
  name: "Thread.setPriority(int)"
  nameWithType: "Thread.setPriority(int)"
  fullName: "java.lang.Thread.setPriority(int)"
- uid: "java.lang.Thread.onSpinWait()"
  name: "Thread.onSpinWait()"
  nameWithType: "Thread.onSpinWait()"
  fullName: "java.lang.Thread.onSpinWait()"
- uid: "java.lang.Thread.getContextClassLoader()"
  name: "Thread.getContextClassLoader()"
  nameWithType: "Thread.getContextClassLoader()"
  fullName: "java.lang.Thread.getContextClassLoader()"
- uid: "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
  name: "Thread.getDefaultUncaughtExceptionHandler()"
  nameWithType: "Thread.getDefaultUncaughtExceptionHandler()"
  fullName: "java.lang.Thread.getDefaultUncaughtExceptionHandler()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Thread.interrupted()"
  name: "Thread.interrupted()"
  nameWithType: "Thread.interrupted()"
  fullName: "java.lang.Thread.interrupted()"
- uid: "java.lang.Thread.holdsLock(java.lang.Object)"
  name: "Thread.holdsLock(Object)"
  nameWithType: "Thread.holdsLock(Object)"
  fullName: "java.lang.Thread.holdsLock(java.lang.Object)"
- uid: "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
  name: "Thread.setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)"
  nameWithType: "Thread.setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler)"
  fullName: "java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler)"
- uid: "java.lang.Thread.join(long,int)"
  name: "Thread.join(long,int)"
  nameWithType: "Thread.join(long,int)"
  fullName: "java.lang.Thread.join(long,int)"
- uid: "java.lang.Thread.run()"
  name: "Thread.run()"
  nameWithType: "Thread.run()"
  fullName: "java.lang.Thread.run()"
- uid: "java.lang.Thread.enumerate(java.lang.Thread[])"
  name: "Thread.enumerate(Thread[])"
  nameWithType: "Thread.enumerate(Thread[])"
  fullName: "java.lang.Thread.enumerate(java.lang.Thread[])"
- uid: "java.lang.Thread.clone()"
  name: "Thread.clone()"
  nameWithType: "Thread.clone()"
  fullName: "java.lang.Thread.clone()"
- uid: "java.lang.Thread.checkAccess()"
  name: "Thread.checkAccess()"
  nameWithType: "Thread.checkAccess()"
  fullName: "java.lang.Thread.checkAccess()"
- uid: "java.lang.Thread.sleep(long,int)"
  name: "Thread.sleep(long,int)"
  nameWithType: "Thread.sleep(long,int)"
  fullName: "java.lang.Thread.sleep(long,int)"
- uid: "java.lang.Thread.join()"
  name: "Thread.join()"
  nameWithType: "Thread.join()"
  fullName: "java.lang.Thread.join()"
- uid: "java.lang.Thread.suspend()"
  name: "Thread.suspend()"
  nameWithType: "Thread.suspend()"
  fullName: "java.lang.Thread.suspend()"
- uid: "java.lang.Thread.start()"
  name: "Thread.start()"
  nameWithType: "Thread.start()"
  fullName: "java.lang.Thread.start()"
- uid: "java.lang.Thread.isDaemon()"
  name: "Thread.isDaemon()"
  nameWithType: "Thread.isDaemon()"
  fullName: "java.lang.Thread.isDaemon()"
- uid: "java.lang.Thread.stop()"
  name: "Thread.stop()"
  nameWithType: "Thread.stop()"
  fullName: "java.lang.Thread.stop()"
- uid: "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
  name: "Thread.setContextClassLoader(ClassLoader)"
  nameWithType: "Thread.setContextClassLoader(ClassLoader)"
  fullName: "java.lang.Thread.setContextClassLoader(java.lang.ClassLoader)"
- uid: "java.lang.Thread.getId()"
  name: "Thread.getId()"
  nameWithType: "Thread.getId()"
  fullName: "java.lang.Thread.getId()"
