### YamlMime:ManagedReference
items:
- uid: "io.xml.XML"
  id: "XML"
  parent: "io.xml"
  children:
  - "io.xml.XML.XML()"
  - "io.xml.XML.parse(byte[])"
  - "io.xml.XML.parse(byte[],java.nio.charset.Charset)"
  - "io.xml.XML.parse(java.lang.String)"
  - "io.xml.XML.parse(java.util.List<io.xml.XMLToken>,int)"
  - "io.xml.XML.readHeader(byte[])"
  - "io.xml.XML.tokenize(java.lang.String)"
  - "io.xml.XML.transformValue(java.lang.String,boolean)"
  langs:
  - "java"
  name: "XML"
  nameWithType: "XML"
  fullName: "io.xml.XML"
  type: "Class"
  package: "io.xml"
  syntax:
    content: "public class XML"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "io.xml.XML.XML()"
  id: "XML()"
  parent: "io.xml.XML"
  langs:
  - "java"
  name: "XML()"
  nameWithType: "XML.XML()"
  fullName: "io.xml.XML.XML()"
  overload: "io.xml.XML.XML*"
  type: "Constructor"
  package: "io.xml"
  syntax:
    content: "public XML()"
- uid: "io.xml.XML.parse(byte[])"
  id: "parse(byte[])"
  parent: "io.xml.XML"
  langs:
  - "java"
  name: "parse(byte[] input)"
  nameWithType: "XML.parse(byte[] input)"
  fullName: "io.xml.XML.parse(byte[] input)"
  overload: "io.xml.XML.parse*"
  type: "Method"
  package: "io.xml"
  syntax:
    content: "public static XMLElement parse(byte[] input)"
    parameters:
    - id: "input"
      type: "byte[]"
    return:
      type: "io.xml.XMLElement"
- uid: "io.xml.XML.parse(byte[],java.nio.charset.Charset)"
  id: "parse(byte[],java.nio.charset.Charset)"
  parent: "io.xml.XML"
  langs:
  - "java"
  name: "parse(byte[] input, Charset charset)"
  nameWithType: "XML.parse(byte[] input, Charset charset)"
  fullName: "io.xml.XML.parse(byte[] input, Charset charset)"
  overload: "io.xml.XML.parse*"
  type: "Method"
  package: "io.xml"
  syntax:
    content: "public static XMLElement parse(byte[] input, Charset charset)"
    parameters:
    - id: "input"
      type: "byte[]"
    - id: "charset"
      type: "java.nio.charset.Charset"
    return:
      type: "io.xml.XMLElement"
- uid: "io.xml.XML.parse(java.lang.String)"
  id: "parse(java.lang.String)"
  parent: "io.xml.XML"
  langs:
  - "java"
  name: "parse(String input)"
  nameWithType: "XML.parse(String input)"
  fullName: "io.xml.XML.parse(String input)"
  overload: "io.xml.XML.parse*"
  type: "Method"
  package: "io.xml"
  syntax:
    content: "public static XMLElement parse(String input)"
    parameters:
    - id: "input"
      type: "java.lang.String"
    return:
      type: "io.xml.XMLElement"
- uid: "io.xml.XML.parse(java.util.List<io.xml.XMLToken>,int)"
  id: "parse(java.util.List<io.xml.XMLToken>,int)"
  parent: "io.xml.XML"
  langs:
  - "java"
  name: "parse(List<XMLToken> tokens, int startingPoint)"
  nameWithType: "XML.parse(List<XMLToken> tokens, int startingPoint)"
  fullName: "io.xml.XML.parse(List<XMLToken> tokens, int startingPoint)"
  overload: "io.xml.XML.parse*"
  type: "Method"
  package: "io.xml"
  syntax:
    content: "public static Pair<XMLElement,Integer> parse(List<XMLToken> tokens, int startingPoint)"
    parameters:
    - id: "tokens"
      type: "java.util.List<io.xml.XMLToken>"
    - id: "startingPoint"
      type: "int"
    return:
      type: "util.Pair<io.xml.XMLElement,java.lang.Integer>"
- uid: "io.xml.XML.readHeader(byte[])"
  id: "readHeader(byte[])"
  parent: "io.xml.XML"
  langs:
  - "java"
  name: "readHeader(byte[] input)"
  nameWithType: "XML.readHeader(byte[] input)"
  fullName: "io.xml.XML.readHeader(byte[] input)"
  overload: "io.xml.XML.readHeader*"
  type: "Method"
  package: "io.xml"
  syntax:
    content: "protected static Charset readHeader(byte[] input)"
    parameters:
    - id: "input"
      type: "byte[]"
    return:
      type: "java.nio.charset.Charset"
- uid: "io.xml.XML.tokenize(java.lang.String)"
  id: "tokenize(java.lang.String)"
  parent: "io.xml.XML"
  langs:
  - "java"
  name: "tokenize(String input)"
  nameWithType: "XML.tokenize(String input)"
  fullName: "io.xml.XML.tokenize(String input)"
  overload: "io.xml.XML.tokenize*"
  type: "Method"
  package: "io.xml"
  syntax:
    content: "protected static List<XMLToken> tokenize(String input)"
    parameters:
    - id: "input"
      type: "java.lang.String"
    return:
      type: "java.util.List<io.xml.XMLToken>"
- uid: "io.xml.XML.transformValue(java.lang.String,boolean)"
  id: "transformValue(java.lang.String,boolean)"
  parent: "io.xml.XML"
  langs:
  - "java"
  name: "transformValue(String value, boolean isRaw)"
  nameWithType: "XML.transformValue(String value, boolean isRaw)"
  fullName: "io.xml.XML.transformValue(String value, boolean isRaw)"
  overload: "io.xml.XML.transformValue*"
  type: "Method"
  package: "io.xml"
  syntax:
    content: "public static String transformValue(String value, boolean isRaw)"
    parameters:
    - id: "value"
      type: "java.lang.String"
    - id: "isRaw"
      type: "boolean"
    return:
      type: "java.lang.String"
references:
- uid: "io.xml.XML.XML*"
  name: "XML"
  nameWithType: "XML.XML"
  fullName: "io.xml.XML.XML"
  package: "io.xml"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "java.nio.charset.Charset"
  spec.java:
  - uid: "java.nio.charset.Charset"
    name: "Charset"
    fullName: "java.nio.charset.Charset"
- uid: "io.xml.XML.readHeader*"
  name: "readHeader"
  nameWithType: "XML.readHeader"
  fullName: "io.xml.XML.readHeader"
  package: "io.xml"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "java.util.List<io.xml.XMLToken>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "io.xml.XMLToken"
    name: "XMLToken"
    fullName: "io.xml.XMLToken"
  - name: ">"
    fullName: ">"
- uid: "io.xml.XML.tokenize*"
  name: "tokenize"
  nameWithType: "XML.tokenize"
  fullName: "io.xml.XML.tokenize"
  package: "io.xml"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "io.xml.XML.transformValue*"
  name: "transformValue"
  nameWithType: "XML.transformValue"
  fullName: "io.xml.XML.transformValue"
  package: "io.xml"
- uid: "io.xml.XMLElement"
  name: "XMLElement"
  nameWithType: "XMLElement"
  fullName: "io.xml.XMLElement"
- uid: "io.xml.XML.parse*"
  name: "parse"
  nameWithType: "XML.parse"
  fullName: "io.xml.XML.parse"
  package: "io.xml"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "util.Pair<io.xml.XMLElement,java.lang.Integer>"
  spec.java:
  - uid: "util.Pair"
    name: "Pair"
    fullName: "util.Pair"
  - name: "<"
    fullName: "<"
  - uid: "io.xml.XMLElement"
    name: "XMLElement"
    fullName: "io.xml.XMLElement"
  - name: ","
    fullName: ","
  - uid: "java.lang.Integer"
    name: "Integer"
    fullName: "java.lang.Integer"
  - name: ">"
    fullName: ">"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "io.xml.XMLToken"
  name: "XMLToken"
  nameWithType: "XMLToken"
  fullName: "io.xml.XMLToken"
- uid: "util.Pair"
  name: "Pair"
  nameWithType: "Pair"
  fullName: "util.Pair"
- uid: "io.xml.XMLElement,java.lang.Integer"
  name: "XMLElement,Integer"
  nameWithType: "XMLElement,Integer"
  fullName: "io.xml.XMLElement,java.lang.Integer"
