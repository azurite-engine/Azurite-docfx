### YamlMime:ManagedReference
items:
- uid: "util.Pair"
  id: "Pair"
  parent: "util"
  children:
  - "util.Pair.<RR>extend(RR)"
  - "util.Pair.Pair()"
  - "util.Pair.Pair(L,R)"
  - "util.Pair.getLeft()"
  - "util.Pair.getRight()"
  - "util.Pair.setLeft(L)"
  - "util.Pair.setRight(R)"
  langs:
  - "java"
  name: "Pair<L,R>"
  nameWithType: "Pair<L,R>"
  fullName: "util.Pair<L,R>"
  type: "Class"
  package: "util"
  summary: "A <xref uid=\"util.Pair\" data-throw-if-not-resolved=\"false\">Pair</xref> is a tupel of two different values with potentially two different types."
  syntax:
    content: "public class Pair<L,R>"
    typeParameters:
    - id: "L"
    - id: "R"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "util.Pair.<RR>extend(RR)"
  id: "<RR>extend(RR)"
  parent: "util.Pair"
  langs:
  - "java"
  name: "<RR>extend(RR right)"
  nameWithType: "Pair<L,R>.<RR>extend(RR right)"
  fullName: "util.Pair<L,R>.<RR>extend(RR right)"
  overload: "util.Pair.extend*"
  type: "Method"
  package: "util"
  summary: "Extends this <xref uid=\"util.Pair\" data-throw-if-not-resolved=\"false\">Pair</xref> with a third value to a triple."
  syntax:
    content: "public Triple<L,R,RR> <RR>extend(RR right)"
    parameters:
    - id: "right"
      type: "RR"
    return:
      type: "util.Triple<L,R,RR>"
- uid: "util.Pair.Pair()"
  id: "Pair()"
  parent: "util.Pair"
  langs:
  - "java"
  name: "Pair()"
  nameWithType: "Pair<L,R>.Pair()"
  fullName: "util.Pair<L,R>.Pair()"
  overload: "util.Pair.Pair*"
  type: "Constructor"
  package: "util"
  summary: "Create a <xref uid=\"util.Pair\" data-throw-if-not-resolved=\"false\">Pair</xref> with no values."
  syntax:
    content: "public Pair()"
- uid: "util.Pair.Pair(L,R)"
  id: "Pair(L,R)"
  parent: "util.Pair"
  langs:
  - "java"
  name: "Pair(L left, R right)"
  nameWithType: "Pair<L,R>.Pair(L left, R right)"
  fullName: "util.Pair<L,R>.Pair(L left, R right)"
  overload: "util.Pair.Pair*"
  type: "Constructor"
  package: "util"
  summary: "Create a <xref uid=\"util.Pair\" data-throw-if-not-resolved=\"false\">Pair</xref> of two values."
  syntax:
    content: "public Pair(L left, R right)"
    parameters:
    - id: "left"
      type: "L"
      description: "first value"
    - id: "right"
      type: "R"
      description: "second value"
- uid: "util.Pair.getLeft()"
  id: "getLeft()"
  parent: "util.Pair"
  langs:
  - "java"
  name: "getLeft()"
  nameWithType: "Pair<L,R>.getLeft()"
  fullName: "util.Pair<L,R>.getLeft()"
  overload: "util.Pair.getLeft*"
  type: "Method"
  package: "util"
  syntax:
    content: "public L getLeft()"
    return:
      type: "L"
- uid: "util.Pair.getRight()"
  id: "getRight()"
  parent: "util.Pair"
  langs:
  - "java"
  name: "getRight()"
  nameWithType: "Pair<L,R>.getRight()"
  fullName: "util.Pair<L,R>.getRight()"
  overload: "util.Pair.getRight*"
  type: "Method"
  package: "util"
  syntax:
    content: "public R getRight()"
    return:
      type: "R"
- uid: "util.Pair.setLeft(L)"
  id: "setLeft(L)"
  parent: "util.Pair"
  langs:
  - "java"
  name: "setLeft(L left)"
  nameWithType: "Pair<L,R>.setLeft(L left)"
  fullName: "util.Pair<L,R>.setLeft(L left)"
  overload: "util.Pair.setLeft*"
  type: "Method"
  package: "util"
  syntax:
    content: "public void setLeft(L left)"
    parameters:
    - id: "left"
      type: "L"
- uid: "util.Pair.setRight(R)"
  id: "setRight(R)"
  parent: "util.Pair"
  langs:
  - "java"
  name: "setRight(R right)"
  nameWithType: "Pair<L,R>.setRight(R right)"
  fullName: "util.Pair<L,R>.setRight(R right)"
  overload: "util.Pair.setRight*"
  type: "Method"
  package: "util"
  syntax:
    content: "public void setRight(R right)"
    parameters:
    - id: "right"
      type: "R"
references:
- uid: "L"
  spec.java:
  - uid: "L"
    name: "L"
    fullName: "L"
- uid: "R"
  spec.java:
  - uid: "R"
    name: "R"
    fullName: "R"
- uid: "util.Pair.Pair*"
  name: "Pair"
  nameWithType: "Pair<L,R>.Pair"
  fullName: "util.Pair<L,R>.Pair"
  package: "util"
- uid: "util.Pair.getLeft*"
  name: "getLeft"
  nameWithType: "Pair<L,R>.getLeft"
  fullName: "util.Pair<L,R>.getLeft"
  package: "util"
- uid: "util.Pair.setLeft*"
  name: "setLeft"
  nameWithType: "Pair<L,R>.setLeft"
  fullName: "util.Pair<L,R>.setLeft"
  package: "util"
- uid: "util.Pair.getRight*"
  name: "getRight"
  nameWithType: "Pair<L,R>.getRight"
  fullName: "util.Pair<L,R>.getRight"
  package: "util"
- uid: "util.Pair.setRight*"
  name: "setRight"
  nameWithType: "Pair<L,R>.setRight"
  fullName: "util.Pair<L,R>.setRight"
  package: "util"
- uid: "RR"
  spec.java:
  - uid: "RR"
    name: "RR"
    fullName: "RR"
- uid: "util.Triple<L,R,RR>"
  spec.java:
  - uid: "util.Triple"
    name: "Triple"
    fullName: "util.Triple"
  - name: "<"
    fullName: "<"
  - uid: "L"
    name: "L"
    fullName: "L"
  - name: ","
    fullName: ","
  - uid: "R"
    name: "R"
    fullName: "R"
  - name: ","
    fullName: ","
  - uid: "RR"
    name: "RR"
    fullName: "RR"
  - name: ">"
    fullName: ">"
- uid: "util.Pair.extend*"
  name: "<RR>extend"
  nameWithType: "Pair<L,R>.<RR>extend"
  fullName: "util.Pair<L,R>.<RR>extend"
  package: "util"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "util.Triple"
  name: "Triple"
  nameWithType: "Triple"
  fullName: "util.Triple"
- uid: "L,R,RR"
  name: "L,R,RR"
  nameWithType: "L,R,RR"
  fullName: "L,R,RR"
