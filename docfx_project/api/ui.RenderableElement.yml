### YamlMime:ManagedReference
items:
- uid: "ui.RenderableElement"
  id: "RenderableElement"
  parent: "ui"
  children:
  - "ui.RenderableElement.RenderableElement(graphics.Color,ui.Frame)"
  - "ui.RenderableElement.RenderableElement(graphics.Sprite,ui.Frame)"
  - "ui.RenderableElement.RenderableElement(java.lang.String,ui.Frame)"
  - "ui.RenderableElement.RenderableElement(org.joml.Vector4f,ui.Frame)"
  - "ui.RenderableElement.color"
  - "ui.RenderableElement.defaultColor"
  - "ui.RenderableElement.getColor()"
  - "ui.RenderableElement.getColorVector()"
  - "ui.RenderableElement.getRenderFrame()"
  - "ui.RenderableElement.getTexCoords()"
  - "ui.RenderableElement.getTexture()"
  - "ui.RenderableElement.hoverColor"
  - "ui.RenderableElement.setAlpha(float)"
  - "ui.RenderableElement.setColor(graphics.Color)"
  - "ui.RenderableElement.setColor(org.joml.Vector4f)"
  - "ui.RenderableElement.setRenderFrame(ui.Frame)"
  - "ui.RenderableElement.setSize(org.joml.Vector2f)"
  - "ui.RenderableElement.setSprite(graphics.Sprite)"
  - "ui.RenderableElement.setTexture(graphics.Texture)"
  - "ui.RenderableElement.start()"
  - "ui.RenderableElement.tintColor"
  - "ui.RenderableElement.update(float)"
  langs:
  - "java"
  name: "RenderableElement"
  nameWithType: "RenderableElement"
  fullName: "ui.RenderableElement"
  type: "Class"
  package: "ui"
  summary: "UIComponentRenderer is the renderable part of a UI component it can contain a solid color, a semi-transparent color, or a texture. Sprites can be tinted by the color value."
  syntax:
    content: "public class RenderableElement extends Element"
  inheritance:
  - "java.lang.Object"
  - "ui.Element"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "ui.Element.draw()"
  - "ui.Element.getCursor()"
  - "ui.Element.getEnabled()"
  - "ui.Element.getEventHandler()"
  - "ui.Element.getFocused()"
  - "ui.Element.getFont()"
  - "ui.Element.getFrame()"
  - "ui.Element.getHeight()"
  - "ui.Element.getLayoutInfo()"
  - "ui.Element.getParent()"
  - "ui.Element.getVisible()"
  - "ui.Element.getWidth()"
  - "ui.Element.getX()"
  - "ui.Element.getY()"
  - "ui.Element.hasEventHandler()"
  - "ui.Element.isEnabled()"
  - "ui.Element.isFocused()"
  - "ui.Element.isMouseOnThis()"
  - "ui.Element.isVisible()"
  - "ui.Element.postUpdate()"
  - "ui.Element.requestFocus()"
  - "ui.Element.setCursor(int)"
  - "ui.Element.setEnabled(boolean)"
  - "ui.Element.setFocused(boolean)"
  - "ui.Element.setFont(ui.fonts.Font)"
  - "ui.Element.setLayoutInfo(java.lang.Object)"
  - "ui.Element.setParent(ui.Container)"
  - "ui.Element.setVisible(boolean)"
  - "ui.Element.update()"
  - "ui.Element.zIndex()"
- uid: "ui.RenderableElement.RenderableElement(graphics.Color,ui.Frame)"
  id: "RenderableElement(graphics.Color,ui.Frame)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "RenderableElement(Color color, Frame frame)"
  nameWithType: "RenderableElement.RenderableElement(Color color, Frame frame)"
  fullName: "ui.RenderableElement.RenderableElement(Color color, Frame frame)"
  overload: "ui.RenderableElement.RenderableElement*"
  type: "Constructor"
  package: "ui"
  summary: "Create the spriteRenderer using a Color object, no sprite."
  syntax:
    content: "public RenderableElement(Color color, Frame frame)"
    parameters:
    - id: "color"
      type: "graphics.Color"
      description: "of type Color, range from 0-255"
    - id: "frame"
      type: "ui.Frame"
- uid: "ui.RenderableElement.RenderableElement(graphics.Sprite,ui.Frame)"
  id: "RenderableElement(graphics.Sprite,ui.Frame)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "RenderableElement(Sprite sprite, Frame frame)"
  nameWithType: "RenderableElement.RenderableElement(Sprite sprite, Frame frame)"
  fullName: "ui.RenderableElement.RenderableElement(Sprite sprite, Frame frame)"
  overload: "ui.RenderableElement.RenderableElement*"
  type: "Constructor"
  package: "ui"
  summary: "Create a spriteRenderer using a sprite that is already loaded. Default tint color is white (no tinting visible)."
  syntax:
    content: "public RenderableElement(Sprite sprite, Frame frame)"
    parameters:
    - id: "sprite"
      type: "graphics.Sprite"
    - id: "frame"
      type: "ui.Frame"
- uid: "ui.RenderableElement.RenderableElement(java.lang.String,ui.Frame)"
  id: "RenderableElement(java.lang.String,ui.Frame)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "RenderableElement(String path, Frame frame)"
  nameWithType: "RenderableElement.RenderableElement(String path, Frame frame)"
  fullName: "ui.RenderableElement.RenderableElement(String path, Frame frame)"
  overload: "ui.RenderableElement.RenderableElement*"
  type: "Constructor"
  package: "ui"
  summary: "Create a spriteRenderer using an image from the fileSystem."
  syntax:
    content: "public RenderableElement(String path, Frame frame)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "to the image (ie. \"src/assets/images/pepper.png\")"
    - id: "frame"
      type: "ui.Frame"
- uid: "ui.RenderableElement.RenderableElement(org.joml.Vector4f,ui.Frame)"
  id: "RenderableElement(org.joml.Vector4f,ui.Frame)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "RenderableElement(Vector4f color, Frame frame)"
  nameWithType: "RenderableElement.RenderableElement(Vector4f color, Frame frame)"
  fullName: "ui.RenderableElement.RenderableElement(Vector4f color, Frame frame)"
  overload: "ui.RenderableElement.RenderableElement*"
  type: "Constructor"
  package: "ui"
  summary: "Create the spriteRenderer using a color vector, no sprite."
  syntax:
    content: "public RenderableElement(Vector4f color, Frame frame)"
    parameters:
    - id: "color"
      type: "org.joml.Vector4f"
      description: "of type JOML Vector4f, range from 0-1"
    - id: "frame"
      type: "ui.Frame"
- uid: "ui.RenderableElement.color"
  id: "color"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "color"
  nameWithType: "RenderableElement.color"
  fullName: "ui.RenderableElement.color"
  type: "Field"
  package: "ui"
  syntax:
    content: "protected Vector4f color"
    return:
      type: "org.joml.Vector4f"
- uid: "ui.RenderableElement.defaultColor"
  id: "defaultColor"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "defaultColor"
  nameWithType: "RenderableElement.defaultColor"
  fullName: "ui.RenderableElement.defaultColor"
  type: "Field"
  package: "ui"
  syntax:
    content: "protected Vector4f defaultColor"
    return:
      type: "org.joml.Vector4f"
- uid: "ui.RenderableElement.getColor()"
  id: "getColor()"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "getColor()"
  nameWithType: "RenderableElement.getColor()"
  fullName: "ui.RenderableElement.getColor()"
  overload: "ui.RenderableElement.getColor*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public Color getColor()"
    return:
      type: "graphics.Color"
      description: "type Color in standard RGBA form in the range 0-255"
- uid: "ui.RenderableElement.getColorVector()"
  id: "getColorVector()"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "getColorVector()"
  nameWithType: "RenderableElement.getColorVector()"
  fullName: "ui.RenderableElement.getColorVector()"
  overload: "ui.RenderableElement.getColorVector*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public Vector4f getColorVector()"
    return:
      type: "org.joml.Vector4f"
      description: "a Vector4f containing the normalized (0-1) color values (R, G, B, and A)"
- uid: "ui.RenderableElement.getRenderFrame()"
  id: "getRenderFrame()"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "getRenderFrame()"
  nameWithType: "RenderableElement.getRenderFrame()"
  fullName: "ui.RenderableElement.getRenderFrame()"
  overload: "ui.RenderableElement.getRenderFrame*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public Frame getRenderFrame()"
    return:
      type: "ui.Frame"
- uid: "ui.RenderableElement.getTexCoords()"
  id: "getTexCoords()"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "getTexCoords()"
  nameWithType: "RenderableElement.getTexCoords()"
  fullName: "ui.RenderableElement.getTexCoords()"
  overload: "ui.RenderableElement.getTexCoords*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public Vector2f[] getTexCoords()"
    return:
      type: "org.joml.Vector2f[]"
      description: "Vector2f array of the UV coordinates of the sprite if applicable."
- uid: "ui.RenderableElement.getTexture()"
  id: "getTexture()"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "getTexture()"
  nameWithType: "RenderableElement.getTexture()"
  fullName: "ui.RenderableElement.getTexture()"
  overload: "ui.RenderableElement.getTexture*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public Texture getTexture()"
    return:
      type: "graphics.Texture"
      description: "type Texture of the sprite if applicable."
- uid: "ui.RenderableElement.hoverColor"
  id: "hoverColor"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "hoverColor"
  nameWithType: "RenderableElement.hoverColor"
  fullName: "ui.RenderableElement.hoverColor"
  type: "Field"
  package: "ui"
  syntax:
    content: "public Vector4f hoverColor"
    return:
      type: "org.joml.Vector4f"
- uid: "ui.RenderableElement.setAlpha(float)"
  id: "setAlpha(float)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "setAlpha(float a)"
  nameWithType: "RenderableElement.setAlpha(float a)"
  fullName: "ui.RenderableElement.setAlpha(float a)"
  overload: "ui.RenderableElement.setAlpha*"
  type: "Method"
  package: "ui"
  summary: "Change the alpha/opacity of the sprite and/or color"
  syntax:
    content: "public void setAlpha(float a)"
    parameters:
    - id: "a"
      type: "float"
      description: "alpha/opacity"
- uid: "ui.RenderableElement.setColor(graphics.Color)"
  id: "setColor(graphics.Color)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "setColor(Color color)"
  nameWithType: "RenderableElement.setColor(Color color)"
  fullName: "ui.RenderableElement.setColor(Color color)"
  overload: "ui.RenderableElement.setColor*"
  type: "Method"
  package: "ui"
  summary: "Change the color by passing a Color object, converting it to a normalized Vector4f."
  syntax:
    content: "public void setColor(Color color)"
    parameters:
    - id: "color"
      type: "graphics.Color"
      description: "should be in range of 0-255"
- uid: "ui.RenderableElement.setColor(org.joml.Vector4f)"
  id: "setColor(org.joml.Vector4f)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "setColor(Vector4f color)"
  nameWithType: "RenderableElement.setColor(Vector4f color)"
  fullName: "ui.RenderableElement.setColor(Vector4f color)"
  overload: "ui.RenderableElement.setColor*"
  type: "Method"
  package: "ui"
  summary: "Change the color by passing a Vector4f"
  syntax:
    content: "public void setColor(Vector4f color)"
    parameters:
    - id: "color"
      type: "org.joml.Vector4f"
      description: "vector, values should be in the range of 0-1"
- uid: "ui.RenderableElement.setRenderFrame(ui.Frame)"
  id: "setRenderFrame(ui.Frame)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "setRenderFrame(Frame frame)"
  nameWithType: "RenderableElement.setRenderFrame(Frame frame)"
  fullName: "ui.RenderableElement.setRenderFrame(Frame frame)"
  overload: "ui.RenderableElement.setRenderFrame*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public void setRenderFrame(Frame frame)"
    parameters:
    - id: "frame"
      type: "ui.Frame"
- uid: "ui.RenderableElement.setSize(org.joml.Vector2f)"
  id: "setSize(org.joml.Vector2f)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "setSize(Vector2f size)"
  nameWithType: "RenderableElement.setSize(Vector2f size)"
  fullName: "ui.RenderableElement.setSize(Vector2f size)"
  overload: "ui.RenderableElement.setSize*"
  type: "Method"
  package: "ui"
  syntax:
    content: "public void setSize(Vector2f size)"
    parameters:
    - id: "size"
      type: "org.joml.Vector2f"
- uid: "ui.RenderableElement.setSprite(graphics.Sprite)"
  id: "setSprite(graphics.Sprite)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "setSprite(Sprite sprite)"
  nameWithType: "RenderableElement.setSprite(Sprite sprite)"
  fullName: "ui.RenderableElement.setSprite(Sprite sprite)"
  overload: "ui.RenderableElement.setSprite*"
  type: "Method"
  package: "ui"
  summary: "Change the sprite contained in the SpriteRenderer Component."
  syntax:
    content: "public void setSprite(Sprite sprite)"
    parameters:
    - id: "sprite"
      type: "graphics.Sprite"
- uid: "ui.RenderableElement.setTexture(graphics.Texture)"
  id: "setTexture(graphics.Texture)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "setTexture(Texture texture)"
  nameWithType: "RenderableElement.setTexture(Texture texture)"
  fullName: "ui.RenderableElement.setTexture(Texture texture)"
  overload: "ui.RenderableElement.setTexture*"
  type: "Method"
  package: "ui"
  summary: "Set the texture of the Sprite if required."
  syntax:
    content: "public void setTexture(Texture texture)"
    parameters:
    - id: "texture"
      type: "graphics.Texture"
      description: "the new texture of this sprite"
- uid: "ui.RenderableElement.start()"
  id: "start()"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "start()"
  nameWithType: "RenderableElement.start()"
  fullName: "ui.RenderableElement.start()"
  overload: "ui.RenderableElement.start*"
  type: "Method"
  package: "ui"
  summary: "Initialize the Element, called once after creation."
  syntax:
    content: "public void start()"
- uid: "ui.RenderableElement.tintColor"
  id: "tintColor"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "tintColor"
  nameWithType: "RenderableElement.tintColor"
  fullName: "ui.RenderableElement.tintColor"
  type: "Field"
  package: "ui"
  syntax:
    content: "public Vector4f tintColor"
    return:
      type: "org.joml.Vector4f"
- uid: "ui.RenderableElement.update(float)"
  id: "update(float)"
  parent: "ui.RenderableElement"
  langs:
  - "java"
  name: "update(float dt)"
  nameWithType: "RenderableElement.update(float dt)"
  fullName: "ui.RenderableElement.update(float dt)"
  overload: "ui.RenderableElement.update*"
  type: "Method"
  package: "ui"
  summary: "Update method called every frame by parent"
  syntax:
    content: "public void update(float dt)"
    parameters:
    - id: "dt"
      type: "float"
      description: "Engine.deltaTime"
references:
- uid: "org.joml.Vector4f"
  spec.java:
  - uid: "org.joml.Vector4f"
    name: "Vector4f"
    fullName: "org.joml.Vector4f"
- uid: "ui.Frame"
  name: "Frame"
  nameWithType: "Frame"
  fullName: "ui.Frame"
- uid: "ui.RenderableElement.RenderableElement*"
  name: "RenderableElement"
  nameWithType: "RenderableElement.RenderableElement"
  fullName: "ui.RenderableElement.RenderableElement"
  package: "ui"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "graphics.Sprite"
  name: "Sprite"
  nameWithType: "Sprite"
  fullName: "graphics.Sprite"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "ui.RenderableElement.setRenderFrame*"
  name: "setRenderFrame"
  nameWithType: "RenderableElement.setRenderFrame"
  fullName: "ui.RenderableElement.setRenderFrame"
  package: "ui"
- uid: "ui.RenderableElement.getRenderFrame*"
  name: "getRenderFrame"
  nameWithType: "RenderableElement.getRenderFrame"
  fullName: "ui.RenderableElement.getRenderFrame"
  package: "ui"
- uid: "ui.RenderableElement.start*"
  name: "start"
  nameWithType: "RenderableElement.start"
  fullName: "ui.RenderableElement.start"
  package: "ui"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "ui.RenderableElement.update*"
  name: "update"
  nameWithType: "RenderableElement.update"
  fullName: "ui.RenderableElement.update"
  package: "ui"
- uid: "graphics.Texture"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
- uid: "ui.RenderableElement.getTexture*"
  name: "getTexture"
  nameWithType: "RenderableElement.getTexture"
  fullName: "ui.RenderableElement.getTexture"
  package: "ui"
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "ui.RenderableElement.setSize*"
  name: "setSize"
  nameWithType: "RenderableElement.setSize"
  fullName: "ui.RenderableElement.setSize"
  package: "ui"
- uid: "ui.RenderableElement.setTexture*"
  name: "setTexture"
  nameWithType: "RenderableElement.setTexture"
  fullName: "ui.RenderableElement.setTexture"
  package: "ui"
- uid: "org.joml.Vector2f[]"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
  - name: "[]"
    fullName: "[]"
- uid: "ui.RenderableElement.getTexCoords*"
  name: "getTexCoords"
  nameWithType: "RenderableElement.getTexCoords"
  fullName: "ui.RenderableElement.getTexCoords"
  package: "ui"
- uid: "ui.RenderableElement.getColorVector*"
  name: "getColorVector"
  nameWithType: "RenderableElement.getColorVector"
  fullName: "ui.RenderableElement.getColorVector"
  package: "ui"
- uid: "ui.RenderableElement.getColor*"
  name: "getColor"
  nameWithType: "RenderableElement.getColor"
  fullName: "ui.RenderableElement.getColor"
  package: "ui"
- uid: "ui.RenderableElement.setColor*"
  name: "setColor"
  nameWithType: "RenderableElement.setColor"
  fullName: "ui.RenderableElement.setColor"
  package: "ui"
- uid: "ui.RenderableElement.setAlpha*"
  name: "setAlpha"
  nameWithType: "RenderableElement.setAlpha"
  fullName: "ui.RenderableElement.setAlpha"
  package: "ui"
- uid: "ui.RenderableElement.setSprite*"
  name: "setSprite"
  nameWithType: "RenderableElement.setSprite"
  fullName: "ui.RenderableElement.setSprite"
  package: "ui"
- uid: "ui.Element"
  name: "Element"
  nameWithType: "Element"
  fullName: "ui.Element"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "ui.Element.setParent(ui.Container)"
  name: "Element.setParent(Container)"
  nameWithType: "Element.setParent(Container)"
  fullName: "ui.Element.setParent(ui.Container)"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "ui.Element.isFocused()"
  name: "Element.isFocused()"
  nameWithType: "Element.isFocused()"
  fullName: "ui.Element.isFocused()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "ui.Element.getLayoutInfo()"
  name: "Element.getLayoutInfo()"
  nameWithType: "Element.getLayoutInfo()"
  fullName: "ui.Element.getLayoutInfo()"
- uid: "ui.Element.getY()"
  name: "Element.getY()"
  nameWithType: "Element.getY()"
  fullName: "ui.Element.getY()"
- uid: "ui.Element.getCursor()"
  name: "Element.getCursor()"
  nameWithType: "Element.getCursor()"
  fullName: "ui.Element.getCursor()"
- uid: "ui.Element.isEnabled()"
  name: "Element.isEnabled()"
  nameWithType: "Element.isEnabled()"
  fullName: "ui.Element.isEnabled()"
- uid: "ui.Element.getWidth()"
  name: "Element.getWidth()"
  nameWithType: "Element.getWidth()"
  fullName: "ui.Element.getWidth()"
- uid: "ui.Element.setFocused(boolean)"
  name: "Element.setFocused(boolean)"
  nameWithType: "Element.setFocused(boolean)"
  fullName: "ui.Element.setFocused(boolean)"
- uid: "ui.Element.getHeight()"
  name: "Element.getHeight()"
  nameWithType: "Element.getHeight()"
  fullName: "ui.Element.getHeight()"
- uid: "ui.Element.zIndex()"
  name: "Element.zIndex()"
  nameWithType: "Element.zIndex()"
  fullName: "ui.Element.zIndex()"
- uid: "ui.Element.getX()"
  name: "Element.getX()"
  nameWithType: "Element.getX()"
  fullName: "ui.Element.getX()"
- uid: "ui.Element.setFont(ui.fonts.Font)"
  name: "Element.setFont(Font)"
  nameWithType: "Element.setFont(Font)"
  fullName: "ui.Element.setFont(ui.fonts.Font)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "ui.Element.setVisible(boolean)"
  name: "Element.setVisible(boolean)"
  nameWithType: "Element.setVisible(boolean)"
  fullName: "ui.Element.setVisible(boolean)"
- uid: "ui.Element.update()"
  name: "Element.update()"
  nameWithType: "Element.update()"
  fullName: "ui.Element.update()"
- uid: "ui.Element.setCursor(int)"
  name: "Element.setCursor(int)"
  nameWithType: "Element.setCursor(int)"
  fullName: "ui.Element.setCursor(int)"
- uid: "ui.Element.getParent()"
  name: "Element.getParent()"
  nameWithType: "Element.getParent()"
  fullName: "ui.Element.getParent()"
- uid: "ui.Element.requestFocus()"
  name: "Element.requestFocus()"
  nameWithType: "Element.requestFocus()"
  fullName: "ui.Element.requestFocus()"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "ui.Element.hasEventHandler()"
  name: "Element.hasEventHandler()"
  nameWithType: "Element.hasEventHandler()"
  fullName: "ui.Element.hasEventHandler()"
- uid: "ui.Element.postUpdate()"
  name: "Element.postUpdate()"
  nameWithType: "Element.postUpdate()"
  fullName: "ui.Element.postUpdate()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "ui.Element.getFocused()"
  name: "Element.getFocused()"
  nameWithType: "Element.getFocused()"
  fullName: "ui.Element.getFocused()"
- uid: "ui.Element.isMouseOnThis()"
  name: "Element.isMouseOnThis()"
  nameWithType: "Element.isMouseOnThis()"
  fullName: "ui.Element.isMouseOnThis()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "ui.Element.setLayoutInfo(java.lang.Object)"
  name: "Element.setLayoutInfo(Object)"
  nameWithType: "Element.setLayoutInfo(Object)"
  fullName: "ui.Element.setLayoutInfo(java.lang.Object)"
- uid: "ui.Element.getFont()"
  name: "Element.getFont()"
  nameWithType: "Element.getFont()"
  fullName: "ui.Element.getFont()"
- uid: "ui.Element.getEventHandler()"
  name: "Element.getEventHandler()"
  nameWithType: "Element.getEventHandler()"
  fullName: "ui.Element.getEventHandler()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ui.Element.getVisible()"
  name: "Element.getVisible()"
  nameWithType: "Element.getVisible()"
  fullName: "ui.Element.getVisible()"
- uid: "ui.Element.getEnabled()"
  name: "Element.getEnabled()"
  nameWithType: "Element.getEnabled()"
  fullName: "ui.Element.getEnabled()"
- uid: "ui.Element.draw()"
  name: "Element.draw()"
  nameWithType: "Element.draw()"
  fullName: "ui.Element.draw()"
- uid: "ui.Element.isVisible()"
  name: "Element.isVisible()"
  nameWithType: "Element.isVisible()"
  fullName: "ui.Element.isVisible()"
- uid: "ui.Element.setEnabled(boolean)"
  name: "Element.setEnabled(boolean)"
  nameWithType: "Element.setEnabled(boolean)"
  fullName: "ui.Element.setEnabled(boolean)"
- uid: "ui.Element.getFrame()"
  name: "Element.getFrame()"
  nameWithType: "Element.getFrame()"
  fullName: "ui.Element.getFrame()"
