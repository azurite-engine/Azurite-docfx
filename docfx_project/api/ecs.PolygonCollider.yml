### YamlMime:ManagedReference
items:
- uid: "ecs.PolygonCollider"
  id: "PolygonCollider"
  parent: "ecs"
  children:
  - "ecs.PolygonCollider.PolygonCollider(physics.collision.shape.PrimitiveShape)"
  - "ecs.PolygonCollider.PolygonCollider(physics.collision.shape.PrimitiveShape,boolean)"
  - "ecs.PolygonCollider.addTag(java.lang.String)"
  - "ecs.PolygonCollider.canCollideWith(physics.collision.Collider)"
  - "ecs.PolygonCollider.detectCollision(physics.collision.Collider)"
  - "ecs.PolygonCollider.getShape()"
  - "ecs.PolygonCollider.hasMask(int)"
  - "ecs.PolygonCollider.hasTags()"
  - "ecs.PolygonCollider.isOnLayer(int)"
  - "ecs.PolygonCollider.layer(int...)"
  - "ecs.PolygonCollider.layers()"
  - "ecs.PolygonCollider.mask()"
  - "ecs.PolygonCollider.mask(int...)"
  - "ecs.PolygonCollider.matchTags(physics.collision.Collider)"
  - "ecs.PolygonCollider.passive()"
  - "ecs.PolygonCollider.removeTag(java.lang.String)"
  - "ecs.PolygonCollider.setLayer(int,boolean)"
  - "ecs.PolygonCollider.setMask(int,boolean)"
  - "ecs.PolygonCollider.setShape(physics.collision.shape.PrimitiveShape)"
  - "ecs.PolygonCollider.start()"
  - "ecs.PolygonCollider.tags()"
  - "ecs.PolygonCollider.update(float)"
  langs:
  - "java"
  name: "PolygonCollider"
  nameWithType: "PolygonCollider"
  fullName: "ecs.PolygonCollider"
  type: "Class"
  package: "ecs"
  summary: "A polygon collider for a <xref uid=\"ecs.GameObject\" data-throw-if-not-resolved=\"false\">GameObject</xref>. Collision detection uses GJK in <xref uid=\"util.MathUtils.gjksmCollision(physics.collision.shape.PrimitiveShape,physics.collision.shape.PrimitiveShape)\" data-throw-if-not-resolved=\"false\">MathUtils#gjksmCollision(PrimitiveShape, PrimitiveShape)</xref>. Must not be mixed with other colliders."
  syntax:
    content: "public class PolygonCollider extends Component implements Collider"
  inheritance:
  - "java.lang.Object"
  - "ecs.Component"
  implements:
  - "physics.collision.Collider"
  inheritedMembers:
  - "ecs.Component.compareTo(ecs.Component)"
  - "ecs.Component.debug()"
  - "ecs.Component.position()"
  - "ecs.Component.remove()"
  - "ecs.Component.setPosition(org.joml.Vector2f)"
  - "ecs.Component.start()"
  - "ecs.Component.update(float)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ecs.PolygonCollider.PolygonCollider(physics.collision.shape.PrimitiveShape)"
  id: "PolygonCollider(physics.collision.shape.PrimitiveShape)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "PolygonCollider(PrimitiveShape shape)"
  nameWithType: "PolygonCollider.PolygonCollider(PrimitiveShape shape)"
  fullName: "ecs.PolygonCollider.PolygonCollider(PrimitiveShape shape)"
  overload: "ecs.PolygonCollider.PolygonCollider*"
  type: "Constructor"
  package: "ecs"
  syntax:
    content: "public PolygonCollider(PrimitiveShape shape)"
    parameters:
    - id: "shape"
      type: "physics.collision.shape.PrimitiveShape"
- uid: "ecs.PolygonCollider.PolygonCollider(physics.collision.shape.PrimitiveShape,boolean)"
  id: "PolygonCollider(physics.collision.shape.PrimitiveShape,boolean)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "PolygonCollider(PrimitiveShape shape, boolean passive)"
  nameWithType: "PolygonCollider.PolygonCollider(PrimitiveShape shape, boolean passive)"
  fullName: "ecs.PolygonCollider.PolygonCollider(PrimitiveShape shape, boolean passive)"
  overload: "ecs.PolygonCollider.PolygonCollider*"
  type: "Constructor"
  package: "ecs"
  syntax:
    content: "public PolygonCollider(PrimitiveShape shape, boolean passive)"
    parameters:
    - id: "shape"
      type: "physics.collision.shape.PrimitiveShape"
    - id: "passive"
      type: "boolean"
- uid: "ecs.PolygonCollider.addTag(java.lang.String)"
  id: "addTag(java.lang.String)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "addTag(String tag)"
  nameWithType: "PolygonCollider.addTag(String tag)"
  fullName: "ecs.PolygonCollider.addTag(String tag)"
  overload: "ecs.PolygonCollider.addTag*"
  type: "Method"
  package: "ecs"
  summary: "Adds a tag to this collider, making it a tagged collider if it isnt already one."
  syntax:
    content: "public void addTag(String tag)"
    parameters:
    - id: "tag"
      type: "java.lang.String"
- uid: "ecs.PolygonCollider.canCollideWith(physics.collision.Collider)"
  id: "canCollideWith(physics.collision.Collider)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "canCollideWith(Collider other)"
  nameWithType: "PolygonCollider.canCollideWith(Collider other)"
  fullName: "ecs.PolygonCollider.canCollideWith(Collider other)"
  overload: "ecs.PolygonCollider.canCollideWith*"
  type: "Method"
  package: "ecs"
  summary: "Determines whether a collider could potentially intersect with another collider ONLY by their collision layers. This method can be considered part of the broad phase of collision detection."
  syntax:
    content: "public boolean canCollideWith(Collider other)"
    parameters:
    - id: "other"
      type: "physics.collision.Collider"
    return:
      type: "boolean"
- uid: "ecs.PolygonCollider.detectCollision(physics.collision.Collider)"
  id: "detectCollision(physics.collision.Collider)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "detectCollision(Collider collider)"
  nameWithType: "PolygonCollider.detectCollision(Collider collider)"
  fullName: "ecs.PolygonCollider.detectCollision(Collider collider)"
  overload: "ecs.PolygonCollider.detectCollision*"
  type: "Method"
  package: "ecs"
  summary: "Determines whether a collider intersects with another collider IGNORING the collision layers."
  syntax:
    content: "public CollisionInformation detectCollision(Collider collider)"
    parameters:
    - id: "collider"
      type: "physics.collision.Collider"
    return:
      type: "physics.collision.CollisionInformation"
- uid: "ecs.PolygonCollider.getShape()"
  id: "getShape()"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "getShape()"
  nameWithType: "PolygonCollider.getShape()"
  fullName: "ecs.PolygonCollider.getShape()"
  overload: "ecs.PolygonCollider.getShape*"
  type: "Method"
  package: "ecs"
  summary: "The shape of the collider."
  syntax:
    content: "public PrimitiveShape getShape()"
    return:
      type: "physics.collision.shape.PrimitiveShape"
- uid: "ecs.PolygonCollider.hasMask(int)"
  id: "hasMask(int)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "hasMask(int layer)"
  nameWithType: "PolygonCollider.hasMask(int layer)"
  fullName: "ecs.PolygonCollider.hasMask(int layer)"
  overload: "ecs.PolygonCollider.hasMask*"
  type: "Method"
  package: "ecs"
  summary: "Determines whether a collision mask for a specified layer is enabled."
  syntax:
    content: "public boolean hasMask(int layer)"
    parameters:
    - id: "layer"
      type: "int"
    return:
      type: "boolean"
- uid: "ecs.PolygonCollider.hasTags()"
  id: "hasTags()"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "hasTags()"
  nameWithType: "PolygonCollider.hasTags()"
  fullName: "ecs.PolygonCollider.hasTags()"
  overload: "ecs.PolygonCollider.hasTags*"
  type: "Method"
  package: "ecs"
  summary: "Defines whether a collider is a tagged or an untagged collider."
  syntax:
    content: "public boolean hasTags()"
    return:
      type: "boolean"
- uid: "ecs.PolygonCollider.isOnLayer(int)"
  id: "isOnLayer(int)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "isOnLayer(int layer)"
  nameWithType: "PolygonCollider.isOnLayer(int layer)"
  fullName: "ecs.PolygonCollider.isOnLayer(int layer)"
  overload: "ecs.PolygonCollider.isOnLayer*"
  type: "Method"
  package: "ecs"
  summary: "Determines whether the collider exists in a specified layer."
  syntax:
    content: "public boolean isOnLayer(int layer)"
    parameters:
    - id: "layer"
      type: "int"
    return:
      type: "boolean"
- uid: "ecs.PolygonCollider.layer(int...)"
  id: "layer(int...)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "layer(int[] layers)"
  nameWithType: "PolygonCollider.layer(int[] layers)"
  fullName: "ecs.PolygonCollider.layer(int[] layers)"
  overload: "ecs.PolygonCollider.layer*"
  type: "Method"
  package: "ecs"
  summary: "Sets multiple layers at once for handy usage."
  syntax:
    content: "public PolygonCollider layer(int[] layers)"
    parameters:
    - id: "layers"
      type: "int[]"
      description: "all layers that should be set."
    return:
      type: "ecs.PolygonCollider"
      description: "the collider itself, to chain the call."
- uid: "ecs.PolygonCollider.layers()"
  id: "layers()"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "layers()"
  nameWithType: "PolygonCollider.layers()"
  fullName: "ecs.PolygonCollider.layers()"
  overload: "ecs.PolygonCollider.layers*"
  type: "Method"
  package: "ecs"
  summary: "A short containing all enabled layers encoded as bit mask. Should be usable to compare different masks with each other to check for intersection."
  syntax:
    content: "public short layers()"
    return:
      type: "short"
- uid: "ecs.PolygonCollider.mask()"
  id: "mask()"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "mask()"
  nameWithType: "PolygonCollider.mask()"
  fullName: "ecs.PolygonCollider.mask()"
  overload: "ecs.PolygonCollider.mask*"
  type: "Method"
  package: "ecs"
  summary: "A short containing all enabled masks encoded as bit mask. Should be usable to compare different masks with each other to check for intersection."
  syntax:
    content: "public short mask()"
    return:
      type: "short"
- uid: "ecs.PolygonCollider.mask(int...)"
  id: "mask(int...)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "mask(int[] masks)"
  nameWithType: "PolygonCollider.mask(int[] masks)"
  fullName: "ecs.PolygonCollider.mask(int[] masks)"
  overload: "ecs.PolygonCollider.mask*"
  type: "Method"
  package: "ecs"
  summary: "Sets multiple masks at once for handy usage."
  syntax:
    content: "public PolygonCollider mask(int[] masks)"
    parameters:
    - id: "masks"
      type: "int[]"
      description: "all layers that should be set."
    return:
      type: "ecs.PolygonCollider"
      description: "the collider itself, to chain the call."
- uid: "ecs.PolygonCollider.matchTags(physics.collision.Collider)"
  id: "matchTags(physics.collision.Collider)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "matchTags(Collider collider)"
  nameWithType: "PolygonCollider.matchTags(Collider collider)"
  fullName: "ecs.PolygonCollider.matchTags(Collider collider)"
  overload: "ecs.PolygonCollider.matchTags*"
  type: "Method"
  package: "ecs"
  summary: "Checks for matching tags with another collider. There are 3 different rules for tag matching:\n\\- a collider without tags can only collide with a collider without tags (ignoring tags and only using layers)\n\\- a collider without tags can never collide with a tagged collider\n\\- a tagged collider can only collide with another tagged object, if there is any intersection comparing both sets of tags\n"
  syntax:
    content: "public boolean matchTags(Collider collider)"
    parameters:
    - id: "collider"
      type: "physics.collision.Collider"
    return:
      type: "boolean"
- uid: "ecs.PolygonCollider.passive()"
  id: "passive()"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "passive()"
  nameWithType: "PolygonCollider.passive()"
  fullName: "ecs.PolygonCollider.passive()"
  overload: "ecs.PolygonCollider.passive*"
  type: "Method"
  package: "ecs"
  summary: "Defines the behaviour of this collider. A passive collider will never get checked against others colliders, however any collider might get checked against it."
  syntax:
    content: "public boolean passive()"
    return:
      type: "boolean"
- uid: "ecs.PolygonCollider.removeTag(java.lang.String)"
  id: "removeTag(java.lang.String)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "removeTag(String tag)"
  nameWithType: "PolygonCollider.removeTag(String tag)"
  fullName: "ecs.PolygonCollider.removeTag(String tag)"
  overload: "ecs.PolygonCollider.removeTag*"
  type: "Method"
  package: "ecs"
  summary: "Removes a tag to this collider. If the last tag got removed, this collider becomes an untagged collider."
  syntax:
    content: "public void removeTag(String tag)"
    parameters:
    - id: "tag"
      type: "java.lang.String"
- uid: "ecs.PolygonCollider.setLayer(int,boolean)"
  id: "setLayer(int,boolean)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "setLayer(int layer, boolean active)"
  nameWithType: "PolygonCollider.setLayer(int layer, boolean active)"
  fullName: "ecs.PolygonCollider.setLayer(int layer, boolean active)"
  overload: "ecs.PolygonCollider.setLayer*"
  type: "Method"
  package: "ecs"
  summary: "Change the colliders presence in a specified layer. Making a collider present in a specified layer will it enable to collide with all collider including the specified layer in their collision mask."
  syntax:
    content: "public void setLayer(int layer, boolean active)"
    parameters:
    - id: "layer"
      type: "int"
    - id: "active"
      type: "boolean"
- uid: "ecs.PolygonCollider.setMask(int,boolean)"
  id: "setMask(int,boolean)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "setMask(int layer, boolean active)"
  nameWithType: "PolygonCollider.setMask(int layer, boolean active)"
  fullName: "ecs.PolygonCollider.setMask(int layer, boolean active)"
  overload: "ecs.PolygonCollider.setMask*"
  type: "Method"
  package: "ecs"
  summary: "Changes the collision mask entry for a specified layer. Enabling the mask for layer n will allow this collider to collide with any other collider set in the target layer n vise versa."
  syntax:
    content: "public void setMask(int layer, boolean active)"
    parameters:
    - id: "layer"
      type: "int"
    - id: "active"
      type: "boolean"
- uid: "ecs.PolygonCollider.setShape(physics.collision.shape.PrimitiveShape)"
  id: "setShape(physics.collision.shape.PrimitiveShape)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "setShape(PrimitiveShape shape)"
  nameWithType: "PolygonCollider.setShape(PrimitiveShape shape)"
  fullName: "ecs.PolygonCollider.setShape(PrimitiveShape shape)"
  overload: "ecs.PolygonCollider.setShape*"
  type: "Method"
  package: "ecs"
  summary: "Overwrite the shape of the collider. Use with caution."
  syntax:
    content: "public void setShape(PrimitiveShape shape)"
    parameters:
    - id: "shape"
      type: "physics.collision.shape.PrimitiveShape"
      description: "the new shape."
- uid: "ecs.PolygonCollider.start()"
  id: "start()"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "start()"
  nameWithType: "PolygonCollider.start()"
  fullName: "ecs.PolygonCollider.start()"
  overload: "ecs.PolygonCollider.start*"
  overridden: "ecs.Component.start()"
  type: "Method"
  package: "ecs"
  summary: "Called once on Component initialization."
  syntax:
    content: "public void start()"
- uid: "ecs.PolygonCollider.tags()"
  id: "tags()"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "tags()"
  nameWithType: "PolygonCollider.tags()"
  fullName: "ecs.PolygonCollider.tags()"
  overload: "ecs.PolygonCollider.tags*"
  type: "Method"
  package: "ecs"
  summary: "All tags assigned to this collider."
  syntax:
    content: "public Set<String> tags()"
    return:
      type: "java.util.Set<java.lang.String>"
- uid: "ecs.PolygonCollider.update(float)"
  id: "update(float)"
  parent: "ecs.PolygonCollider"
  langs:
  - "java"
  name: "update(float dt)"
  nameWithType: "PolygonCollider.update(float dt)"
  fullName: "ecs.PolygonCollider.update(float dt)"
  overload: "ecs.PolygonCollider.update*"
  overridden: "ecs.Component.update(float)"
  type: "Method"
  package: "ecs"
  summary: "Called once per frame for each Component"
  syntax:
    content: "public void update(float dt)"
    parameters:
    - id: "dt"
      type: "float"
references:
- uid: "physics.collision.shape.PrimitiveShape"
  name: "PrimitiveShape"
  nameWithType: "PrimitiveShape"
  fullName: "physics.collision.shape.PrimitiveShape"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "ecs.PolygonCollider.PolygonCollider*"
  name: "PolygonCollider"
  nameWithType: "PolygonCollider.PolygonCollider"
  fullName: "ecs.PolygonCollider.PolygonCollider"
  package: "ecs"
- uid: "int[]"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
  - name: "[]"
    fullName: "[]"
- uid: "ecs.PolygonCollider.layer*"
  name: "layer"
  nameWithType: "PolygonCollider.layer"
  fullName: "ecs.PolygonCollider.layer"
  package: "ecs"
- uid: "ecs.PolygonCollider.mask*"
  name: "mask"
  nameWithType: "PolygonCollider.mask"
  fullName: "ecs.PolygonCollider.mask"
  package: "ecs"
- uid: "ecs.PolygonCollider.setShape*"
  name: "setShape"
  nameWithType: "PolygonCollider.setShape"
  fullName: "ecs.PolygonCollider.setShape"
  package: "ecs"
- uid: "ecs.PolygonCollider.start*"
  name: "start"
  nameWithType: "PolygonCollider.start"
  fullName: "ecs.PolygonCollider.start"
  package: "ecs"
- uid: "ecs.PolygonCollider.getShape*"
  name: "getShape"
  nameWithType: "PolygonCollider.getShape"
  fullName: "ecs.PolygonCollider.getShape"
  package: "ecs"
- uid: "physics.collision.Collider"
  name: "Collider"
  nameWithType: "Collider"
  fullName: "physics.collision.Collider"
- uid: "physics.collision.CollisionInformation"
  name: "CollisionInformation"
  nameWithType: "CollisionInformation"
  fullName: "physics.collision.CollisionInformation"
- uid: "ecs.PolygonCollider.detectCollision*"
  name: "detectCollision"
  nameWithType: "PolygonCollider.detectCollision"
  fullName: "ecs.PolygonCollider.detectCollision"
  package: "ecs"
- uid: "ecs.PolygonCollider.canCollideWith*"
  name: "canCollideWith"
  nameWithType: "PolygonCollider.canCollideWith"
  fullName: "ecs.PolygonCollider.canCollideWith"
  package: "ecs"
- uid: "short"
  spec.java:
  - uid: "short"
    name: "short"
    fullName: "short"
- uid: "ecs.PolygonCollider.layers*"
  name: "layers"
  nameWithType: "PolygonCollider.layers"
  fullName: "ecs.PolygonCollider.layers"
  package: "ecs"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "ecs.PolygonCollider.hasMask*"
  name: "hasMask"
  nameWithType: "PolygonCollider.hasMask"
  fullName: "ecs.PolygonCollider.hasMask"
  package: "ecs"
- uid: "ecs.PolygonCollider.isOnLayer*"
  name: "isOnLayer"
  nameWithType: "PolygonCollider.isOnLayer"
  fullName: "ecs.PolygonCollider.isOnLayer"
  package: "ecs"
- uid: "ecs.PolygonCollider.setLayer*"
  name: "setLayer"
  nameWithType: "PolygonCollider.setLayer"
  fullName: "ecs.PolygonCollider.setLayer"
  package: "ecs"
- uid: "ecs.PolygonCollider.setMask*"
  name: "setMask"
  nameWithType: "PolygonCollider.setMask"
  fullName: "ecs.PolygonCollider.setMask"
  package: "ecs"
- uid: "ecs.PolygonCollider.passive*"
  name: "passive"
  nameWithType: "PolygonCollider.passive"
  fullName: "ecs.PolygonCollider.passive"
  package: "ecs"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "ecs.PolygonCollider.addTag*"
  name: "addTag"
  nameWithType: "PolygonCollider.addTag"
  fullName: "ecs.PolygonCollider.addTag"
  package: "ecs"
- uid: "ecs.PolygonCollider.removeTag*"
  name: "removeTag"
  nameWithType: "PolygonCollider.removeTag"
  fullName: "ecs.PolygonCollider.removeTag"
  package: "ecs"
- uid: "java.util.Set<java.lang.String>"
  spec.java:
  - uid: "java.util.Set"
    name: "Set"
    fullName: "java.util.Set"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: ">"
    fullName: ">"
- uid: "ecs.PolygonCollider.tags*"
  name: "tags"
  nameWithType: "PolygonCollider.tags"
  fullName: "ecs.PolygonCollider.tags"
  package: "ecs"
- uid: "ecs.PolygonCollider.hasTags*"
  name: "hasTags"
  nameWithType: "PolygonCollider.hasTags"
  fullName: "ecs.PolygonCollider.hasTags"
  package: "ecs"
- uid: "ecs.PolygonCollider.matchTags*"
  name: "matchTags"
  nameWithType: "PolygonCollider.matchTags"
  fullName: "ecs.PolygonCollider.matchTags"
  package: "ecs"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "ecs.PolygonCollider.update*"
  name: "update"
  nameWithType: "PolygonCollider.update"
  fullName: "ecs.PolygonCollider.update"
  package: "ecs"
- uid: "ecs.Component"
  name: "Component"
  nameWithType: "Component"
  fullName: "ecs.Component"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "ecs.Component.compareTo(ecs.Component)"
  name: "Component.compareTo(Component)"
  nameWithType: "Component.compareTo(Component)"
  fullName: "ecs.Component.compareTo(ecs.Component)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "ecs.Component.debug()"
  name: "Component.debug()"
  nameWithType: "Component.debug()"
  fullName: "ecs.Component.debug()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ecs.Component.start()"
  name: "Component.start()"
  nameWithType: "Component.start()"
  fullName: "ecs.Component.start()"
- uid: "ecs.Component.remove()"
  name: "Component.remove()"
  nameWithType: "Component.remove()"
  fullName: "ecs.Component.remove()"
- uid: "ecs.Component.position()"
  name: "Component.position()"
  nameWithType: "Component.position()"
  fullName: "ecs.Component.position()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "ecs.Component.setPosition(org.joml.Vector2f)"
  name: "Component.setPosition(Vector2f)"
  nameWithType: "Component.setPosition(Vector2f)"
  fullName: "ecs.Component.setPosition(org.joml.Vector2f)"
- uid: "ecs.Component.update(float)"
  name: "Component.update(float)"
  nameWithType: "Component.update(float)"
  fullName: "ecs.Component.update(float)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.Set"
  name: "Set"
  nameWithType: "Set"
  fullName: "java.util.Set"
