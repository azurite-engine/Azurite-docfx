### YamlMime:ManagedReference
items:
- uid: "ai.path.Node"
  id: "Node"
  parent: "ai.path"
  children:
  - "ai.path.Node.Node()"
  - "ai.path.Node.getMarker()"
  - "ai.path.Node.hasMarker()"
  - "ai.path.Node.paths()"
  - "ai.path.Node.position()"
  - "ai.path.Node.setMarker(ai.path.Node.Marker<Position>)"
  langs:
  - "java"
  name: "Node<Position>"
  nameWithType: "Node<Position>"
  fullName: "ai.path.Node<Position>"
  type: "Class"
  package: "ai.path"
  summary: "A <xref uid=\"ai.path.Node\" data-throw-if-not-resolved=\"false\">Node</xref> describes a single node of a finite graph and does knows all paths to its neighbors. It is a container for any external position data for using in a <xref uid=\"java.util.Map\" data-throw-if-not-resolved=\"false\">Map</xref> for a pathfinding algorithm."
  syntax:
    content: "public abstract class Node<Position>"
    typeParameters:
    - id: "Position"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ai.path.Node.Node()"
  id: "Node()"
  parent: "ai.path.Node"
  langs:
  - "java"
  name: "Node()"
  nameWithType: "Node<Position>.Node()"
  fullName: "ai.path.Node<Position>.Node()"
  overload: "ai.path.Node.Node*"
  type: "Constructor"
  package: "ai.path"
  syntax:
    content: "public Node()"
- uid: "ai.path.Node.getMarker()"
  id: "getMarker()"
  parent: "ai.path.Node"
  langs:
  - "java"
  name: "getMarker()"
  nameWithType: "Node<Position>.getMarker()"
  fullName: "ai.path.Node<Position>.getMarker()"
  overload: "ai.path.Node.getMarker*"
  type: "Method"
  package: "ai.path"
  syntax:
    content: "public final Node.Marker<Position> getMarker()"
    return:
      type: "ai.path.Node.Marker<Position>"
- uid: "ai.path.Node.hasMarker()"
  id: "hasMarker()"
  parent: "ai.path.Node"
  langs:
  - "java"
  name: "hasMarker()"
  nameWithType: "Node<Position>.hasMarker()"
  fullName: "ai.path.Node<Position>.hasMarker()"
  overload: "ai.path.Node.hasMarker*"
  type: "Method"
  package: "ai.path"
  syntax:
    content: "public final boolean hasMarker()"
    return:
      type: "boolean"
- uid: "ai.path.Node.paths()"
  id: "paths()"
  parent: "ai.path.Node"
  langs:
  - "java"
  name: "paths()"
  nameWithType: "Node<Position>.paths()"
  fullName: "ai.path.Node<Position>.paths()"
  overload: "ai.path.Node.paths*"
  type: "Method"
  package: "ai.path"
  summary: "All paths starting at this node."
  syntax:
    content: "public abstract List<Path<Position>> paths()"
    return:
      type: "java.util.List<ai.path.Path<Position>>"
      description: "all paths starting at this node"
- uid: "ai.path.Node.position()"
  id: "position()"
  parent: "ai.path.Node"
  langs:
  - "java"
  name: "position()"
  nameWithType: "Node<Position>.position()"
  fullName: "ai.path.Node<Position>.position()"
  overload: "ai.path.Node.position*"
  type: "Method"
  package: "ai.path"
  summary: "The external position data contained in this node. The exact value of this method is ignored by the pathfinding algorithms, but may be used to calculate relationship data between nodes using an external algorithm."
  syntax:
    content: "public abstract Position position()"
    return:
      type: "Position"
      description: "the position data chosen for this node"
- uid: "ai.path.Node.setMarker(ai.path.Node.Marker<Position>)"
  id: "setMarker(ai.path.Node.Marker<Position>)"
  parent: "ai.path.Node"
  langs:
  - "java"
  name: "setMarker(Node.Marker<Position> marker)"
  nameWithType: "Node<Position>.setMarker(Node.Marker<Position> marker)"
  fullName: "ai.path.Node<Position>.setMarker(Node.Marker<Position> marker)"
  overload: "ai.path.Node.setMarker*"
  type: "Method"
  package: "ai.path"
  syntax:
    content: "public final void setMarker(Node.Marker<Position> marker)"
    parameters:
    - id: "marker"
      type: "ai.path.Node.Marker<Position>"
references:
- uid: "ai.path.Node.Node*"
  name: "Node"
  nameWithType: "Node<Position>.Node"
  fullName: "ai.path.Node<Position>.Node"
  package: "ai.path"
- uid: "Position"
  spec.java:
  - uid: "Position"
    name: "Position"
    fullName: "Position"
- uid: "ai.path.Node.position*"
  name: "position"
  nameWithType: "Node<Position>.position"
  fullName: "ai.path.Node<Position>.position"
  package: "ai.path"
- uid: "java.util.List<ai.path.Path<Position>>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "ai.path.Path"
    name: "Path"
    fullName: "ai.path.Path"
  - name: "<"
    fullName: "<"
  - uid: "Position"
    name: "Position"
    fullName: "Position"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "ai.path.Node.paths*"
  name: "paths"
  nameWithType: "Node<Position>.paths"
  fullName: "ai.path.Node<Position>.paths"
  package: "ai.path"
- uid: "ai.path.Node.Marker<Position>"
  spec.java:
  - uid: "ai.path.Node.Marker"
    name: "Marker"
    fullName: "ai.path.Node.Marker"
  - name: "<"
    fullName: "<"
  - uid: "Position"
    name: "Position"
    fullName: "Position"
  - name: ">"
    fullName: ">"
- uid: "ai.path.Node.getMarker*"
  name: "getMarker"
  nameWithType: "Node<Position>.getMarker"
  fullName: "ai.path.Node<Position>.getMarker"
  package: "ai.path"
- uid: "ai.path.Node.setMarker*"
  name: "setMarker"
  nameWithType: "Node<Position>.setMarker"
  fullName: "ai.path.Node<Position>.setMarker"
  package: "ai.path"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "ai.path.Node.hasMarker*"
  name: "hasMarker"
  nameWithType: "Node<Position>.hasMarker"
  fullName: "ai.path.Node<Position>.hasMarker"
  package: "ai.path"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "ai.path.Path"
  name: "Path"
  nameWithType: "Path"
  fullName: "ai.path.Path"
- uid: "ai.path.Node.Marker"
  name: "Node.Marker"
  nameWithType: "Node.Marker"
  fullName: "ai.path.Node.Marker"
