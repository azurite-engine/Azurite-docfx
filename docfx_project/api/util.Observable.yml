### YamlMime:ManagedReference
items:
- uid: "util.Observable"
  id: "Observable"
  parent: "util"
  children:
  - "util.Observable.Observable()"
  - "util.Observable.Observable(Type)"
  - "util.Observable.getValue()"
  - "util.Observable.ignore(util.Observer<Type>)"
  - "util.Observable.ignoreAll()"
  - "util.Observable.observe(util.Observer<Type>)"
  - "util.Observable.setValue(Type)"
  langs:
  - "java"
  name: "Observable<Type>"
  nameWithType: "Observable<Type>"
  fullName: "util.Observable<Type>"
  type: "Class"
  package: "util"
  summary: "Standard observable model."
  syntax:
    content: "public class Observable<Type>"
    typeParameters:
    - id: "Type"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "util.Observable.Observable()"
  id: "Observable()"
  parent: "util.Observable"
  langs:
  - "java"
  name: "Observable()"
  nameWithType: "Observable<Type>.Observable()"
  fullName: "util.Observable<Type>.Observable()"
  overload: "util.Observable.Observable*"
  type: "Constructor"
  package: "util"
  syntax:
    content: "public Observable()"
- uid: "util.Observable.Observable(Type)"
  id: "Observable(Type)"
  parent: "util.Observable"
  langs:
  - "java"
  name: "Observable(Type defValue)"
  nameWithType: "Observable<Type>.Observable(Type defValue)"
  fullName: "util.Observable<Type>.Observable(Type defValue)"
  overload: "util.Observable.Observable*"
  type: "Constructor"
  package: "util"
  syntax:
    content: "public Observable(Type defValue)"
    parameters:
    - id: "defValue"
      type: "Type"
- uid: "util.Observable.getValue()"
  id: "getValue()"
  parent: "util.Observable"
  langs:
  - "java"
  name: "getValue()"
  nameWithType: "Observable<Type>.getValue()"
  fullName: "util.Observable<Type>.getValue()"
  overload: "util.Observable.getValue*"
  type: "Method"
  package: "util"
  syntax:
    content: "public Type getValue()"
    return:
      type: "Type"
- uid: "util.Observable.ignore(util.Observer<Type>)"
  id: "ignore(util.Observer<Type>)"
  parent: "util.Observable"
  langs:
  - "java"
  name: "ignore(Observer<Type> observer)"
  nameWithType: "Observable<Type>.ignore(Observer<Type> observer)"
  fullName: "util.Observable<Type>.ignore(Observer<Type> observer)"
  overload: "util.Observable.ignore*"
  type: "Method"
  package: "util"
  summary: "Remove an observer from this observable."
  syntax:
    content: "public void ignore(Observer<Type> observer)"
    parameters:
    - id: "observer"
      type: "util.Observer<Type>"
      description: "the observer to remove"
- uid: "util.Observable.ignoreAll()"
  id: "ignoreAll()"
  parent: "util.Observable"
  langs:
  - "java"
  name: "ignoreAll()"
  nameWithType: "Observable<Type>.ignoreAll()"
  fullName: "util.Observable<Type>.ignoreAll()"
  overload: "util.Observable.ignoreAll*"
  type: "Method"
  package: "util"
  summary: "Removes all observers from this observable"
  syntax:
    content: "public void ignoreAll()"
- uid: "util.Observable.observe(util.Observer<Type>)"
  id: "observe(util.Observer<Type>)"
  parent: "util.Observable"
  langs:
  - "java"
  name: "observe(Observer<Type> observer)"
  nameWithType: "Observable<Type>.observe(Observer<Type> observer)"
  fullName: "util.Observable<Type>.observe(Observer<Type> observer)"
  overload: "util.Observable.observe*"
  type: "Method"
  package: "util"
  summary: "Add an observer to this observable."
  syntax:
    content: "public void observe(Observer<Type> observer)"
    parameters:
    - id: "observer"
      type: "util.Observer<Type>"
      description: "the observer to add"
- uid: "util.Observable.setValue(Type)"
  id: "setValue(Type)"
  parent: "util.Observable"
  langs:
  - "java"
  name: "setValue(Type value)"
  nameWithType: "Observable<Type>.setValue(Type value)"
  fullName: "util.Observable<Type>.setValue(Type value)"
  overload: "util.Observable.setValue*"
  type: "Method"
  package: "util"
  syntax:
    content: "public synchronized void setValue(Type value)"
    parameters:
    - id: "value"
      type: "Type"
references:
- uid: "Type"
  spec.java:
  - uid: "Type"
    name: "Type"
    fullName: "Type"
- uid: "util.Observable.Observable*"
  name: "Observable"
  nameWithType: "Observable<Type>.Observable"
  fullName: "util.Observable<Type>.Observable"
  package: "util"
- uid: "util.Observer<Type>"
  spec.java:
  - uid: "util.Observer"
    name: "Observer"
    fullName: "util.Observer"
  - name: "<"
    fullName: "<"
  - uid: "Type"
    name: "Type"
    fullName: "Type"
  - name: ">"
    fullName: ">"
- uid: "util.Observable.observe*"
  name: "observe"
  nameWithType: "Observable<Type>.observe"
  fullName: "util.Observable<Type>.observe"
  package: "util"
- uid: "util.Observable.ignore*"
  name: "ignore"
  nameWithType: "Observable<Type>.ignore"
  fullName: "util.Observable<Type>.ignore"
  package: "util"
- uid: "util.Observable.ignoreAll*"
  name: "ignoreAll"
  nameWithType: "Observable<Type>.ignoreAll"
  fullName: "util.Observable<Type>.ignoreAll"
  package: "util"
- uid: "util.Observable.setValue*"
  name: "setValue"
  nameWithType: "Observable<Type>.setValue"
  fullName: "util.Observable<Type>.setValue"
  package: "util"
- uid: "util.Observable.getValue*"
  name: "getValue"
  nameWithType: "Observable<Type>.getValue"
  fullName: "util.Observable<Type>.getValue"
  package: "util"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "util.Observer"
  name: "Observer"
  nameWithType: "Observer"
  fullName: "util.Observer"
