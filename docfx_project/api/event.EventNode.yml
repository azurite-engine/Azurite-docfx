### YamlMime:ManagedReference
items:
- uid: "event.EventNode"
  id: "EventNode"
  parent: "event"
  children:
  - "event.EventNode.EventNode()"
  - "event.EventNode.onEvent(T)"
  - "event.EventNode.subscribe(event.EventListener<T>)"
  langs:
  - "java"
  name: "EventNode<T>"
  nameWithType: "EventNode<T>"
  fullName: "event.EventNode<T>"
  type: "Class"
  package: "event"
  summary: "A class which can handle Event listeners. Automatically calls all listeners when event occurs"
  syntax:
    content: "public class EventNode<T>"
    typeParameters:
    - id: "T"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "event.EventNode.EventNode()"
  id: "EventNode()"
  parent: "event.EventNode"
  langs:
  - "java"
  name: "EventNode()"
  nameWithType: "EventNode<T>.EventNode()"
  fullName: "event.EventNode<T>.EventNode()"
  overload: "event.EventNode.EventNode*"
  type: "Constructor"
  package: "event"
  summary: "A default constructor"
  syntax:
    content: "public EventNode()"
- uid: "event.EventNode.onEvent(T)"
  id: "onEvent(T)"
  parent: "event.EventNode"
  langs:
  - "java"
  name: "onEvent(T t)"
  nameWithType: "EventNode<T>.onEvent(T t)"
  fullName: "event.EventNode<T>.onEvent(T t)"
  overload: "event.EventNode.onEvent*"
  type: "Method"
  package: "event"
  summary: "Notifies the node that an event has occurred. Notifies all listeners"
  syntax:
    content: "public void onEvent(T t)"
    parameters:
    - id: "t"
      type: "T"
      description: "the data that is to be given to all the listeners."
- uid: "event.EventNode.subscribe(event.EventListener<T>)"
  id: "subscribe(event.EventListener<T>)"
  parent: "event.EventNode"
  langs:
  - "java"
  name: "subscribe(EventListener<T> listener)"
  nameWithType: "EventNode<T>.subscribe(EventListener<T> listener)"
  fullName: "event.EventNode<T>.subscribe(EventListener<T> listener)"
  overload: "event.EventNode.subscribe*"
  type: "Method"
  package: "event"
  summary: "Add a function to the listeners list. The function will be called when the event occurs"
  syntax:
    content: "public void subscribe(EventListener<T> listener)"
    parameters:
    - id: "listener"
      type: "event.EventListener<T>"
      description: "The function that is to be called when the event occurs"
references:
- uid: "event.EventNode.EventNode*"
  name: "EventNode"
  nameWithType: "EventNode<T>.EventNode"
  fullName: "event.EventNode<T>.EventNode"
  package: "event"
- uid: "event.EventListener<T>"
  spec.java:
  - uid: "event.EventListener"
    name: "EventListener"
    fullName: "event.EventListener"
  - name: "<"
    fullName: "<"
  - uid: "T"
    name: "T"
    fullName: "T"
  - name: ">"
    fullName: ">"
- uid: "event.EventNode.subscribe*"
  name: "subscribe"
  nameWithType: "EventNode<T>.subscribe"
  fullName: "event.EventNode<T>.subscribe"
  package: "event"
- uid: "T"
  spec.java:
  - uid: "T"
    name: "T"
    fullName: "T"
- uid: "event.EventNode.onEvent*"
  name: "onEvent"
  nameWithType: "EventNode<T>.onEvent"
  fullName: "event.EventNode<T>.onEvent"
  package: "event"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "event.EventListener"
  name: "EventListener"
  nameWithType: "EventListener"
  fullName: "event.EventListener"
