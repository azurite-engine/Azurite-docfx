### YamlMime:ManagedReference
items:
- uid: "physics.collision.shape.PrimitiveShape"
  id: "PrimitiveShape"
  parent: "physics.collision.shape"
  children:
  - "physics.collision.shape.PrimitiveShape.PrimitiveShape(org.joml.Vector2f...)"
  - "physics.collision.shape.PrimitiveShape.PrimitiveShape(physics.collision.shape.ShapeType,org.joml.Vector2f...)"
  - "physics.collision.shape.PrimitiveShape.absoluteCentroid"
  - "physics.collision.shape.PrimitiveShape.absolutes"
  - "physics.collision.shape.PrimitiveShape.adjust()"
  - "physics.collision.shape.PrimitiveShape.boundingSphere"
  - "physics.collision.shape.PrimitiveShape.boundingSphere()"
  - "physics.collision.shape.PrimitiveShape.centroid()"
  - "physics.collision.shape.PrimitiveShape.faces"
  - "physics.collision.shape.PrimitiveShape.faces()"
  - "physics.collision.shape.PrimitiveShape.getAbsolutePoints()"
  - "physics.collision.shape.PrimitiveShape.init()"
  - "physics.collision.shape.PrimitiveShape.initSphere()"
  - "physics.collision.shape.PrimitiveShape.position()"
  - "physics.collision.shape.PrimitiveShape.relativeCentroid"
  - "physics.collision.shape.PrimitiveShape.relatives"
  - "physics.collision.shape.PrimitiveShape.rotateShape(float,physics.collision.shape.RotationType,org.joml.Vector2f)"
  - "physics.collision.shape.PrimitiveShape.setPosition(float,float)"
  - "physics.collision.shape.PrimitiveShape.setPosition(org.joml.Vector2f)"
  - "physics.collision.shape.PrimitiveShape.supportPoint(org.joml.Vector2f)"
  - "physics.collision.shape.PrimitiveShape.type()"
  - "physics.collision.shape.PrimitiveShape.vertices"
  - "physics.collision.shape.PrimitiveShape.vertices()"
  langs:
  - "java"
  name: "PrimitiveShape"
  nameWithType: "PrimitiveShape"
  fullName: "physics.collision.shape.PrimitiveShape"
  type: "Class"
  package: "physics.collision.shape"
  summary: "The <xref uid=\"physics.collision.shape.PrimitiveShape\" data-throw-if-not-resolved=\"false\">PrimitiveShape</xref> is implicitly described by all its support vectors. A support vector is a point on the convex hull of a shape, that is furthest in the direction of a specified vector v. This class may contain information about explicit points on the edge too."
  syntax:
    content: "public abstract class PrimitiveShape"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "physics.collision.shape.PrimitiveShape.PrimitiveShape(org.joml.Vector2f...)"
  id: "PrimitiveShape(org.joml.Vector2f...)"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "PrimitiveShape(Vector2f[] relatives)"
  nameWithType: "PrimitiveShape.PrimitiveShape(Vector2f[] relatives)"
  fullName: "physics.collision.shape.PrimitiveShape.PrimitiveShape(Vector2f[] relatives)"
  overload: "physics.collision.shape.PrimitiveShape.PrimitiveShape*"
  type: "Constructor"
  package: "physics.collision.shape"
  summary: "Create a polygon of the given coordinates."
  syntax:
    content: "protected PrimitiveShape(Vector2f[] relatives)"
    parameters:
    - id: "relatives"
      type: "org.joml.Vector2f[]"
      description: "all relative points on the shape"
- uid: "physics.collision.shape.PrimitiveShape.PrimitiveShape(physics.collision.shape.ShapeType,org.joml.Vector2f...)"
  id: "PrimitiveShape(physics.collision.shape.ShapeType,org.joml.Vector2f...)"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "PrimitiveShape(ShapeType type, Vector2f[] relatives)"
  nameWithType: "PrimitiveShape.PrimitiveShape(ShapeType type, Vector2f[] relatives)"
  fullName: "physics.collision.shape.PrimitiveShape.PrimitiveShape(ShapeType type, Vector2f[] relatives)"
  overload: "physics.collision.shape.PrimitiveShape.PrimitiveShape*"
  type: "Constructor"
  package: "physics.collision.shape"
  summary: "Create a shape. Generally only used as super call from other shape classes."
  syntax:
    content: "protected PrimitiveShape(ShapeType type, Vector2f[] relatives)"
    parameters:
    - id: "type"
      type: "physics.collision.shape.ShapeType"
      description: "the type of the target shape"
    - id: "relatives"
      type: "org.joml.Vector2f[]"
      description: "the points defining this shape"
- uid: "physics.collision.shape.PrimitiveShape.absoluteCentroid"
  id: "absoluteCentroid"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "absoluteCentroid"
  nameWithType: "PrimitiveShape.absoluteCentroid"
  fullName: "physics.collision.shape.PrimitiveShape.absoluteCentroid"
  type: "Field"
  package: "physics.collision.shape"
  summary: "The centroid of the shape - the absolute vector (position is already added to it)"
  syntax:
    content: "protected Vector2f absoluteCentroid"
    return:
      type: "org.joml.Vector2f"
- uid: "physics.collision.shape.PrimitiveShape.absolutes"
  id: "absolutes"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "absolutes"
  nameWithType: "PrimitiveShape.absolutes"
  fullName: "physics.collision.shape.PrimitiveShape.absolutes"
  type: "Field"
  package: "physics.collision.shape"
  summary: "The coordinates of the shape - absolute coordinates (position is already added to it)"
  syntax:
    content: "protected final Vector2f[] absolutes"
    return:
      type: "org.joml.Vector2f[]"
- uid: "physics.collision.shape.PrimitiveShape.adjust()"
  id: "adjust()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "adjust()"
  nameWithType: "PrimitiveShape.adjust()"
  fullName: "physics.collision.shape.PrimitiveShape.adjust()"
  overload: "physics.collision.shape.PrimitiveShape.adjust*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "Will be called by <xref uid=\"physics.collision.shape.PrimitiveShape.setPosition(org.joml.Vector2f)\" data-throw-if-not-resolved=\"false\">PrimitiveShape#setPosition(Vector2f)</xref> after the new position was set. Used to recalculate the absolute coordinates."
  syntax:
    content: "public void adjust()"
- uid: "physics.collision.shape.PrimitiveShape.boundingSphere"
  id: "boundingSphere"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "boundingSphere"
  nameWithType: "PrimitiveShape.boundingSphere"
  fullName: "physics.collision.shape.PrimitiveShape.boundingSphere"
  type: "Field"
  package: "physics.collision.shape"
  summary: "The boundingSphere of this shape represented by a <xref uid=\"physics.collision.shape.Circle\" data-throw-if-not-resolved=\"false\">Circle</xref>. This sphere is used as broadphase for collision detection, since circle intersection checks does cost way less"
  syntax:
    content: "protected Circle boundingSphere"
    return:
      type: "physics.collision.shape.Circle"
- uid: "physics.collision.shape.PrimitiveShape.boundingSphere()"
  id: "boundingSphere()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "boundingSphere()"
  nameWithType: "PrimitiveShape.boundingSphere()"
  fullName: "physics.collision.shape.PrimitiveShape.boundingSphere()"
  overload: "physics.collision.shape.PrimitiveShape.boundingSphere*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "A minimal sphere that contains the original shape. The inner shape is supposed to be fixed inside the sphere and share the same centroid."
  syntax:
    content: "public final Circle boundingSphere()"
    return:
      type: "physics.collision.shape.Circle"
      description: "the minimal sphere containing this shape"
- uid: "physics.collision.shape.PrimitiveShape.centroid()"
  id: "centroid()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "centroid()"
  nameWithType: "PrimitiveShape.centroid()"
  fullName: "physics.collision.shape.PrimitiveShape.centroid()"
  overload: "physics.collision.shape.PrimitiveShape.centroid*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "The center point or weight point of the shape."
  syntax:
    content: "public final Vector2f centroid()"
    return:
      type: "org.joml.Vector2f"
      description: "centroid of the shape"
- uid: "physics.collision.shape.PrimitiveShape.faces"
  id: "faces"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "faces"
  nameWithType: "PrimitiveShape.faces"
  fullName: "physics.collision.shape.PrimitiveShape.faces"
  type: "Field"
  package: "physics.collision.shape"
  summary: "All faces of the shape"
  syntax:
    content: "protected final Face[] faces"
    return:
      type: "physics.collision.shape.Face[]"
- uid: "physics.collision.shape.PrimitiveShape.faces()"
  id: "faces()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "faces()"
  nameWithType: "PrimitiveShape.faces()"
  fullName: "physics.collision.shape.PrimitiveShape.faces()"
  overload: "physics.collision.shape.PrimitiveShape.faces*"
  type: "Method"
  package: "physics.collision.shape"
  syntax:
    content: "public final Face[] faces()"
    return:
      type: "physics.collision.shape.Face[]"
- uid: "physics.collision.shape.PrimitiveShape.getAbsolutePoints()"
  id: "getAbsolutePoints()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "getAbsolutePoints()"
  nameWithType: "PrimitiveShape.getAbsolutePoints()"
  fullName: "physics.collision.shape.PrimitiveShape.getAbsolutePoints()"
  overload: "physics.collision.shape.PrimitiveShape.getAbsolutePoints*"
  type: "Method"
  package: "physics.collision.shape"
  syntax:
    content: "public final Vector2f[] getAbsolutePoints()"
    return:
      type: "org.joml.Vector2f[]"
- uid: "physics.collision.shape.PrimitiveShape.init()"
  id: "init()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "init()"
  nameWithType: "PrimitiveShape.init()"
  fullName: "physics.collision.shape.PrimitiveShape.init()"
  overload: "physics.collision.shape.PrimitiveShape.init*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "Requires the relativeCentroid to be set. Calculates all relative faces and relative diagonals for a defined shape"
  syntax:
    content: "protected final void init()"
- uid: "physics.collision.shape.PrimitiveShape.initSphere()"
  id: "initSphere()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "initSphere()"
  nameWithType: "PrimitiveShape.initSphere()"
  fullName: "physics.collision.shape.PrimitiveShape.initSphere()"
  overload: "physics.collision.shape.PrimitiveShape.initSphere*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "Calculates a relative centroid and the boundingSphere for the shape. In some special cases this might be done quicker in a different way."
  syntax:
    content: "protected final void initSphere()"
- uid: "physics.collision.shape.PrimitiveShape.position()"
  id: "position()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "position()"
  nameWithType: "PrimitiveShape.position()"
  fullName: "physics.collision.shape.PrimitiveShape.position()"
  overload: "physics.collision.shape.PrimitiveShape.position*"
  type: "Method"
  package: "physics.collision.shape"
  syntax:
    content: "public final Vector2f position()"
    return:
      type: "org.joml.Vector2f"
- uid: "physics.collision.shape.PrimitiveShape.relativeCentroid"
  id: "relativeCentroid"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "relativeCentroid"
  nameWithType: "PrimitiveShape.relativeCentroid"
  fullName: "physics.collision.shape.PrimitiveShape.relativeCentroid"
  type: "Field"
  package: "physics.collision.shape"
  summary: "The centroid of the shape - the relative vector to an imaginary origin near the shape"
  syntax:
    content: "protected Vector2f relativeCentroid"
    return:
      type: "org.joml.Vector2f"
- uid: "physics.collision.shape.PrimitiveShape.relatives"
  id: "relatives"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "relatives"
  nameWithType: "PrimitiveShape.relatives"
  fullName: "physics.collision.shape.PrimitiveShape.relatives"
  type: "Field"
  package: "physics.collision.shape"
  summary: "The coordinates of the shape - relative to an imaginary origin near the shape"
  syntax:
    content: "protected final Vector2f[] relatives"
    return:
      type: "org.joml.Vector2f[]"
- uid: "physics.collision.shape.PrimitiveShape.rotateShape(float,physics.collision.shape.RotationType,org.joml.Vector2f)"
  id: "rotateShape(float,physics.collision.shape.RotationType,org.joml.Vector2f)"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "rotateShape(float radianAngle, RotationType type, Vector2f point)"
  nameWithType: "PrimitiveShape.rotateShape(float radianAngle, RotationType type, Vector2f point)"
  fullName: "physics.collision.shape.PrimitiveShape.rotateShape(float radianAngle, RotationType type, Vector2f point)"
  overload: "physics.collision.shape.PrimitiveShape.rotateShape*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "Rotate a shape around a specific point and a given radianAngle."
  syntax:
    content: "public final boolean rotateShape(float radianAngle, RotationType type, Vector2f point)"
    parameters:
    - id: "radianAngle"
      type: "float"
      description: "the radian angle to rotate the shape"
    - id: "type"
      type: "physics.collision.shape.RotationType"
      description: "the type of rotation"
    - id: "point"
      type: "org.joml.Vector2f"
      description: "the optional point to rotate around; if type is not <xref uid=\"physics.collision.shape.RotationType.AROUND_POINT\" data-throw-if-not-resolved=\"false\">RotationType#AROUND_POINT</xref>, the point can be null"
    return:
      type: "boolean"
      description: "true, if the rotation was successful"
- uid: "physics.collision.shape.PrimitiveShape.setPosition(float,float)"
  id: "setPosition(float,float)"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "setPosition(float x, float y)"
  nameWithType: "PrimitiveShape.setPosition(float x, float y)"
  fullName: "physics.collision.shape.PrimitiveShape.setPosition(float x, float y)"
  overload: "physics.collision.shape.PrimitiveShape.setPosition*"
  type: "Method"
  package: "physics.collision.shape"
  syntax:
    content: "public final void setPosition(float x, float y)"
    parameters:
    - id: "x"
      type: "float"
      description: "the x coord"
    - id: "y"
      type: "float"
      description: "the y coord"
- uid: "physics.collision.shape.PrimitiveShape.setPosition(org.joml.Vector2f)"
  id: "setPosition(org.joml.Vector2f)"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "setPosition(Vector2f position)"
  nameWithType: "PrimitiveShape.setPosition(Vector2f position)"
  fullName: "physics.collision.shape.PrimitiveShape.setPosition(Vector2f position)"
  overload: "physics.collision.shape.PrimitiveShape.setPosition*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "Update the shapes position due to external changes, e.g. the related object has moved"
  syntax:
    content: "public final void setPosition(Vector2f position)"
    parameters:
    - id: "position"
      type: "org.joml.Vector2f"
      description: "the new position of the related object"
- uid: "physics.collision.shape.PrimitiveShape.supportPoint(org.joml.Vector2f)"
  id: "supportPoint(org.joml.Vector2f)"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "supportPoint(Vector2f v)"
  nameWithType: "PrimitiveShape.supportPoint(Vector2f v)"
  fullName: "physics.collision.shape.PrimitiveShape.supportPoint(Vector2f v)"
  overload: "physics.collision.shape.PrimitiveShape.supportPoint*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "According to GJKSM this method is supposed to calculate the point of the shape, that is most in direction of v. The general rule is, the more primitive the shape is, the more efficient this method can be. This method may be described as max\\{v\\*x,x element of Shape\\} for any complex shape."
  syntax:
    content: "public Vector2f supportPoint(Vector2f v)"
    parameters:
    - id: "v"
      type: "org.joml.Vector2f"
      description: "the direction"
    return:
      type: "org.joml.Vector2f"
      description: "the point of the shape that is most in the direction of v"
- uid: "physics.collision.shape.PrimitiveShape.type()"
  id: "type()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "type()"
  nameWithType: "PrimitiveShape.type()"
  fullName: "physics.collision.shape.PrimitiveShape.type()"
  overload: "physics.collision.shape.PrimitiveShape.type*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "A clean description for this shape."
  syntax:
    content: "public final ShapeType type()"
    return:
      type: "physics.collision.shape.ShapeType"
      description: "the <xref uid=\"physics.collision.shape.ShapeType\" data-throw-if-not-resolved=\"false\">ShapeType</xref> matching this <xref uid=\"physics.collision.shape.PrimitiveShape\" data-throw-if-not-resolved=\"false\">PrimitiveShape</xref>"
- uid: "physics.collision.shape.PrimitiveShape.vertices"
  id: "vertices"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "vertices"
  nameWithType: "PrimitiveShape.vertices"
  fullName: "physics.collision.shape.PrimitiveShape.vertices"
  type: "Field"
  package: "physics.collision.shape"
  summary: "The amount of vertices of the shape"
  syntax:
    content: "protected final int vertices"
    return:
      type: "int"
- uid: "physics.collision.shape.PrimitiveShape.vertices()"
  id: "vertices()"
  parent: "physics.collision.shape.PrimitiveShape"
  langs:
  - "java"
  name: "vertices()"
  nameWithType: "PrimitiveShape.vertices()"
  fullName: "physics.collision.shape.PrimitiveShape.vertices()"
  overload: "physics.collision.shape.PrimitiveShape.vertices*"
  type: "Method"
  package: "physics.collision.shape"
  syntax:
    content: "public final int vertices()"
    return:
      type: "int"
references:
- uid: "org.joml.Vector2f[]"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
  - name: "[]"
    fullName: "[]"
- uid: "physics.collision.shape.PrimitiveShape.PrimitiveShape*"
  name: "PrimitiveShape"
  nameWithType: "PrimitiveShape.PrimitiveShape"
  fullName: "physics.collision.shape.PrimitiveShape.PrimitiveShape"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.ShapeType"
  name: "ShapeType"
  nameWithType: "ShapeType"
  fullName: "physics.collision.shape.ShapeType"
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "physics.collision.shape.PrimitiveShape.setPosition*"
  name: "setPosition"
  nameWithType: "PrimitiveShape.setPosition"
  fullName: "physics.collision.shape.PrimitiveShape.setPosition"
  package: "physics.collision.shape"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "physics.collision.shape.PrimitiveShape.position*"
  name: "position"
  nameWithType: "PrimitiveShape.position"
  fullName: "physics.collision.shape.PrimitiveShape.position"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.PrimitiveShape.getAbsolutePoints*"
  name: "getAbsolutePoints"
  nameWithType: "PrimitiveShape.getAbsolutePoints"
  fullName: "physics.collision.shape.PrimitiveShape.getAbsolutePoints"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.Face[]"
  spec.java:
  - uid: "physics.collision.shape.Face"
    name: "Face"
    fullName: "physics.collision.shape.Face"
  - name: "[]"
    fullName: "[]"
- uid: "physics.collision.shape.PrimitiveShape.faces*"
  name: "faces"
  nameWithType: "PrimitiveShape.faces"
  fullName: "physics.collision.shape.PrimitiveShape.faces"
  package: "physics.collision.shape"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "physics.collision.shape.PrimitiveShape.vertices*"
  name: "vertices"
  nameWithType: "PrimitiveShape.vertices"
  fullName: "physics.collision.shape.PrimitiveShape.vertices"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.PrimitiveShape.initSphere*"
  name: "initSphere"
  nameWithType: "PrimitiveShape.initSphere"
  fullName: "physics.collision.shape.PrimitiveShape.initSphere"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.PrimitiveShape.init*"
  name: "init"
  nameWithType: "PrimitiveShape.init"
  fullName: "physics.collision.shape.PrimitiveShape.init"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.PrimitiveShape.adjust*"
  name: "adjust"
  nameWithType: "PrimitiveShape.adjust"
  fullName: "physics.collision.shape.PrimitiveShape.adjust"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.RotationType"
  name: "RotationType"
  nameWithType: "RotationType"
  fullName: "physics.collision.shape.RotationType"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "physics.collision.shape.PrimitiveShape.rotateShape*"
  name: "rotateShape"
  nameWithType: "PrimitiveShape.rotateShape"
  fullName: "physics.collision.shape.PrimitiveShape.rotateShape"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.PrimitiveShape.centroid*"
  name: "centroid"
  nameWithType: "PrimitiveShape.centroid"
  fullName: "physics.collision.shape.PrimitiveShape.centroid"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.Circle"
  name: "Circle"
  nameWithType: "Circle"
  fullName: "physics.collision.shape.Circle"
- uid: "physics.collision.shape.PrimitiveShape.boundingSphere*"
  name: "boundingSphere"
  nameWithType: "PrimitiveShape.boundingSphere"
  fullName: "physics.collision.shape.PrimitiveShape.boundingSphere"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.PrimitiveShape.supportPoint*"
  name: "supportPoint"
  nameWithType: "PrimitiveShape.supportPoint"
  fullName: "physics.collision.shape.PrimitiveShape.supportPoint"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.PrimitiveShape.type*"
  name: "type"
  nameWithType: "PrimitiveShape.type"
  fullName: "physics.collision.shape.PrimitiveShape.type"
  package: "physics.collision.shape"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
