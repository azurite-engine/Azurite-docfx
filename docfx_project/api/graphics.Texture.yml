### YamlMime:ManagedReference
items:
- uid: "graphics.Texture"
  id: "Texture"
  parent: "graphics"
  children:
  - "graphics.Texture.Texture()"
  - "graphics.Texture.Texture(int,int,util.specs.TextureSpec)"
  - "graphics.Texture.Texture(java.lang.String)"
  - "graphics.Texture.bind()"
  - "graphics.Texture.bindToSlot(int)"
  - "graphics.Texture.createTexture(int,int,java.nio.ByteBuffer)"
  - "graphics.Texture.delete()"
  - "graphics.Texture.getFilePath()"
  - "graphics.Texture.getHeight()"
  - "graphics.Texture.getTextureID()"
  - "graphics.Texture.getWidth()"
  - "graphics.Texture.loadImageInByteBuffer(java.lang.String)"
  - "graphics.Texture.setHeight(int)"
  - "graphics.Texture.setId(int)"
  - "graphics.Texture.setParameter(int,int)"
  - "graphics.Texture.setWidth(int)"
  - "graphics.Texture.toFile(java.lang.String,int,int,int)"
  - "graphics.Texture.unbind()"
  - "graphics.Texture.uploadData(int,int,int,int,java.nio.ByteBuffer)"
  - "graphics.Texture.uploadData(int,int,java.nio.ByteBuffer)"
  - "graphics.Texture.wrap(int)"
  langs:
  - "java"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
  type: "Class"
  package: "graphics"
  summary: "This is a class for an OpenGL texture"
  syntax:
    content: "public class Texture"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "graphics.Texture.Texture()"
  id: "Texture()"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "Texture()"
  nameWithType: "Texture.Texture()"
  fullName: "graphics.Texture.Texture()"
  overload: "graphics.Texture.Texture*"
  type: "Constructor"
  package: "graphics"
  syntax:
    content: "public Texture()"
- uid: "graphics.Texture.Texture(int)"
  id: "Texture(int)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "Texture(int id)"
  nameWithType: "Texture.Texture(int id)"
  fullName: "graphics.Texture.Texture(int id)"
  overload: "graphics.Texture.Texture*"
  type: "Constructor"
  package: "graphics"
  summary: "Wrap the given id into a texture object"
  syntax:
    content: "private Texture(int id)"
    parameters:
    - id: "id"
      type: "int"
      description: "the id to be wrapped"
- uid: "graphics.Texture.Texture(int,int,util.specs.TextureSpec)"
  id: "Texture(int,int,util.specs.TextureSpec)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "Texture(int width, int height, TextureSpec spec)"
  nameWithType: "Texture.Texture(int width, int height, TextureSpec spec)"
  fullName: "graphics.Texture.Texture(int width, int height, TextureSpec spec)"
  overload: "graphics.Texture.Texture*"
  type: "Constructor"
  package: "graphics"
  syntax:
    content: "public Texture(int width, int height, TextureSpec spec)"
    parameters:
    - id: "width"
      type: "int"
    - id: "height"
      type: "int"
    - id: "spec"
      type: "util.specs.TextureSpec"
- uid: "graphics.Texture.Texture(java.lang.String)"
  id: "Texture(java.lang.String)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "Texture(String filepath)"
  nameWithType: "Texture.Texture(String filepath)"
  fullName: "graphics.Texture.Texture(String filepath)"
  overload: "graphics.Texture.Texture*"
  type: "Constructor"
  package: "graphics"
  summary: "Load a Texture from a filepath. Recommended to use Assets.loadTexture instead of calling this function"
  syntax:
    content: "public Texture(String filepath)"
    parameters:
    - id: "filepath"
      type: "java.lang.String"
      description: "filepath of the texture"
- uid: "graphics.Texture.bind()"
  id: "bind()"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "bind()"
  nameWithType: "Texture.bind()"
  fullName: "graphics.Texture.bind()"
  overload: "graphics.Texture.bind*"
  type: "Method"
  package: "graphics"
  summary: "Bind this texture to the currently active texture slot"
  syntax:
    content: "public void bind()"
- uid: "graphics.Texture.bindToSlot(int)"
  id: "bindToSlot(int)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "bindToSlot(int unit)"
  nameWithType: "Texture.bindToSlot(int unit)"
  fullName: "graphics.Texture.bindToSlot(int unit)"
  overload: "graphics.Texture.bindToSlot*"
  type: "Method"
  package: "graphics"
  summary: "Bind this texture to a specific texture slot"
  syntax:
    content: "public void bindToSlot(int unit)"
    parameters:
    - id: "unit"
      type: "int"
      description: "the texture unit to bind this texture to"
- uid: "graphics.Texture.createTexture(int,int,java.nio.ByteBuffer)"
  id: "createTexture(int,int,java.nio.ByteBuffer)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "createTexture(int width, int height, ByteBuffer data)"
  nameWithType: "Texture.createTexture(int width, int height, ByteBuffer data)"
  fullName: "graphics.Texture.createTexture(int width, int height, ByteBuffer data)"
  overload: "graphics.Texture.createTexture*"
  type: "Method"
  package: "graphics"
  summary: "Creates a texture with specified width, height and data."
  syntax:
    content: "public Texture createTexture(int width, int height, ByteBuffer data)"
    parameters:
    - id: "width"
      type: "int"
      description: "Width of the texture"
    - id: "height"
      type: "int"
      description: "Height of the texture"
    - id: "data"
      type: "java.nio.ByteBuffer"
      description: "Picture Data in RGBA format"
    return:
      type: "graphics.Texture"
      description: "Texture from the specified data"
- uid: "graphics.Texture.delete()"
  id: "delete()"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "delete()"
  nameWithType: "Texture.delete()"
  fullName: "graphics.Texture.delete()"
  overload: "graphics.Texture.delete*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public void delete()"
- uid: "graphics.Texture.getFilePath()"
  id: "getFilePath()"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "getFilePath()"
  nameWithType: "Texture.getFilePath()"
  fullName: "graphics.Texture.getFilePath()"
  overload: "graphics.Texture.getFilePath*"
  type: "Method"
  package: "graphics"
  summary: "The filepath from which this texture was loaded. Will return \"==== Wrapper ====\" if it is just a wrapper around an id."
  syntax:
    content: "public String getFilePath()"
    return:
      type: "java.lang.String"
      description: "filepath from which the texture was loaded"
- uid: "graphics.Texture.getHeight()"
  id: "getHeight()"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "getHeight()"
  nameWithType: "Texture.getHeight()"
  fullName: "graphics.Texture.getHeight()"
  overload: "graphics.Texture.getHeight*"
  type: "Method"
  package: "graphics"
  summary: "Get This texture's height. Will be -1 if the instance is just a wrapper"
  syntax:
    content: "public int getHeight()"
    return:
      type: "int"
      description: "the height of the texture"
- uid: "graphics.Texture.getTextureID()"
  id: "getTextureID()"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "getTextureID()"
  nameWithType: "Texture.getTextureID()"
  fullName: "graphics.Texture.getTextureID()"
  overload: "graphics.Texture.getTextureID*"
  type: "Method"
  package: "graphics"
  summary: "Get the texture's id."
  syntax:
    content: "public int getTextureID()"
    return:
      type: "int"
      description: "the id of the texture"
- uid: "graphics.Texture.getWidth()"
  id: "getWidth()"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "getWidth()"
  nameWithType: "Texture.getWidth()"
  fullName: "graphics.Texture.getWidth()"
  overload: "graphics.Texture.getWidth*"
  type: "Method"
  package: "graphics"
  summary: "Get This texture's width. Will be -1 if the instance is just a wrapper"
  syntax:
    content: "public int getWidth()"
    return:
      type: "int"
      description: "the width of the texture"
- uid: "graphics.Texture.loadImageInByteBuffer(java.lang.String)"
  id: "loadImageInByteBuffer(java.lang.String)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "loadImageInByteBuffer(String path)"
  nameWithType: "Texture.loadImageInByteBuffer(String path)"
  fullName: "graphics.Texture.loadImageInByteBuffer(String path)"
  overload: "graphics.Texture.loadImageInByteBuffer*"
  type: "Method"
  package: "graphics"
  summary: "A Function to return an image in byteBuffer"
  syntax:
    content: "public ByteBuffer loadImageInByteBuffer(String path)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "the path to the image"
    return:
      type: "java.nio.ByteBuffer"
      description: "the image in byteBuffer"
- uid: "graphics.Texture.setHeight(int)"
  id: "setHeight(int)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "setHeight(int height)"
  nameWithType: "Texture.setHeight(int height)"
  fullName: "graphics.Texture.setHeight(int height)"
  overload: "graphics.Texture.setHeight*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public void setHeight(int height)"
    parameters:
    - id: "height"
      type: "int"
- uid: "graphics.Texture.setId(int)"
  id: "setId(int)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "setId(int id)"
  nameWithType: "Texture.setId(int id)"
  fullName: "graphics.Texture.setId(int id)"
  overload: "graphics.Texture.setId*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public void setId(int id)"
    parameters:
    - id: "id"
      type: "int"
- uid: "graphics.Texture.setParameter(int,int)"
  id: "setParameter(int,int)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "setParameter(int name, int value)"
  nameWithType: "Texture.setParameter(int name, int value)"
  fullName: "graphics.Texture.setParameter(int name, int value)"
  overload: "graphics.Texture.setParameter*"
  type: "Method"
  package: "graphics"
  summary: "Sets a parameter of the texture."
  syntax:
    content: "public void setParameter(int name, int value)"
    parameters:
    - id: "name"
      type: "int"
      description: "Name of the parameter"
    - id: "value"
      type: "int"
      description: "Value to set"
- uid: "graphics.Texture.setWidth(int)"
  id: "setWidth(int)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "setWidth(int width)"
  nameWithType: "Texture.setWidth(int width)"
  fullName: "graphics.Texture.setWidth(int width)"
  overload: "graphics.Texture.setWidth*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public void setWidth(int width)"
    parameters:
    - id: "width"
      type: "int"
- uid: "graphics.Texture.toFile(java.lang.String,int,int,int)"
  id: "toFile(java.lang.String,int,int,int)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "toFile(String file, int id, int width, int height)"
  nameWithType: "Texture.toFile(String file, int id, int width, int height)"
  fullName: "graphics.Texture.toFile(String file, int id, int width, int height)"
  overload: "graphics.Texture.toFile*"
  type: "Method"
  package: "graphics"
  summary: "Will write am OpenGL Texture to the provided file"
  syntax:
    content: "public static void toFile(String file, int id, int width, int height)"
    parameters:
    - id: "file"
      type: "java.lang.String"
      description: "path where the image is to be stored with extension"
    - id: "id"
      type: "int"
      description: "id of the OpenGL Texture Resource"
    - id: "width"
      type: "int"
      description: "width of the texture"
    - id: "height"
      type: "int"
      description: "height of the texture"
- uid: "graphics.Texture.unbind()"
  id: "unbind()"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "unbind()"
  nameWithType: "Texture.unbind()"
  fullName: "graphics.Texture.unbind()"
  overload: "graphics.Texture.unbind*"
  type: "Method"
  package: "graphics"
  summary: "Unbind the texture"
  syntax:
    content: "public void unbind()"
- uid: "graphics.Texture.uploadData(int,int,int,int,java.nio.ByteBuffer)"
  id: "uploadData(int,int,int,int,java.nio.ByteBuffer)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "uploadData(int internalFormat, int width, int height, int format, ByteBuffer data)"
  nameWithType: "Texture.uploadData(int internalFormat, int width, int height, int format, ByteBuffer data)"
  fullName: "graphics.Texture.uploadData(int internalFormat, int width, int height, int format, ByteBuffer data)"
  overload: "graphics.Texture.uploadData*"
  type: "Method"
  package: "graphics"
  summary: "Uploads image data with specified internal format, width, height and image format."
  syntax:
    content: "public void uploadData(int internalFormat, int width, int height, int format, ByteBuffer data)"
    parameters:
    - id: "internalFormat"
      type: "int"
      description: "Internal format of the image data"
    - id: "width"
      type: "int"
      description: "Width of the image"
    - id: "height"
      type: "int"
      description: "Height of the image"
    - id: "format"
      type: "int"
      description: "Format of the image data"
    - id: "data"
      type: "java.nio.ByteBuffer"
      description: "Pixel data of the image"
- uid: "graphics.Texture.uploadData(int,int,java.nio.ByteBuffer)"
  id: "uploadData(int,int,java.nio.ByteBuffer)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "uploadData(int width, int height, ByteBuffer data)"
  nameWithType: "Texture.uploadData(int width, int height, ByteBuffer data)"
  fullName: "graphics.Texture.uploadData(int width, int height, ByteBuffer data)"
  overload: "graphics.Texture.uploadData*"
  type: "Method"
  package: "graphics"
  summary: "Uploads image data with specified width and height."
  syntax:
    content: "public void uploadData(int width, int height, ByteBuffer data)"
    parameters:
    - id: "width"
      type: "int"
      description: "Width of the image"
    - id: "height"
      type: "int"
      description: "Height of the image"
    - id: "data"
      type: "java.nio.ByteBuffer"
      description: "Pixel data of the image"
- uid: "graphics.Texture.wrap(int)"
  id: "wrap(int)"
  parent: "graphics.Texture"
  langs:
  - "java"
  name: "wrap(int id)"
  nameWithType: "Texture.wrap(int id)"
  fullName: "graphics.Texture.wrap(int id)"
  overload: "graphics.Texture.wrap*"
  type: "Method"
  package: "graphics"
  summary: "Wrap the given id into a texture object"
  syntax:
    content: "public static Texture wrap(int id)"
    parameters:
    - id: "id"
      type: "int"
      description: "the id to be wrapped"
    return:
      type: "graphics.Texture"
      description: "the texture instance"
references:
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "graphics.Texture.Texture*"
  name: "Texture"
  nameWithType: "Texture.Texture"
  fullName: "graphics.Texture.Texture"
  package: "graphics"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "util.specs.TextureSpec"
  name: "TextureSpec"
  nameWithType: "TextureSpec"
  fullName: "util.specs.TextureSpec"
- uid: "graphics.Texture.toFile*"
  name: "toFile"
  nameWithType: "Texture.toFile"
  fullName: "graphics.Texture.toFile"
  package: "graphics"
- uid: "java.nio.ByteBuffer"
  spec.java:
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
- uid: "graphics.Texture.uploadData*"
  name: "uploadData"
  nameWithType: "Texture.uploadData"
  fullName: "graphics.Texture.uploadData"
  package: "graphics"
- uid: "graphics.Texture.createTexture*"
  name: "createTexture"
  nameWithType: "Texture.createTexture"
  fullName: "graphics.Texture.createTexture"
  package: "graphics"
- uid: "graphics.Texture.setParameter*"
  name: "setParameter"
  nameWithType: "Texture.setParameter"
  fullName: "graphics.Texture.setParameter"
  package: "graphics"
- uid: "graphics.Texture.wrap*"
  name: "wrap"
  nameWithType: "Texture.wrap"
  fullName: "graphics.Texture.wrap"
  package: "graphics"
- uid: "graphics.Texture.bind*"
  name: "bind"
  nameWithType: "Texture.bind"
  fullName: "graphics.Texture.bind"
  package: "graphics"
- uid: "graphics.Texture.bindToSlot*"
  name: "bindToSlot"
  nameWithType: "Texture.bindToSlot"
  fullName: "graphics.Texture.bindToSlot"
  package: "graphics"
- uid: "graphics.Texture.unbind*"
  name: "unbind"
  nameWithType: "Texture.unbind"
  fullName: "graphics.Texture.unbind"
  package: "graphics"
- uid: "graphics.Texture.getWidth*"
  name: "getWidth"
  nameWithType: "Texture.getWidth"
  fullName: "graphics.Texture.getWidth"
  package: "graphics"
- uid: "graphics.Texture.getHeight*"
  name: "getHeight"
  nameWithType: "Texture.getHeight"
  fullName: "graphics.Texture.getHeight"
  package: "graphics"
- uid: "graphics.Texture.setWidth*"
  name: "setWidth"
  nameWithType: "Texture.setWidth"
  fullName: "graphics.Texture.setWidth"
  package: "graphics"
- uid: "graphics.Texture.setHeight*"
  name: "setHeight"
  nameWithType: "Texture.setHeight"
  fullName: "graphics.Texture.setHeight"
  package: "graphics"
- uid: "graphics.Texture.getTextureID*"
  name: "getTextureID"
  nameWithType: "Texture.getTextureID"
  fullName: "graphics.Texture.getTextureID"
  package: "graphics"
- uid: "graphics.Texture.getFilePath*"
  name: "getFilePath"
  nameWithType: "Texture.getFilePath"
  fullName: "graphics.Texture.getFilePath"
  package: "graphics"
- uid: "graphics.Texture.setId*"
  name: "setId"
  nameWithType: "Texture.setId"
  fullName: "graphics.Texture.setId"
  package: "graphics"
- uid: "graphics.Texture.delete*"
  name: "delete"
  nameWithType: "Texture.delete"
  fullName: "graphics.Texture.delete"
  package: "graphics"
- uid: "graphics.Texture.loadImageInByteBuffer*"
  name: "loadImageInByteBuffer"
  nameWithType: "Texture.loadImageInByteBuffer"
  fullName: "graphics.Texture.loadImageInByteBuffer"
  package: "graphics"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
