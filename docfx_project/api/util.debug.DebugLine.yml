### YamlMime:ManagedReference
items:
- uid: "util.debug.DebugLine"
  id: "DebugLine"
  parent: "util.debug"
  children:
  - "util.debug.DebugLine.DebugLine(org.joml.Vector2f,org.joml.Vector2f)"
  - "util.debug.DebugLine.DebugLine(org.joml.Vector2f,org.joml.Vector2f,graphics.Color)"
  - "util.debug.DebugLine.color"
  - "util.debug.DebugLine.dirty"
  - "util.debug.DebugLine.end"
  - "util.debug.DebugLine.isDirty()"
  - "util.debug.DebugLine.markClean()"
  - "util.debug.DebugLine.markDirty()"
  - "util.debug.DebugLine.start"
  langs:
  - "java"
  name: "DebugLine"
  nameWithType: "DebugLine"
  fullName: "util.debug.DebugLine"
  type: "Class"
  package: "util.debug"
  summary: "Represents a Line which can be rendered by DebugRenderer The most basic primitive for Debug Rendering"
  syntax:
    content: "public class DebugLine"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "util.debug.DebugLine.DebugLine(org.joml.Vector2f,org.joml.Vector2f)"
  id: "DebugLine(org.joml.Vector2f,org.joml.Vector2f)"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "DebugLine(Vector2f start, Vector2f end)"
  nameWithType: "DebugLine.DebugLine(Vector2f start, Vector2f end)"
  fullName: "util.debug.DebugLine.DebugLine(Vector2f start, Vector2f end)"
  overload: "util.debug.DebugLine.DebugLine*"
  type: "Constructor"
  package: "util.debug"
  summary: "Creates a line with a given start and end point with a White color"
  syntax:
    content: "public DebugLine(Vector2f start, Vector2f end)"
    parameters:
    - id: "start"
      type: "org.joml.Vector2f"
      description: "start point of the line"
    - id: "end"
      type: "org.joml.Vector2f"
      description: "end point of the line"
- uid: "util.debug.DebugLine.DebugLine(org.joml.Vector2f,org.joml.Vector2f,graphics.Color)"
  id: "DebugLine(org.joml.Vector2f,org.joml.Vector2f,graphics.Color)"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "DebugLine(Vector2f start, Vector2f end, Color color)"
  nameWithType: "DebugLine.DebugLine(Vector2f start, Vector2f end, Color color)"
  fullName: "util.debug.DebugLine.DebugLine(Vector2f start, Vector2f end, Color color)"
  overload: "util.debug.DebugLine.DebugLine*"
  type: "Constructor"
  package: "util.debug"
  summary: "Creates a line with a given start and end point and the specified color"
  syntax:
    content: "public DebugLine(Vector2f start, Vector2f end, Color color)"
    parameters:
    - id: "start"
      type: "org.joml.Vector2f"
      description: "start point of the line"
    - id: "end"
      type: "org.joml.Vector2f"
      description: "end point of the line"
    - id: "color"
      type: "graphics.Color"
      description: "color of the line"
- uid: "util.debug.DebugLine.color"
  id: "color"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "color"
  nameWithType: "DebugLine.color"
  fullName: "util.debug.DebugLine.color"
  type: "Field"
  package: "util.debug"
  summary: "Color of the line"
  syntax:
    content: "public Color color"
    return:
      type: "graphics.Color"
- uid: "util.debug.DebugLine.dirty"
  id: "dirty"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "dirty"
  nameWithType: "DebugLine.dirty"
  fullName: "util.debug.DebugLine.dirty"
  type: "Field"
  package: "util.debug"
  summary: "Were any values of the above changed."
  syntax:
    content: "public boolean dirty"
    return:
      type: "boolean"
- uid: "util.debug.DebugLine.end"
  id: "end"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "end"
  nameWithType: "DebugLine.end"
  fullName: "util.debug.DebugLine.end"
  type: "Field"
  package: "util.debug"
  summary: "End point of the line"
  syntax:
    content: "public Vector2f end"
    return:
      type: "org.joml.Vector2f"
- uid: "util.debug.DebugLine.isDirty()"
  id: "isDirty()"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "isDirty()"
  nameWithType: "DebugLine.isDirty()"
  fullName: "util.debug.DebugLine.isDirty()"
  overload: "util.debug.DebugLine.isDirty*"
  type: "Method"
  package: "util.debug"
  summary: "Were any values changed."
  syntax:
    content: "public boolean isDirty()"
    return:
      type: "boolean"
- uid: "util.debug.DebugLine.markClean()"
  id: "markClean()"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "markClean()"
  nameWithType: "DebugLine.markClean()"
  fullName: "util.debug.DebugLine.markClean()"
  overload: "util.debug.DebugLine.markClean*"
  type: "Method"
  package: "util.debug"
  summary: "Mark this line clean so renderer doesn't update the values of this line"
  syntax:
    content: "public void markClean()"
- uid: "util.debug.DebugLine.markDirty()"
  id: "markDirty()"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "markDirty()"
  nameWithType: "DebugLine.markDirty()"
  fullName: "util.debug.DebugLine.markDirty()"
  overload: "util.debug.DebugLine.markDirty*"
  type: "Method"
  package: "util.debug"
  summary: "Mark this line dirty so renderer can reflect changed values"
  syntax:
    content: "public void markDirty()"
- uid: "util.debug.DebugLine.start"
  id: "start"
  parent: "util.debug.DebugLine"
  langs:
  - "java"
  name: "start"
  nameWithType: "DebugLine.start"
  fullName: "util.debug.DebugLine.start"
  type: "Field"
  package: "util.debug"
  summary: "Start point for the line"
  syntax:
    content: "public Vector2f start"
    return:
      type: "org.joml.Vector2f"
references:
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "util.debug.DebugLine.DebugLine*"
  name: "DebugLine"
  nameWithType: "DebugLine.DebugLine"
  fullName: "util.debug.DebugLine.DebugLine"
  package: "util.debug"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "util.debug.DebugLine.isDirty*"
  name: "isDirty"
  nameWithType: "DebugLine.isDirty"
  fullName: "util.debug.DebugLine.isDirty"
  package: "util.debug"
- uid: "util.debug.DebugLine.markDirty*"
  name: "markDirty"
  nameWithType: "DebugLine.markDirty"
  fullName: "util.debug.DebugLine.markDirty"
  package: "util.debug"
- uid: "util.debug.DebugLine.markClean*"
  name: "markClean"
  nameWithType: "DebugLine.markClean"
  fullName: "util.debug.DebugLine.markClean"
  package: "util.debug"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
