### YamlMime:ManagedReference
items:
- uid: "io.bin.BinaryIO"
  id: "BinaryIO"
  parent: "io.bin"
  children:
  - "io.bin.BinaryIO.BinaryIO()"
  - "io.bin.BinaryIO.readData(java.io.File)"
  - "io.bin.BinaryIO.readData(java.net.URL,int)"
  - "io.bin.BinaryIO.writeData(java.io.File,byte[])"
  langs:
  - "java"
  name: "BinaryIO"
  nameWithType: "BinaryIO"
  fullName: "io.bin.BinaryIO"
  type: "Class"
  package: "io.bin"
  summary: "Some small methods to speed up binary file reading and writing"
  syntax:
    content: "public class BinaryIO"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "io.bin.BinaryIO.BinaryIO()"
  id: "BinaryIO()"
  parent: "io.bin.BinaryIO"
  langs:
  - "java"
  name: "BinaryIO()"
  nameWithType: "BinaryIO.BinaryIO()"
  fullName: "io.bin.BinaryIO.BinaryIO()"
  overload: "io.bin.BinaryIO.BinaryIO*"
  type: "Constructor"
  package: "io.bin"
  syntax:
    content: "public BinaryIO()"
- uid: "io.bin.BinaryIO.readData(java.io.File)"
  id: "readData(java.io.File)"
  parent: "io.bin.BinaryIO"
  langs:
  - "java"
  name: "readData(File file)"
  nameWithType: "BinaryIO.readData(File file)"
  fullName: "io.bin.BinaryIO.readData(File file)"
  overload: "io.bin.BinaryIO.readData*"
  type: "Method"
  package: "io.bin"
  summary: "Reads byte data from a file. Uses <xref uid=\"\" data-throw-if-not-resolved=\"false\">Files#readAllBytes(Path)</xref>."
  syntax:
    content: "public static ByteBuffer readData(File file)"
    parameters:
    - id: "file"
      type: "java.io.File"
      description: "the file to read"
    return:
      type: "java.nio.ByteBuffer"
      description: "a <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\">ByteBuffer</xref> containing all read bytes"
  exceptions:
  - type: "java.io.IOException"
- uid: "io.bin.BinaryIO.readData(java.net.URL,int)"
  id: "readData(java.net.URL,int)"
  parent: "io.bin.BinaryIO"
  langs:
  - "java"
  name: "readData(URL url, int blockSize)"
  nameWithType: "BinaryIO.readData(URL url, int blockSize)"
  fullName: "io.bin.BinaryIO.readData(URL url, int blockSize)"
  overload: "io.bin.BinaryIO.readData*"
  type: "Method"
  package: "io.bin"
  summary: "Reads data from an URL in the web. It produces a byte array containing all read data from the source with no trailing zeros."
  syntax:
    content: "public static ByteBuffer readData(URL url, int blockSize)"
    parameters:
    - id: "url"
      type: "java.net.URL"
      description: "the web url"
    - id: "blockSize"
      type: "int"
      description: "the byte blocks that will be requested at once - bigger blocks might improve speed based on connection"
    return:
      type: "java.nio.ByteBuffer"
      description: "a <xref uid=\"java.nio.ByteBuffer\" data-throw-if-not-resolved=\"false\">ByteBuffer</xref> containing all read bytes"
  exceptions:
  - type: "java.io.IOException"
- uid: "io.bin.BinaryIO.writeData(java.io.File,byte[])"
  id: "writeData(java.io.File,byte[])"
  parent: "io.bin.BinaryIO"
  langs:
  - "java"
  name: "writeData(File file, byte[] data)"
  nameWithType: "BinaryIO.writeData(File file, byte[] data)"
  fullName: "io.bin.BinaryIO.writeData(File file, byte[] data)"
  overload: "io.bin.BinaryIO.writeData*"
  type: "Method"
  package: "io.bin"
  summary: "Writes raw bytes to a file. There is no check for an existing file."
  syntax:
    content: "public static void writeData(File file, byte[] data)"
    parameters:
    - id: "file"
      type: "java.io.File"
      description: "the file to write to"
    - id: "data"
      type: "byte[]"
      description: "the data to write"
  exceptions:
  - type: "java.io.IOException"
references:
- uid: "io.bin.BinaryIO.BinaryIO*"
  name: "BinaryIO"
  nameWithType: "BinaryIO.BinaryIO"
  fullName: "io.bin.BinaryIO.BinaryIO"
  package: "io.bin"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "java.net.URL"
  spec.java:
  - uid: "java.net.URL"
    name: "URL"
    fullName: "java.net.URL"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.nio.ByteBuffer"
  spec.java:
  - uid: "java.nio.ByteBuffer"
    name: "ByteBuffer"
    fullName: "java.nio.ByteBuffer"
- uid: "io.bin.BinaryIO.readData*"
  name: "readData"
  nameWithType: "BinaryIO.readData"
  fullName: "io.bin.BinaryIO.readData"
  package: "io.bin"
- uid: "java.io.File"
  spec.java:
  - uid: "java.io.File"
    name: "File"
    fullName: "java.io.File"
- uid: "byte[]"
  spec.java:
  - uid: "byte"
    name: "byte"
    fullName: "byte"
  - name: "[]"
    fullName: "[]"
- uid: "io.bin.BinaryIO.writeData*"
  name: "writeData"
  nameWithType: "BinaryIO.writeData"
  fullName: "io.bin.BinaryIO.writeData"
  package: "io.bin"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
