### YamlMime:ManagedReference
items:
- uid: "fonts.Font"
  id: "Font"
  parent: "fonts"
  children:
  - "fonts.Font.Font()"
  - "fonts.Font.Font(boolean)"
  - "fonts.Font.Font(int)"
  - "fonts.Font.Font(int,boolean)"
  - "fonts.Font.Font(java.awt.Font)"
  - "fonts.Font.Font(java.awt.Font,boolean)"
  - "fonts.Font.Font(java.io.InputStream,int)"
  - "fonts.Font.Font(java.io.InputStream,int,boolean)"
  - "fonts.Font.Font(java.lang.String,float,boolean)"
  - "fonts.Font.getFontHeight()"
  - "fonts.Font.getGlyphs()"
  - "fonts.Font.getHeight(java.lang.CharSequence)"
  - "fonts.Font.getTexture()"
  langs:
  - "java"
  name: "Font"
  nameWithType: "Font"
  fullName: "fonts.Font"
  type: "Class"
  package: "fonts"
  summary: "This class contains a font texture for drawing text. A lot of credit for the base of this file goes to @SilverTiger on GitHub, his base has been heavily modified to work in Azurite."
  syntax:
    content: "public class Font"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "fonts.Font.Font()"
  id: "Font()"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font()"
  nameWithType: "Font.Font()"
  fullName: "fonts.Font.Font()"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a default antialiased font with monospaced glyphs and default size 16."
  syntax:
    content: "public Font()"
- uid: "fonts.Font.Font(boolean)"
  id: "Font(boolean)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font(boolean antiAlias)"
  nameWithType: "Font.Font(boolean antiAlias)"
  fullName: "fonts.Font.Font(boolean antiAlias)"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a default font with monospaced glyphs and default size 16."
  syntax:
    content: "public Font(boolean antiAlias)"
    parameters:
    - id: "antiAlias"
      type: "boolean"
      description: "Wheter the font should be antialiased or not"
- uid: "fonts.Font.Font(int)"
  id: "Font(int)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font(int size)"
  nameWithType: "Font.Font(int size)"
  fullName: "fonts.Font.Font(int size)"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a default antialiased font with monospaced glyphs and specified size."
  syntax:
    content: "public Font(int size)"
    parameters:
    - id: "size"
      type: "int"
      description: "Font size"
- uid: "fonts.Font.Font(int,boolean)"
  id: "Font(int,boolean)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font(int size, boolean antiAlias)"
  nameWithType: "Font.Font(int size, boolean antiAlias)"
  fullName: "fonts.Font.Font(int size, boolean antiAlias)"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a default font with monospaced glyphs and specified size."
  syntax:
    content: "public Font(int size, boolean antiAlias)"
    parameters:
    - id: "size"
      type: "int"
      description: "Font size"
    - id: "antiAlias"
      type: "boolean"
      description: "Wheter the font should be antialiased or not"
- uid: "fonts.Font.Font(java.awt.Font)"
  id: "Font(java.awt.Font)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font(Font font)"
  nameWithType: "Font.Font(Font font)"
  fullName: "fonts.Font.Font(Font font)"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a antialiased font from an AWT Font."
  syntax:
    content: "public Font(Font font)"
    parameters:
    - id: "font"
      type: "java.awt.Font"
      description: "The AWT Font"
- uid: "fonts.Font.Font(java.awt.Font,boolean)"
  id: "Font(java.awt.Font,boolean)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font(Font font, boolean antiAlias)"
  nameWithType: "Font.Font(Font font, boolean antiAlias)"
  fullName: "fonts.Font.Font(Font font, boolean antiAlias)"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a font from an AWT Font."
  syntax:
    content: "public Font(Font font, boolean antiAlias)"
    parameters:
    - id: "font"
      type: "java.awt.Font"
      description: "The AWT Font"
    - id: "antiAlias"
      type: "boolean"
      description: "Wheter the font should be antialiased or not"
- uid: "fonts.Font.Font(java.io.InputStream,int)"
  id: "Font(java.io.InputStream,int)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font(InputStream in, int size)"
  nameWithType: "Font.Font(InputStream in, int size)"
  fullName: "fonts.Font.Font(InputStream in, int size)"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a antialiased Font from an input stream."
  syntax:
    content: "public Font(InputStream in, int size)"
    parameters:
    - id: "in"
      type: "java.io.InputStream"
      description: "The input stream"
    - id: "size"
      type: "int"
      description: "Font size"
- uid: "fonts.Font.Font(java.io.InputStream,int,boolean)"
  id: "Font(java.io.InputStream,int,boolean)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font(InputStream in, int size, boolean antiAlias)"
  nameWithType: "Font.Font(InputStream in, int size, boolean antiAlias)"
  fullName: "fonts.Font.Font(InputStream in, int size, boolean antiAlias)"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a Font from an input stream."
  syntax:
    content: "public Font(InputStream in, int size, boolean antiAlias)"
    parameters:
    - id: "in"
      type: "java.io.InputStream"
      description: "The input stream"
    - id: "size"
      type: "int"
      description: "Font size"
    - id: "antiAlias"
      type: "boolean"
      description: "Wheter the font should be antialiased or not"
- uid: "fonts.Font.Font(java.lang.String,float,boolean)"
  id: "Font(java.lang.String,float,boolean)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "Font(String path, float size, boolean antiAlias)"
  nameWithType: "Font.Font(String path, float size, boolean antiAlias)"
  fullName: "fonts.Font.Font(String path, float size, boolean antiAlias)"
  overload: "fonts.Font.Font*"
  type: "Constructor"
  package: "fonts"
  summary: "Creates a Font from an input stream."
  syntax:
    content: "public Font(String path, float size, boolean antiAlias)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "Path to TTF file"
    - id: "size"
      type: "float"
      description: "Font size"
    - id: "antiAlias"
      type: "boolean"
      description: "Whether the font should be antialiased or not"
- uid: "fonts.Font.getFontHeight()"
  id: "getFontHeight()"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "getFontHeight()"
  nameWithType: "Font.getFontHeight()"
  fullName: "fonts.Font.getFontHeight()"
  overload: "fonts.Font.getFontHeight*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public int getFontHeight()"
    return:
      type: "int"
- uid: "fonts.Font.getGlyphs()"
  id: "getGlyphs()"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "getGlyphs()"
  nameWithType: "Font.getGlyphs()"
  fullName: "fonts.Font.getGlyphs()"
  overload: "fonts.Font.getGlyphs*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public Map<Character,Glyph> getGlyphs()"
    return:
      type: "java.util.Map<java.lang.Character,fonts.Glyph>"
- uid: "fonts.Font.getHeight(java.lang.CharSequence)"
  id: "getHeight(java.lang.CharSequence)"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "getHeight(CharSequence text)"
  nameWithType: "Font.getHeight(CharSequence text)"
  fullName: "fonts.Font.getHeight(CharSequence text)"
  overload: "fonts.Font.getHeight*"
  type: "Method"
  package: "fonts"
  summary: "Gets the height of the specified text."
  syntax:
    content: "public int getHeight(CharSequence text)"
    parameters:
    - id: "text"
      type: "java.lang.CharSequence"
      description: "The text"
    return:
      type: "int"
      description: "Height in pixels of the text."
- uid: "fonts.Font.getTexture()"
  id: "getTexture()"
  parent: "fonts.Font"
  langs:
  - "java"
  name: "getTexture()"
  nameWithType: "Font.getTexture()"
  fullName: "fonts.Font.getTexture()"
  overload: "fonts.Font.getTexture*"
  type: "Method"
  package: "fonts"
  syntax:
    content: "public Texture getTexture()"
    return:
      type: "graphics.Texture"
references:
- uid: "fonts.Font.Font*"
  name: "Font"
  nameWithType: "Font.Font"
  fullName: "fonts.Font.Font"
  package: "fonts"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.io.InputStream"
  spec.java:
  - uid: "java.io.InputStream"
    name: "InputStream"
    fullName: "java.io.InputStream"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "java.awt.Font"
  spec.java:
  - uid: "java.awt.Font"
    name: "Font"
    fullName: "java.awt.Font"
- uid: "java.lang.CharSequence"
  spec.java:
  - uid: "java.lang.CharSequence"
    name: "CharSequence"
    fullName: "java.lang.CharSequence"
- uid: "fonts.Font.getHeight*"
  name: "getHeight"
  nameWithType: "Font.getHeight"
  fullName: "fonts.Font.getHeight"
  package: "fonts"
- uid: "fonts.Font.getFontHeight*"
  name: "getFontHeight"
  nameWithType: "Font.getFontHeight"
  fullName: "fonts.Font.getFontHeight"
  package: "fonts"
- uid: "java.util.Map<java.lang.Character,fonts.Glyph>"
  spec.java:
  - uid: "java.util.Map"
    name: "Map"
    fullName: "java.util.Map"
  - name: "<"
    fullName: "<"
  - uid: "java.lang.Character"
    name: "Character"
    fullName: "java.lang.Character"
  - name: ","
    fullName: ","
  - uid: "fonts.Glyph"
    name: "Glyph"
    fullName: "fonts.Glyph"
  - name: ">"
    fullName: ">"
- uid: "fonts.Font.getGlyphs*"
  name: "getGlyphs"
  nameWithType: "Font.getGlyphs"
  fullName: "fonts.Font.getGlyphs"
  package: "fonts"
- uid: "graphics.Texture"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
- uid: "fonts.Font.getTexture*"
  name: "getTexture"
  nameWithType: "Font.getTexture"
  fullName: "fonts.Font.getTexture"
  package: "fonts"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Character,fonts.Glyph"
  name: "Character,Glyph"
  nameWithType: "Character,Glyph"
  fullName: "java.lang.Character,fonts.Glyph"
- uid: "java.util.Map"
  name: "Map"
  nameWithType: "Map"
  fullName: "java.util.Map"
