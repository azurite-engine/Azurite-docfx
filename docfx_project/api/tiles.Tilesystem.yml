### YamlMime:ManagedReference
items:
- uid: "tiles.Tilesystem"
  id: "Tilesystem"
  parent: "tiles"
  children:
  - "tiles.Tilesystem.Tilesystem(java.lang.String,int,int)"
  - "tiles.Tilesystem.getAt(int,int,int,int[])"
  - "tiles.Tilesystem.getIndex(int,int)"
  langs:
  - "java"
  name: "Tilesystem"
  nameWithType: "Tilesystem"
  fullName: "tiles.Tilesystem"
  type: "Class"
  package: "tiles"
  summary: "The Tilesystem class loads a .tmx file (XML file format for the Tiled map editor) and generates a 2D array of GameObjects with SpriteRenderers corresponding to the texture determined by the .tmx file. Currently only Axis-aligned maps are supported (no isometric or hexagonal maps right now)."
  syntax:
    content: "public class Tilesystem"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "tiles.Tilesystem.Tilesystem(java.lang.String,int,int)"
  id: "Tilesystem(java.lang.String,int,int)"
  parent: "tiles.Tilesystem"
  langs:
  - "java"
  name: "Tilesystem(String tmxFile, int width, int height)"
  nameWithType: "Tilesystem.Tilesystem(String tmxFile, int width, int height)"
  fullName: "tiles.Tilesystem.Tilesystem(String tmxFile, int width, int height)"
  overload: "tiles.Tilesystem.Tilesystem*"
  type: "Constructor"
  package: "tiles"
  syntax:
    content: "public Tilesystem(String tmxFile, int width, int height)"
    parameters:
    - id: "tmxFile"
      type: "java.lang.String"
    - id: "width"
      type: "int"
    - id: "height"
      type: "int"
- uid: "tiles.Tilesystem.getAt(int,int,int,int[])"
  id: "getAt(int,int,int,int[])"
  parent: "tiles.Tilesystem"
  langs:
  - "java"
  name: "getAt(int x, int y, int dimensionWidth, int[] map)"
  nameWithType: "Tilesystem.getAt(int x, int y, int dimensionWidth, int[] map)"
  fullName: "tiles.Tilesystem.getAt(int x, int y, int dimensionWidth, int[] map)"
  overload: "tiles.Tilesystem.getAt*"
  type: "Method"
  package: "tiles"
  syntax:
    content: "public int getAt(int x, int y, int dimensionWidth, int[] map)"
    parameters:
    - id: "x"
      type: "int"
    - id: "y"
      type: "int"
    - id: "dimensionWidth"
      type: "int"
    - id: "map"
      type: "int[]"
    return:
      type: "int"
- uid: "tiles.Tilesystem.getIndex(int,int)"
  id: "getIndex(int,int)"
  parent: "tiles.Tilesystem"
  langs:
  - "java"
  name: "getIndex(int worldX, int worldY)"
  nameWithType: "Tilesystem.getIndex(int worldX, int worldY)"
  fullName: "tiles.Tilesystem.getIndex(int worldX, int worldY)"
  overload: "tiles.Tilesystem.getIndex*"
  type: "Method"
  package: "tiles"
  syntax:
    content: "public int[] getIndex(int worldX, int worldY)"
    parameters:
    - id: "worldX"
      type: "int"
    - id: "worldY"
      type: "int"
    return:
      type: "int[]"
references:
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "tiles.Tilesystem.Tilesystem*"
  name: "Tilesystem"
  nameWithType: "Tilesystem.Tilesystem"
  fullName: "tiles.Tilesystem.Tilesystem"
  package: "tiles"
- uid: "int[]"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
  - name: "[]"
    fullName: "[]"
- uid: "tiles.Tilesystem.getAt*"
  name: "getAt"
  nameWithType: "Tilesystem.getAt"
  fullName: "tiles.Tilesystem.getAt"
  package: "tiles"
- uid: "tiles.Tilesystem.getIndex*"
  name: "getIndex"
  nameWithType: "Tilesystem.getIndex"
  fullName: "tiles.Tilesystem.getIndex"
  package: "tiles"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
