### YamlMime:ManagedReference
items:
- uid: "physics.collision.shape.Circle"
  id: "Circle"
  parent: "physics.collision.shape"
  children:
  - "physics.collision.shape.Circle.Circle(org.joml.Vector2f,float)"
  - "physics.collision.shape.Circle.adjust()"
  - "physics.collision.shape.Circle.intersection(physics.collision.shape.Circle)"
  - "physics.collision.shape.Circle.rayCast(org.joml.Vector2f,org.joml.Vector2f,float)"
  - "physics.collision.shape.Circle.supportPoint(org.joml.Vector2f)"
  langs:
  - "java"
  name: "Circle"
  nameWithType: "Circle"
  fullName: "physics.collision.shape.Circle"
  type: "Class"
  package: "physics.collision.shape"
  summary: "The shape implementation of a circle."
  syntax:
    content: "public class Circle extends PrimitiveShape"
  inheritance:
  - "java.lang.Object"
  - "physics.collision.shape.PrimitiveShape"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "physics.collision.shape.PrimitiveShape.adjust()"
  - "physics.collision.shape.PrimitiveShape.boundingSphere()"
  - "physics.collision.shape.PrimitiveShape.centroid()"
  - "physics.collision.shape.PrimitiveShape.faces()"
  - "physics.collision.shape.PrimitiveShape.getAbsolutePoints()"
  - "physics.collision.shape.PrimitiveShape.init()"
  - "physics.collision.shape.PrimitiveShape.initSphere()"
  - "physics.collision.shape.PrimitiveShape.position()"
  - "physics.collision.shape.PrimitiveShape.rotateShape(float,physics.collision.shape.RotationType,org.joml.Vector2f)"
  - "physics.collision.shape.PrimitiveShape.setPosition(float,float)"
  - "physics.collision.shape.PrimitiveShape.setPosition(org.joml.Vector2f)"
  - "physics.collision.shape.PrimitiveShape.supportPoint(org.joml.Vector2f)"
  - "physics.collision.shape.PrimitiveShape.type()"
  - "physics.collision.shape.PrimitiveShape.vertices()"
- uid: "physics.collision.shape.Circle.Circle(org.joml.Vector2f,float)"
  id: "Circle(org.joml.Vector2f,float)"
  parent: "physics.collision.shape.Circle"
  langs:
  - "java"
  name: "Circle(Vector2f relativeCenter, float radius)"
  nameWithType: "Circle.Circle(Vector2f relativeCenter, float radius)"
  fullName: "physics.collision.shape.Circle.Circle(Vector2f relativeCenter, float radius)"
  overload: "physics.collision.shape.Circle.Circle*"
  type: "Constructor"
  package: "physics.collision.shape"
  syntax:
    content: "public Circle(Vector2f relativeCenter, float radius)"
    parameters:
    - id: "relativeCenter"
      type: "org.joml.Vector2f"
    - id: "radius"
      type: "float"
- uid: "physics.collision.shape.Circle.adjust()"
  id: "adjust()"
  parent: "physics.collision.shape.Circle"
  langs:
  - "java"
  name: "adjust()"
  nameWithType: "Circle.adjust()"
  fullName: "physics.collision.shape.Circle.adjust()"
  overload: "physics.collision.shape.Circle.adjust*"
  overridden: "physics.collision.shape.PrimitiveShape.adjust()"
  type: "Method"
  package: "physics.collision.shape"
  summary: "Will be called by <xref uid=\"physics.collision.shape.PrimitiveShape.setPosition(org.joml.Vector2f)\" data-throw-if-not-resolved=\"false\">PrimitiveShape#setPosition(Vector2f)</xref> after the new position was set. Used to recalculate the absolute coordinates."
  syntax:
    content: "public void adjust()"
- uid: "physics.collision.shape.Circle.intersection(physics.collision.shape.Circle)"
  id: "intersection(physics.collision.shape.Circle)"
  parent: "physics.collision.shape.Circle"
  langs:
  - "java"
  name: "intersection(Circle circle)"
  nameWithType: "Circle.intersection(Circle circle)"
  fullName: "physics.collision.shape.Circle.intersection(Circle circle)"
  overload: "physics.collision.shape.Circle.intersection*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "Check intersection between two circles efficiently without using square roots. Will only produce wrong results originated in missing precision in floating point numbers."
  syntax:
    content: "public boolean intersection(Circle circle)"
    parameters:
    - id: "circle"
      type: "physics.collision.shape.Circle"
      description: "the circle to compare to"
    return:
      type: "boolean"
      description: "true if the given circle intersects with this one"
- uid: "physics.collision.shape.Circle.rayCast(org.joml.Vector2f,org.joml.Vector2f,float)"
  id: "rayCast(org.joml.Vector2f,org.joml.Vector2f,float)"
  parent: "physics.collision.shape.Circle"
  langs:
  - "java"
  name: "rayCast(Vector2f start, Vector2f rayDirection, float maxLength)"
  nameWithType: "Circle.rayCast(Vector2f start, Vector2f rayDirection, float maxLength)"
  fullName: "physics.collision.shape.Circle.rayCast(Vector2f start, Vector2f rayDirection, float maxLength)"
  overload: "physics.collision.shape.Circle.rayCast*"
  type: "Method"
  package: "physics.collision.shape"
  summary: "Calculate a raycast against this circle using absolute coordinates."
  syntax:
    content: "public RayCastResult rayCast(Vector2f start, Vector2f rayDirection, float maxLength)"
    parameters:
    - id: "start"
      type: "org.joml.Vector2f"
      description: "the starting point of the raycast"
    - id: "rayDirection"
      type: "org.joml.Vector2f"
      description: "the direction of the ray, it doesnt have to be normalized, it will be by the method"
    - id: "maxLength"
      type: "float"
      description: "the max length of ray, if it can't hit within this range, it doesnt hit"
    return:
      type: "physics.collision.RayCastResult"
      description: "the result of the raycast"
- uid: "physics.collision.shape.Circle.supportPoint(org.joml.Vector2f)"
  id: "supportPoint(org.joml.Vector2f)"
  parent: "physics.collision.shape.Circle"
  langs:
  - "java"
  name: "supportPoint(Vector2f v)"
  nameWithType: "Circle.supportPoint(Vector2f v)"
  fullName: "physics.collision.shape.Circle.supportPoint(Vector2f v)"
  overload: "physics.collision.shape.Circle.supportPoint*"
  overridden: "physics.collision.shape.PrimitiveShape.supportPoint(org.joml.Vector2f)"
  type: "Method"
  package: "physics.collision.shape"
  summary: "According to GJKSM this method is supposed to calculate the point of the shape, that is most in direction of v. The general rule is, the more primitive the shape is, the more efficient this method can be. This method may be described as max\\{v\\*x,x element of Shape\\} for any complex shape."
  syntax:
    content: "public Vector2f supportPoint(Vector2f v)"
    parameters:
    - id: "v"
      type: "org.joml.Vector2f"
    return:
      type: "org.joml.Vector2f"
references:
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "physics.collision.shape.Circle.Circle*"
  name: "Circle"
  nameWithType: "Circle.Circle"
  fullName: "physics.collision.shape.Circle.Circle"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.Circle.adjust*"
  name: "adjust"
  nameWithType: "Circle.adjust"
  fullName: "physics.collision.shape.Circle.adjust"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.Circle.supportPoint*"
  name: "supportPoint"
  nameWithType: "Circle.supportPoint"
  fullName: "physics.collision.shape.Circle.supportPoint"
  package: "physics.collision.shape"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "physics.collision.shape.Circle.intersection*"
  name: "intersection"
  nameWithType: "Circle.intersection"
  fullName: "physics.collision.shape.Circle.intersection"
  package: "physics.collision.shape"
- uid: "physics.collision.RayCastResult"
  name: "RayCastResult"
  nameWithType: "RayCastResult"
  fullName: "physics.collision.RayCastResult"
- uid: "physics.collision.shape.Circle.rayCast*"
  name: "rayCast"
  nameWithType: "Circle.rayCast"
  fullName: "physics.collision.shape.Circle.rayCast"
  package: "physics.collision.shape"
- uid: "physics.collision.shape.PrimitiveShape"
  name: "PrimitiveShape"
  nameWithType: "PrimitiveShape"
  fullName: "physics.collision.shape.PrimitiveShape"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "physics.collision.shape.PrimitiveShape.centroid()"
  name: "PrimitiveShape.centroid()"
  nameWithType: "PrimitiveShape.centroid()"
  fullName: "physics.collision.shape.PrimitiveShape.centroid()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "physics.collision.shape.PrimitiveShape.initSphere()"
  name: "PrimitiveShape.initSphere()"
  nameWithType: "PrimitiveShape.initSphere()"
  fullName: "physics.collision.shape.PrimitiveShape.initSphere()"
- uid: "physics.collision.shape.PrimitiveShape.faces()"
  name: "PrimitiveShape.faces()"
  nameWithType: "PrimitiveShape.faces()"
  fullName: "physics.collision.shape.PrimitiveShape.faces()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "physics.collision.shape.PrimitiveShape.vertices()"
  name: "PrimitiveShape.vertices()"
  nameWithType: "PrimitiveShape.vertices()"
  fullName: "physics.collision.shape.PrimitiveShape.vertices()"
- uid: "physics.collision.shape.PrimitiveShape.adjust()"
  name: "PrimitiveShape.adjust()"
  nameWithType: "PrimitiveShape.adjust()"
  fullName: "physics.collision.shape.PrimitiveShape.adjust()"
- uid: "physics.collision.shape.PrimitiveShape.getAbsolutePoints()"
  name: "PrimitiveShape.getAbsolutePoints()"
  nameWithType: "PrimitiveShape.getAbsolutePoints()"
  fullName: "physics.collision.shape.PrimitiveShape.getAbsolutePoints()"
- uid: "physics.collision.shape.PrimitiveShape.setPosition(org.joml.Vector2f)"
  name: "PrimitiveShape.setPosition(Vector2f)"
  nameWithType: "PrimitiveShape.setPosition(Vector2f)"
  fullName: "physics.collision.shape.PrimitiveShape.setPosition(org.joml.Vector2f)"
- uid: "physics.collision.shape.PrimitiveShape.setPosition(float,float)"
  name: "PrimitiveShape.setPosition(float,float)"
  nameWithType: "PrimitiveShape.setPosition(float,float)"
  fullName: "physics.collision.shape.PrimitiveShape.setPosition(float,float)"
- uid: "physics.collision.shape.PrimitiveShape.supportPoint(org.joml.Vector2f)"
  name: "PrimitiveShape.supportPoint(Vector2f)"
  nameWithType: "PrimitiveShape.supportPoint(Vector2f)"
  fullName: "physics.collision.shape.PrimitiveShape.supportPoint(org.joml.Vector2f)"
- uid: "physics.collision.shape.PrimitiveShape.rotateShape(float,physics.collision.shape.RotationType,org.joml.Vector2f)"
  name: "PrimitiveShape.rotateShape(float,RotationType,Vector2f)"
  nameWithType: "PrimitiveShape.rotateShape(float,RotationType,Vector2f)"
  fullName: "physics.collision.shape.PrimitiveShape.rotateShape(float,physics.collision.shape.RotationType,org.joml.Vector2f)"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "physics.collision.shape.PrimitiveShape.type()"
  name: "PrimitiveShape.type()"
  nameWithType: "PrimitiveShape.type()"
  fullName: "physics.collision.shape.PrimitiveShape.type()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "physics.collision.shape.PrimitiveShape.boundingSphere()"
  name: "PrimitiveShape.boundingSphere()"
  nameWithType: "PrimitiveShape.boundingSphere()"
  fullName: "physics.collision.shape.PrimitiveShape.boundingSphere()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "physics.collision.shape.PrimitiveShape.position()"
  name: "PrimitiveShape.position()"
  nameWithType: "PrimitiveShape.position()"
  fullName: "physics.collision.shape.PrimitiveShape.position()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "physics.collision.shape.PrimitiveShape.init()"
  name: "PrimitiveShape.init()"
  nameWithType: "PrimitiveShape.init()"
  fullName: "physics.collision.shape.PrimitiveShape.init()"
