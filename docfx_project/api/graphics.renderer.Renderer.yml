### YamlMime:ManagedReference
items:
- uid: "graphics.renderer.Renderer"
  id: "Renderer"
  parent: "graphics.renderer"
  children:
  - "graphics.renderer.Renderer.Renderer()"
  - "graphics.renderer.Renderer.add(ecs.GameObject)"
  - "graphics.renderer.Renderer.batches"
  - "graphics.renderer.Renderer.clean()"
  - "graphics.renderer.Renderer.createBatch(int)"
  - "graphics.renderer.Renderer.createFramebuffer()"
  - "graphics.renderer.Renderer.createShader()"
  - "graphics.renderer.Renderer.fetchColorAttachment(int)"
  - "graphics.renderer.Renderer.framebuffer"
  - "graphics.renderer.Renderer.getAvailableBatch(graphics.Texture,int)"
  - "graphics.renderer.Renderer.init()"
  - "graphics.renderer.Renderer.noRebuffer"
  - "graphics.renderer.Renderer.prepare()"
  - "graphics.renderer.Renderer.rebuffer()"
  - "graphics.renderer.Renderer.remove(ecs.GameObject)"
  - "graphics.renderer.Renderer.render()"
  - "graphics.renderer.Renderer.textureSlots"
  - "graphics.renderer.Renderer.uploadUniforms(graphics.Shader)"
  langs:
  - "java"
  name: "Renderer"
  nameWithType: "Renderer"
  fullName: "graphics.renderer.Renderer"
  type: "Class"
  package: "graphics.renderer"
  summary: "A renderer is responsible for taking collected data of a specified type, formatting it for a selected shader, and rendering it. Every renderer has an associated `RenderBatch` to render. The pipeline for processing the metadata of a render batch and drawing batched data is as follows:\n\n1.  The `Renderer` class is extended by another class specified to render a certain type of data batch; for the sake of example, let's use a quadrilateral render batch. A shader is also created with the same vertex properties specified in the render batch.\n2.  A `Shader` object is then created, encapsulating the `uniform`s and `layout`s of the shader's source code. It is then attached to this renderer.\n3.  Based on the `uniform`s of the shader, various bits of data is submitted to the GPU, like camera position, pointlight position, etc.\n4.  After shader parsing and handling, the data is rendered.\n\nA renderer also specifies a `framebuffer`, which acts as, well, a buffer which GPU pixel data is stored in to be drawn all at once on the monitor."
  syntax:
    content: "public abstract class Renderer"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "graphics.renderer.Renderer.Renderer()"
  id: "Renderer()"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "Renderer()"
  nameWithType: "Renderer.Renderer()"
  fullName: "graphics.renderer.Renderer.Renderer()"
  overload: "graphics.renderer.Renderer.Renderer*"
  type: "Constructor"
  package: "graphics.renderer"
  syntax:
    content: "public Renderer()"
- uid: "graphics.renderer.Renderer.add(ecs.GameObject)"
  id: "add(ecs.GameObject)"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "add(GameObject gameObject)"
  nameWithType: "Renderer.add(GameObject gameObject)"
  fullName: "graphics.renderer.Renderer.add(GameObject gameObject)"
  overload: "graphics.renderer.Renderer.add*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Add a gameObject to the renderer, and if it contains a component that affects rendering, like a sprite or light, those are added to a batch."
  syntax:
    content: "public void add(GameObject gameObject)"
    parameters:
    - id: "gameObject"
      type: "ecs.GameObject"
      description: "the GameObject with renderable components"
- uid: "graphics.renderer.Renderer.batches"
  id: "batches"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "batches"
  nameWithType: "Renderer.batches"
  fullName: "graphics.renderer.Renderer.batches"
  type: "Field"
  package: "graphics.renderer"
  summary: "A list of batches"
  syntax:
    content: "protected final List<RenderBatch> batches"
    return:
      type: "java.util.List<graphics.renderer.RenderBatch>"
- uid: "graphics.renderer.Renderer.clean()"
  id: "clean()"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "clean()"
  nameWithType: "Renderer.clean()"
  fullName: "graphics.renderer.Renderer.clean()"
  overload: "graphics.renderer.Renderer.clean*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Delete all the Batches."
  syntax:
    content: "public void clean()"
- uid: "graphics.renderer.Renderer.createBatch(int)"
  id: "createBatch(int)"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "createBatch(int zIndex)"
  nameWithType: "Renderer.createBatch(int zIndex)"
  fullName: "graphics.renderer.Renderer.createBatch(int zIndex)"
  overload: "graphics.renderer.Renderer.createBatch*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Create a new Batch with appropriate parameters"
  syntax:
    content: "protected abstract RenderBatch createBatch(int zIndex)"
    parameters:
    - id: "zIndex"
      type: "int"
    return:
      type: "graphics.renderer.RenderBatch"
      description: "a new batch"
- uid: "graphics.renderer.Renderer.createFramebuffer()"
  id: "createFramebuffer()"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "createFramebuffer()"
  nameWithType: "Renderer.createFramebuffer()"
  fullName: "graphics.renderer.Renderer.createFramebuffer()"
  overload: "graphics.renderer.Renderer.createFramebuffer*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Create a framebuffer"
  syntax:
    content: "protected abstract Framebuffer createFramebuffer()"
    return:
      type: "graphics.Framebuffer"
      description: "the created fbo"
- uid: "graphics.renderer.Renderer.createShader()"
  id: "createShader()"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "createShader()"
  nameWithType: "Renderer.createShader()"
  fullName: "graphics.renderer.Renderer.createShader()"
  overload: "graphics.renderer.Renderer.createShader*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Create a shader"
  syntax:
    content: "protected abstract Shader createShader()"
    return:
      type: "graphics.Shader"
      description: "the created shader"
- uid: "graphics.renderer.Renderer.fetchColorAttachment(int)"
  id: "fetchColorAttachment(int)"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "fetchColorAttachment(int index)"
  nameWithType: "Renderer.fetchColorAttachment(int index)"
  fullName: "graphics.renderer.Renderer.fetchColorAttachment(int index)"
  overload: "graphics.renderer.Renderer.fetchColorAttachment*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Get a color attachment texture from the framebuffer"
  syntax:
    content: "public Texture fetchColorAttachment(int index)"
    parameters:
    - id: "index"
      type: "int"
      description: "index of the required color attachment texture. Will return -1 if there is no attachment at that index."
    return:
      type: "graphics.Texture"
      description: "the texture ID of the attachment"
- uid: "graphics.renderer.Renderer.framebuffer"
  id: "framebuffer"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "framebuffer"
  nameWithType: "Renderer.framebuffer"
  fullName: "graphics.renderer.Renderer.framebuffer"
  type: "Field"
  package: "graphics.renderer"
  summary: "Framebuffer to which this renderer will render"
  syntax:
    content: "public Framebuffer framebuffer"
    return:
      type: "graphics.Framebuffer"
- uid: "graphics.renderer.Renderer.getAvailableBatch(graphics.Texture,int)"
  id: "getAvailableBatch(graphics.Texture,int)"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "getAvailableBatch(Texture texture, int reqdZ)"
  nameWithType: "Renderer.getAvailableBatch(Texture texture, int reqdZ)"
  fullName: "graphics.renderer.Renderer.getAvailableBatch(Texture texture, int reqdZ)"
  overload: "graphics.renderer.Renderer.getAvailableBatch*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Get the batch in which the current data can be submitted Has to be called PER PRIMITIVE SUBMISSION"
  syntax:
    content: "public RenderBatch getAvailableBatch(Texture texture, int reqdZ)"
    parameters:
    - id: "texture"
      type: "graphics.Texture"
    - id: "reqdZ"
      type: "int"
    return:
      type: "graphics.renderer.RenderBatch"
- uid: "graphics.renderer.Renderer.init()"
  id: "init()"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "init()"
  nameWithType: "Renderer.init()"
  fullName: "graphics.renderer.Renderer.init()"
  overload: "graphics.renderer.Renderer.init*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Creates the renderer's shader and framebuffer"
  syntax:
    content: "public void init()"
- uid: "graphics.renderer.Renderer.noRebuffer"
  id: "noRebuffer"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "noRebuffer"
  nameWithType: "Renderer.noRebuffer"
  fullName: "graphics.renderer.Renderer.noRebuffer"
  type: "Field"
  package: "graphics.renderer"
  syntax:
    content: "protected boolean noRebuffer"
    return:
      type: "boolean"
- uid: "graphics.renderer.Renderer.prepare()"
  id: "prepare()"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "prepare()"
  nameWithType: "Renderer.prepare()"
  fullName: "graphics.renderer.Renderer.prepare()"
  overload: "graphics.renderer.Renderer.prepare*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Prepare for rendering. Do anything like setting background here."
  syntax:
    content: "protected abstract void prepare()"
- uid: "graphics.renderer.Renderer.rebuffer()"
  id: "rebuffer()"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "rebuffer()"
  nameWithType: "Renderer.rebuffer()"
  fullName: "graphics.renderer.Renderer.rebuffer()"
  overload: "graphics.renderer.Renderer.rebuffer*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Rebuffer all the data into batches"
  syntax:
    content: "protected abstract void rebuffer()"
- uid: "graphics.renderer.Renderer.remove(ecs.GameObject)"
  id: "remove(ecs.GameObject)"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "remove(GameObject gameObject)"
  nameWithType: "Renderer.remove(GameObject gameObject)"
  fullName: "graphics.renderer.Renderer.remove(GameObject gameObject)"
  overload: "graphics.renderer.Renderer.remove*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Remove a gameObject from the renderer if it contains the component that gets rendered."
  syntax:
    content: "public void remove(GameObject gameObject)"
    parameters:
    - id: "gameObject"
      type: "ecs.GameObject"
      description: "the GameObject with renderable componentsl"
- uid: "graphics.renderer.Renderer.render()"
  id: "render()"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "render()"
  nameWithType: "Renderer.render()"
  fullName: "graphics.renderer.Renderer.render()"
  overload: "graphics.renderer.Renderer.render*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Loop through all render batches and render them"
  syntax:
    content: "public void render()"
- uid: "graphics.renderer.Renderer.textureSlots"
  id: "textureSlots"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "textureSlots"
  nameWithType: "Renderer.textureSlots"
  fullName: "graphics.renderer.Renderer.textureSlots"
  type: "Field"
  package: "graphics.renderer"
  summary: "Texture slots to be uploaded to the shader. You don't have to upload them in your custom renderer."
  syntax:
    content: "protected final int[] textureSlots"
    return:
      type: "int[]"
- uid: "graphics.renderer.Renderer.uploadUniforms(graphics.Shader)"
  id: "uploadUniforms(graphics.Shader)"
  parent: "graphics.renderer.Renderer"
  langs:
  - "java"
  name: "uploadUniforms(Shader shader)"
  nameWithType: "Renderer.uploadUniforms(Shader shader)"
  fullName: "graphics.renderer.Renderer.uploadUniforms(Shader shader)"
  overload: "graphics.renderer.Renderer.uploadUniforms*"
  type: "Method"
  package: "graphics.renderer"
  summary: "Upload the required uniforms"
  syntax:
    content: "protected abstract void uploadUniforms(Shader shader)"
    parameters:
    - id: "shader"
      type: "graphics.Shader"
      description: "the shader"
references:
- uid: "graphics.renderer.Renderer.Renderer*"
  name: "Renderer"
  nameWithType: "Renderer.Renderer"
  fullName: "graphics.renderer.Renderer.Renderer"
  package: "graphics.renderer"
- uid: "graphics.Shader"
  name: "Shader"
  nameWithType: "Shader"
  fullName: "graphics.Shader"
- uid: "graphics.renderer.Renderer.createShader*"
  name: "createShader"
  nameWithType: "Renderer.createShader"
  fullName: "graphics.renderer.Renderer.createShader"
  package: "graphics.renderer"
- uid: "graphics.Framebuffer"
  name: "Framebuffer"
  nameWithType: "Framebuffer"
  fullName: "graphics.Framebuffer"
- uid: "graphics.renderer.Renderer.createFramebuffer*"
  name: "createFramebuffer"
  nameWithType: "Renderer.createFramebuffer"
  fullName: "graphics.renderer.Renderer.createFramebuffer"
  package: "graphics.renderer"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "graphics.renderer.RenderBatch"
  name: "RenderBatch"
  nameWithType: "RenderBatch"
  fullName: "graphics.renderer.RenderBatch"
- uid: "graphics.renderer.Renderer.createBatch*"
  name: "createBatch"
  nameWithType: "Renderer.createBatch"
  fullName: "graphics.renderer.Renderer.createBatch"
  package: "graphics.renderer"
- uid: "graphics.renderer.Renderer.uploadUniforms*"
  name: "uploadUniforms"
  nameWithType: "Renderer.uploadUniforms"
  fullName: "graphics.renderer.Renderer.uploadUniforms"
  package: "graphics.renderer"
- uid: "graphics.renderer.Renderer.rebuffer*"
  name: "rebuffer"
  nameWithType: "Renderer.rebuffer"
  fullName: "graphics.renderer.Renderer.rebuffer"
  package: "graphics.renderer"
- uid: "graphics.Texture"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
- uid: "graphics.renderer.Renderer.getAvailableBatch*"
  name: "getAvailableBatch"
  nameWithType: "Renderer.getAvailableBatch"
  fullName: "graphics.renderer.Renderer.getAvailableBatch"
  package: "graphics.renderer"
- uid: "ecs.GameObject"
  name: "GameObject"
  nameWithType: "GameObject"
  fullName: "ecs.GameObject"
- uid: "graphics.renderer.Renderer.add*"
  name: "add"
  nameWithType: "Renderer.add"
  fullName: "graphics.renderer.Renderer.add"
  package: "graphics.renderer"
- uid: "graphics.renderer.Renderer.remove*"
  name: "remove"
  nameWithType: "Renderer.remove"
  fullName: "graphics.renderer.Renderer.remove"
  package: "graphics.renderer"
- uid: "graphics.renderer.Renderer.init*"
  name: "init"
  nameWithType: "Renderer.init"
  fullName: "graphics.renderer.Renderer.init"
  package: "graphics.renderer"
- uid: "graphics.renderer.Renderer.fetchColorAttachment*"
  name: "fetchColorAttachment"
  nameWithType: "Renderer.fetchColorAttachment"
  fullName: "graphics.renderer.Renderer.fetchColorAttachment"
  package: "graphics.renderer"
- uid: "graphics.renderer.Renderer.render*"
  name: "render"
  nameWithType: "Renderer.render"
  fullName: "graphics.renderer.Renderer.render"
  package: "graphics.renderer"
- uid: "graphics.renderer.Renderer.prepare*"
  name: "prepare"
  nameWithType: "Renderer.prepare"
  fullName: "graphics.renderer.Renderer.prepare"
  package: "graphics.renderer"
- uid: "graphics.renderer.Renderer.clean*"
  name: "clean"
  nameWithType: "Renderer.clean"
  fullName: "graphics.renderer.Renderer.clean"
  package: "graphics.renderer"
- uid: "int[]"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
  - name: "[]"
    fullName: "[]"
- uid: "java.util.List<graphics.renderer.RenderBatch>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "graphics.renderer.RenderBatch"
    name: "RenderBatch"
    fullName: "graphics.renderer.RenderBatch"
  - name: ">"
    fullName: ">"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
