### YamlMime:ManagedReference
items:
- uid: "ai.path.vector2f.Vector2fNode"
  id: "Vector2fNode"
  parent: "ai.path.vector2f"
  children:
  - "ai.path.vector2f.Vector2fNode.Vector2fNode(org.joml.Vector2f)"
  - "ai.path.vector2f.Vector2fNode.addPathTo(ai.path.vector2f.Vector2fNode,float,boolean)"
  - "ai.path.vector2f.Vector2fNode.paths()"
  - "ai.path.vector2f.Vector2fNode.position()"
  langs:
  - "java"
  name: "Vector2fNode"
  nameWithType: "Vector2fNode"
  fullName: "ai.path.vector2f.Vector2fNode"
  type: "Class"
  package: "ai.path.vector2f"
  syntax:
    content: "public class Vector2fNode extends Node<Vector2f>"
  inheritance:
  - "java.lang.Object"
  - "ai.path.Node"
  inheritedMembers:
  - "ai.path.Node.getMarker()"
  - "ai.path.Node.hasMarker()"
  - "ai.path.Node.paths()"
  - "ai.path.Node.position()"
  - "ai.path.Node.setMarker(ai.path.Node.Marker<Position>)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ai.path.vector2f.Vector2fNode.Vector2fNode(org.joml.Vector2f)"
  id: "Vector2fNode(org.joml.Vector2f)"
  parent: "ai.path.vector2f.Vector2fNode"
  langs:
  - "java"
  name: "Vector2fNode(Vector2f position)"
  nameWithType: "Vector2fNode.Vector2fNode(Vector2f position)"
  fullName: "ai.path.vector2f.Vector2fNode.Vector2fNode(Vector2f position)"
  overload: "ai.path.vector2f.Vector2fNode.Vector2fNode*"
  type: "Constructor"
  package: "ai.path.vector2f"
  syntax:
    content: "public Vector2fNode(Vector2f position)"
    parameters:
    - id: "position"
      type: "org.joml.Vector2f"
- uid: "ai.path.vector2f.Vector2fNode.addPathTo(ai.path.vector2f.Vector2fNode,float,boolean)"
  id: "addPathTo(ai.path.vector2f.Vector2fNode,float,boolean)"
  parent: "ai.path.vector2f.Vector2fNode"
  langs:
  - "java"
  name: "addPathTo(Vector2fNode node, float cost, boolean bidirectional)"
  nameWithType: "Vector2fNode.addPathTo(Vector2fNode node, float cost, boolean bidirectional)"
  fullName: "ai.path.vector2f.Vector2fNode.addPathTo(Vector2fNode node, float cost, boolean bidirectional)"
  overload: "ai.path.vector2f.Vector2fNode.addPathTo*"
  type: "Method"
  package: "ai.path.vector2f"
  syntax:
    content: "public void addPathTo(Vector2fNode node, float cost, boolean bidirectional)"
    parameters:
    - id: "node"
      type: "ai.path.vector2f.Vector2fNode"
    - id: "cost"
      type: "float"
    - id: "bidirectional"
      type: "boolean"
- uid: "ai.path.vector2f.Vector2fNode.paths()"
  id: "paths()"
  parent: "ai.path.vector2f.Vector2fNode"
  langs:
  - "java"
  name: "paths()"
  nameWithType: "Vector2fNode.paths()"
  fullName: "ai.path.vector2f.Vector2fNode.paths()"
  overload: "ai.path.vector2f.Vector2fNode.paths*"
  overridden: "ai.path.Node.paths()"
  type: "Method"
  package: "ai.path.vector2f"
  summary: "All paths starting at this node."
  syntax:
    content: "public List<Path<Vector2f>> paths()"
    return:
      type: "java.util.List<ai.path.Path<org.joml.Vector2f>>"
- uid: "ai.path.vector2f.Vector2fNode.position()"
  id: "position()"
  parent: "ai.path.vector2f.Vector2fNode"
  langs:
  - "java"
  name: "position()"
  nameWithType: "Vector2fNode.position()"
  fullName: "ai.path.vector2f.Vector2fNode.position()"
  overload: "ai.path.vector2f.Vector2fNode.position*"
  overridden: "ai.path.Node.position()"
  type: "Method"
  package: "ai.path.vector2f"
  summary: "The external position data contained in this node. The exact value of this method is ignored by the pathfinding algorithms, but may be used to calculate relationship data between nodes using an external algorithm."
  syntax:
    content: "public Vector2f position()"
    return:
      type: "org.joml.Vector2f"
references:
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "ai.path.vector2f.Vector2fNode.Vector2fNode*"
  name: "Vector2fNode"
  nameWithType: "Vector2fNode.Vector2fNode"
  fullName: "ai.path.vector2f.Vector2fNode.Vector2fNode"
  package: "ai.path.vector2f"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "ai.path.vector2f.Vector2fNode.addPathTo*"
  name: "addPathTo"
  nameWithType: "Vector2fNode.addPathTo"
  fullName: "ai.path.vector2f.Vector2fNode.addPathTo"
  package: "ai.path.vector2f"
- uid: "ai.path.vector2f.Vector2fNode.position*"
  name: "position"
  nameWithType: "Vector2fNode.position"
  fullName: "ai.path.vector2f.Vector2fNode.position"
  package: "ai.path.vector2f"
- uid: "java.util.List<ai.path.Path<org.joml.Vector2f>>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "ai.path.Path"
    name: "Path"
    fullName: "ai.path.Path"
  - name: "<"
    fullName: "<"
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "ai.path.vector2f.Vector2fNode.paths*"
  name: "paths"
  nameWithType: "Vector2fNode.paths"
  fullName: "ai.path.vector2f.Vector2fNode.paths"
  package: "ai.path.vector2f"
- uid: "ai.path.Node<org.joml.Vector2f>"
  name: "Node<Vector2f>"
  nameWithType: "Node<Vector2f>"
  fullName: "ai.path.Node<org.joml.Vector2f>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ai.path.Node.getMarker()"
  name: "Node.getMarker()"
  nameWithType: "Node.getMarker()"
  fullName: "ai.path.Node.getMarker()"
- uid: "ai.path.Node.position()"
  name: "Node.position()"
  nameWithType: "Node.position()"
  fullName: "ai.path.Node.position()"
- uid: "ai.path.Node.paths()"
  name: "Node.paths()"
  nameWithType: "Node.paths()"
  fullName: "ai.path.Node.paths()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "ai.path.Node.hasMarker()"
  name: "Node.hasMarker()"
  nameWithType: "Node.hasMarker()"
  fullName: "ai.path.Node.hasMarker()"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "ai.path.Node.setMarker(ai.path.Node.Marker<Position>)"
  name: "Node.setMarker(Node.Marker<Position>)"
  nameWithType: "Node.setMarker(Node.Marker<Position>)"
  fullName: "ai.path.Node.setMarker(ai.path.Node.Marker<Position>)"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "ai.path.Path"
  name: "Path"
  nameWithType: "Path"
  fullName: "ai.path.Path"
- uid: "ai.path.Node"
  name: "Node"
  nameWithType: "Node"
  fullName: "ai.path.Node"
- uid: "Position>)"
  name: "Position>)"
  nameWithType: "Position>)"
  fullName: "Position>)"
- uid: "ai.path.Node.setMarker(ai.path.Node.Marker"
  name: "Node.setMarker(Node.Marker"
  nameWithType: "Node.setMarker(Node.Marker"
  fullName: "ai.path.Node.setMarker(ai.path.Node.Marker"
