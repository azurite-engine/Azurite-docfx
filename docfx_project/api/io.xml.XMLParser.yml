### YamlMime:ManagedReference
items:
- uid: "io.xml.XMLParser"
  id: "XMLParser"
  parent: "io.xml"
  children:
  - "io.xml.XMLParser.XMLParser()"
  - "io.xml.XMLParser.parse(java.util.List<io.token.Token>)"
  - "io.xml.XMLParser.transformValue(java.lang.String,boolean)"
  langs:
  - "java"
  name: "XMLParser"
  nameWithType: "XMLParser"
  fullName: "io.xml.XMLParser"
  type: "Class"
  package: "io.xml"
  summary: "A simple XML string parsing class. Accepts: - spacing at any allowed position - node, sub nodes and attributes inside nodes - self-closing nodes - comments - different encoding in ?xml header Does not accept e.g.: - namespaces - complex ?xml headers - stylesheet - DTD declaration and data - entities"
  syntax:
    content: "public final class XMLParser extends Parser<XMLElement>"
  inheritance:
  - "java.lang.Object"
  - "io.Parser"
  inheritedMembers:
  - "io.Parser.check(java.util.List<io.token.Token>,int,io.token.TokenReader...)"
  - "io.Parser.get(java.util.List<io.token.Token>,int)"
  - "io.Parser.is(java.util.List<io.token.Token>,int,io.token.TokenReader)"
  - "io.Parser.parse(java.util.List<io.token.Token>)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "io.xml.XMLParser.XMLParser()"
  id: "XMLParser()"
  parent: "io.xml.XMLParser"
  langs:
  - "java"
  name: "XMLParser()"
  nameWithType: "XMLParser.XMLParser()"
  fullName: "io.xml.XMLParser.XMLParser()"
  overload: "io.xml.XMLParser.XMLParser*"
  type: "Constructor"
  package: "io.xml"
  syntax:
    content: "public XMLParser()"
- uid: "io.xml.XMLParser.parse(java.util.List<io.token.Token>)"
  id: "parse(java.util.List<io.token.Token>)"
  parent: "io.xml.XMLParser"
  langs:
  - "java"
  name: "parse(List<Token> tokens)"
  nameWithType: "XMLParser.parse(List<Token> tokens)"
  fullName: "io.xml.XMLParser.parse(List<Token> tokens)"
  overload: "io.xml.XMLParser.parse*"
  overridden: "io.Parser.parse(java.util.List<io.token.Token>)"
  type: "Method"
  package: "io.xml"
  summary: "Parse an object by taking a chronological list of tokens."
  syntax:
    content: "public XMLElement parse(List<Token> tokens)"
    parameters:
    - id: "tokens"
      type: "java.util.List<io.token.Token>"
    return:
      type: "io.xml.XMLElement"
- uid: "io.xml.XMLParser.transformValue(java.lang.String,boolean)"
  id: "transformValue(java.lang.String,boolean)"
  parent: "io.xml.XMLParser"
  langs:
  - "java"
  name: "transformValue(String value, boolean isRaw)"
  nameWithType: "XMLParser.transformValue(String value, boolean isRaw)"
  fullName: "io.xml.XMLParser.transformValue(String value, boolean isRaw)"
  overload: "io.xml.XMLParser.transformValue*"
  type: "Method"
  package: "io.xml"
  syntax:
    content: "public static String transformValue(String value, boolean isRaw)"
    parameters:
    - id: "value"
      type: "java.lang.String"
    - id: "isRaw"
      type: "boolean"
    return:
      type: "java.lang.String"
references:
- uid: "io.xml.XMLParser.XMLParser*"
  name: "XMLParser"
  nameWithType: "XMLParser.XMLParser"
  fullName: "io.xml.XMLParser.XMLParser"
  package: "io.xml"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "io.xml.XMLParser.transformValue*"
  name: "transformValue"
  nameWithType: "XMLParser.transformValue"
  fullName: "io.xml.XMLParser.transformValue"
  package: "io.xml"
- uid: "java.util.List<io.token.Token>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "io.token.Token"
    name: "Token"
    fullName: "io.token.Token"
  - name: ">"
    fullName: ">"
- uid: "io.xml.XMLElement"
  name: "XMLElement"
  nameWithType: "XMLElement"
  fullName: "io.xml.XMLElement"
- uid: "io.xml.XMLParser.parse*"
  name: "parse"
  nameWithType: "XMLParser.parse"
  fullName: "io.xml.XMLParser.parse"
  package: "io.xml"
- uid: "io.Parser<io.xml.XMLElement>"
  name: "Parser<XMLElement>"
  nameWithType: "Parser<XMLElement>"
  fullName: "io.Parser<io.xml.XMLElement>"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "io.Parser.get(java.util.List<io.token.Token>,int)"
  name: "Parser.get(List<Token>,int)"
  nameWithType: "Parser.get(List<Token>,int)"
  fullName: "io.Parser.get(java.util.List<io.token.Token>,int)"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "io.Parser.parse(java.util.List<io.token.Token>)"
  name: "Parser.parse(List<Token>)"
  nameWithType: "Parser.parse(List<Token>)"
  fullName: "io.Parser.parse(java.util.List<io.token.Token>)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "io.Parser.is(java.util.List<io.token.Token>,int,io.token.TokenReader)"
  name: "Parser.is(List<Token>,int,TokenReader)"
  nameWithType: "Parser.is(List<Token>,int,TokenReader)"
  fullName: "io.Parser.is(java.util.List<io.token.Token>,int,io.token.TokenReader)"
- uid: "io.Parser.check(java.util.List<io.token.Token>,int,io.token.TokenReader...)"
  name: "Parser.check(List<Token>,int,TokenReader)"
  nameWithType: "Parser.check(List<Token>,int,TokenReader)"
  fullName: "io.Parser.check(java.util.List<io.token.Token>,int,io.token.TokenReader...)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "io.token.Token"
  name: "Token"
  nameWithType: "Token"
  fullName: "io.token.Token"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "io.Parser"
  name: "Parser"
  nameWithType: "Parser"
  fullName: "io.Parser"
- uid: "io.Parser.get(java.util.List"
  name: "Parser.get(List"
  nameWithType: "Parser.get(List"
  fullName: "io.Parser.get(java.util.List"
- uid: "io.token.Token>,int)"
  name: "Token>,int)"
  nameWithType: "Token>,int)"
  fullName: "io.token.Token>,int)"
- uid: "io.token.Token>)"
  name: "Token>)"
  nameWithType: "Token>)"
  fullName: "io.token.Token>)"
- uid: "io.Parser.parse(java.util.List"
  name: "Parser.parse(List"
  nameWithType: "Parser.parse(List"
  fullName: "io.Parser.parse(java.util.List"
- uid: "io.token.Token>,int,io.token.TokenReader)"
  name: "Token>,int,TokenReader)"
  nameWithType: "Token>,int,TokenReader)"
  fullName: "io.token.Token>,int,io.token.TokenReader)"
- uid: "io.Parser.is(java.util.List"
  name: "Parser.is(List"
  nameWithType: "Parser.is(List"
  fullName: "io.Parser.is(java.util.List"
- uid: "io.token.Token>,int,io.token.TokenReader...)"
  name: "Token>,int,TokenReader)"
  nameWithType: "Token>,int,TokenReader)"
  fullName: "io.token.Token>,int,io.token.TokenReader...)"
- uid: "io.Parser.check(java.util.List"
  name: "Parser.check(List"
  nameWithType: "Parser.check(List"
  fullName: "io.Parser.check(java.util.List"
