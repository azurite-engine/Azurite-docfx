### YamlMime:ManagedReference
items:
- uid: "graphics.HSLColor"
  id: "HSLColor"
  parent: "graphics"
  children:
  - "graphics.HSLColor.ALPHA"
  - "graphics.HSLColor.HSLColor(float,float,float,float)"
  - "graphics.HSLColor.HUE"
  - "graphics.HSLColor.LUMINANCE"
  - "graphics.HSLColor.SATURATION"
  - "graphics.HSLColor.equals(java.lang.Object)"
  - "graphics.HSLColor.get(int)"
  - "graphics.HSLColor.getHSLColor(float,float,float,float,int)"
  - "graphics.HSLColor.hashCode()"
  - "graphics.HSLColor.set(int,float)"
  - "graphics.HSLColor.toHSLA(float[])"
  - "graphics.HSLColor.toHSLAVector()"
  - "graphics.HSLColor.toHSLVector()"
  - "graphics.HSLColor.toNormalizedRGBColor()"
  - "graphics.HSLColor.toRGBA(float[])"
  - "graphics.HSLColor.toRGBColor()"
  langs:
  - "java"
  name: "HSLColor"
  nameWithType: "HSLColor"
  fullName: "graphics.HSLColor"
  type: "Class"
  package: "graphics"
  summary: "Represents a HSLA color."
  syntax:
    content: "public class HSLColor"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "graphics.HSLColor.ALPHA"
  id: "ALPHA"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "ALPHA"
  nameWithType: "HSLColor.ALPHA"
  fullName: "graphics.HSLColor.ALPHA"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static final int ALPHA"
    return:
      type: "int"
- uid: "graphics.HSLColor.HSLColor(float,float,float,float)"
  id: "HSLColor(float,float,float,float)"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "HSLColor(float h, float s, float l, float a)"
  nameWithType: "HSLColor.HSLColor(float h, float s, float l, float a)"
  fullName: "graphics.HSLColor.HSLColor(float h, float s, float l, float a)"
  overload: "graphics.HSLColor.HSLColor*"
  type: "Constructor"
  package: "graphics"
  summary: "Create a HSLColor."
  syntax:
    content: "public HSLColor(float h, float s, float l, float a)"
    parameters:
    - id: "h"
      type: "float"
      description: "the hue ranging from 0 to 360, values outside get smoothly fit into the range"
    - id: "s"
      type: "float"
      description: "the saturation ranging from 0 to 100, values are limited to this range"
    - id: "l"
      type: "float"
      description: "the luminance ranging from 0 to 100, values are limited to this range"
    - id: "a"
      type: "float"
      description: "the alpha ranging from 0 to 1, values are limited to this range"
- uid: "graphics.HSLColor.HUE"
  id: "HUE"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "HUE"
  nameWithType: "HSLColor.HUE"
  fullName: "graphics.HSLColor.HUE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static final int HUE"
    return:
      type: "int"
- uid: "graphics.HSLColor.LUMINANCE"
  id: "LUMINANCE"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "LUMINANCE"
  nameWithType: "HSLColor.LUMINANCE"
  fullName: "graphics.HSLColor.LUMINANCE"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static final int LUMINANCE"
    return:
      type: "int"
- uid: "graphics.HSLColor.SATURATION"
  id: "SATURATION"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "SATURATION"
  nameWithType: "HSLColor.SATURATION"
  fullName: "graphics.HSLColor.SATURATION"
  type: "Field"
  package: "graphics"
  syntax:
    content: "public static final int SATURATION"
    return:
      type: "int"
- uid: "graphics.HSLColor.equals(java.lang.Object)"
  id: "equals(java.lang.Object)"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "equals(Object o)"
  nameWithType: "HSLColor.equals(Object o)"
  fullName: "graphics.HSLColor.equals(Object o)"
  overload: "graphics.HSLColor.equals*"
  overridden: "java.lang.Object.equals(java.lang.Object)"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public boolean equals(Object o)"
    parameters:
    - id: "o"
      type: "java.lang.Object"
    return:
      type: "boolean"
- uid: "graphics.HSLColor.get(int)"
  id: "get(int)"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "get(int component)"
  nameWithType: "HSLColor.get(int component)"
  fullName: "graphics.HSLColor.get(int component)"
  overload: "graphics.HSLColor.get*"
  type: "Method"
  package: "graphics"
  summary: "Get a component of this color."
  syntax:
    content: "public float get(int component)"
    parameters:
    - id: "component"
      type: "int"
      description: "the component from 0-3.\n                  Named representations are <xref uid=\"graphics.HSLColor.HUE\" data-throw-if-not-resolved=\"false\">#HUE</xref>, <xref uid=\"graphics.HSLColor.SATURATION\" data-throw-if-not-resolved=\"false\">#SATURATION</xref>, <xref uid=\"graphics.HSLColor.LUMINANCE\" data-throw-if-not-resolved=\"false\">#LUMINANCE</xref> and <xref uid=\"graphics.HSLColor.ALPHA\" data-throw-if-not-resolved=\"false\">#ALPHA</xref>"
    return:
      type: "float"
      description: "the value of the component"
- uid: "graphics.HSLColor.getHSLColor(float,float,float,float,int)"
  id: "getHSLColor(float,float,float,float,int)"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "getHSLColor(float x, float y, float z, float a, int inputType)"
  nameWithType: "HSLColor.getHSLColor(float x, float y, float z, float a, int inputType)"
  fullName: "graphics.HSLColor.getHSLColor(float x, float y, float z, float a, int inputType)"
  overload: "graphics.HSLColor.getHSLColor*"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public static HSLColor getHSLColor(float x, float y, float z, float a, int inputType)"
    parameters:
    - id: "x"
      type: "float"
    - id: "y"
      type: "float"
    - id: "z"
      type: "float"
    - id: "a"
      type: "float"
    - id: "inputType"
      type: "int"
    return:
      type: "graphics.HSLColor"
- uid: "graphics.HSLColor.hashCode()"
  id: "hashCode()"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "hashCode()"
  nameWithType: "HSLColor.hashCode()"
  fullName: "graphics.HSLColor.hashCode()"
  overload: "graphics.HSLColor.hashCode*"
  overridden: "java.lang.Object.hashCode()"
  type: "Method"
  package: "graphics"
  syntax:
    content: "public int hashCode()"
    return:
      type: "int"
- uid: "graphics.HSLColor.set(int,float)"
  id: "set(int,float)"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "set(int component, float newValue)"
  nameWithType: "HSLColor.set(int component, float newValue)"
  fullName: "graphics.HSLColor.set(int component, float newValue)"
  overload: "graphics.HSLColor.set*"
  type: "Method"
  package: "graphics"
  summary: "Set a component of this color."
  syntax:
    content: "public void set(int component, float newValue)"
    parameters:
    - id: "component"
      type: "int"
      description: "the component from 0-3.\n                  Named representations are <xref uid=\"graphics.HSLColor.HUE\" data-throw-if-not-resolved=\"false\">#HUE</xref>, <xref uid=\"graphics.HSLColor.SATURATION\" data-throw-if-not-resolved=\"false\">#SATURATION</xref>, <xref uid=\"graphics.HSLColor.LUMINANCE\" data-throw-if-not-resolved=\"false\">#LUMINANCE</xref> and <xref uid=\"graphics.HSLColor.ALPHA\" data-throw-if-not-resolved=\"false\">#ALPHA</xref>"
    - id: "newValue"
      type: "float"
      description: "the new value for the component"
- uid: "graphics.HSLColor.toHSLA(float[])"
  id: "toHSLA(float[])"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "toHSLA(float[] rgba)"
  nameWithType: "HSLColor.toHSLA(float[] rgba)"
  fullName: "graphics.HSLColor.toHSLA(float[] rgba)"
  overload: "graphics.HSLColor.toHSLA*"
  type: "Method"
  package: "graphics"
  summary: "Convert a RGBA color to it corresponding HSLA color. RGBA ranges are \\[0-1,0-1,0-1,0-1\\]. HSLA output ranges are \\[0-360,0-100,0-100,0-1\\]."
  syntax:
    content: "public static float[] toHSLA(float[] rgba)"
    parameters:
    - id: "rgba"
      type: "float[]"
      description: "a float array containing [r,g,b,a], where a is an optional parameter"
    return:
      type: "float[]"
      description: "normalized hsla array [h,s,l,a]"
- uid: "graphics.HSLColor.toHSLAVector()"
  id: "toHSLAVector()"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "toHSLAVector()"
  nameWithType: "HSLColor.toHSLAVector()"
  fullName: "graphics.HSLColor.toHSLAVector()"
  overload: "graphics.HSLColor.toHSLAVector*"
  type: "Method"
  package: "graphics"
  summary: "Create a <xref uid=\"org.joml.Vector4f\" data-throw-if-not-resolved=\"false\">Vector4f</xref> containing the HSLA values."
  syntax:
    content: "public Vector4f toHSLAVector()"
    return:
      type: "org.joml.Vector4f"
      description: "a vector containing (h,s,l,a)"
- uid: "graphics.HSLColor.toHSLVector()"
  id: "toHSLVector()"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "toHSLVector()"
  nameWithType: "HSLColor.toHSLVector()"
  fullName: "graphics.HSLColor.toHSLVector()"
  overload: "graphics.HSLColor.toHSLVector*"
  type: "Method"
  package: "graphics"
  summary: "Create a <xref uid=\"org.joml.Vector3f\" data-throw-if-not-resolved=\"false\">Vector3f</xref> containing the HSL values."
  syntax:
    content: "public Vector3f toHSLVector()"
    return:
      type: "org.joml.Vector3f"
      description: "a vector containing (h,s,l)"
- uid: "graphics.HSLColor.toNormalizedRGBColor()"
  id: "toNormalizedRGBColor()"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "toNormalizedRGBColor()"
  nameWithType: "HSLColor.toNormalizedRGBColor()"
  fullName: "graphics.HSLColor.toNormalizedRGBColor()"
  overload: "graphics.HSLColor.toNormalizedRGBColor*"
  type: "Method"
  package: "graphics"
  summary: "Convert this <xref uid=\"graphics.HSLColor\" data-throw-if-not-resolved=\"false\">HSLColor</xref> to a normalized RGB <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">Color</xref> using <xref uid=\"graphics.HSLColor.toRGBA(float[])\" data-throw-if-not-resolved=\"false\">HSLColor#toRGBA(float[])</xref>"
  syntax:
    content: "public Color toNormalizedRGBColor()"
    return:
      type: "graphics.Color"
      description: "a normalized RGB <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">Color</xref> representing the same color"
- uid: "graphics.HSLColor.toRGBA(float[])"
  id: "toRGBA(float[])"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "toRGBA(float[] hsla)"
  nameWithType: "HSLColor.toRGBA(float[] hsla)"
  fullName: "graphics.HSLColor.toRGBA(float[] hsla)"
  overload: "graphics.HSLColor.toRGBA*"
  type: "Method"
  package: "graphics"
  summary: "Convert a HSLA color to RGBA. HSLA ranges are \\[0-360,0-100,0-100,0-1\\]. RGBA output ranges are \\[0-1,0-1,0-1,0-1\\]. If there is no alpha in the input, there won't be an alpha in the output as well."
  syntax:
    content: "public static float[] toRGBA(float[] hsla)"
    parameters:
    - id: "hsla"
      type: "float[]"
      description: "a float array containing [h,s,l,a], where a is an optional parameter"
    return:
      type: "float[]"
      description: "normalized rgba array [r,g,b,a]"
- uid: "graphics.HSLColor.toRGBColor()"
  id: "toRGBColor()"
  parent: "graphics.HSLColor"
  langs:
  - "java"
  name: "toRGBColor()"
  nameWithType: "HSLColor.toRGBColor()"
  fullName: "graphics.HSLColor.toRGBColor()"
  overload: "graphics.HSLColor.toRGBColor*"
  type: "Method"
  package: "graphics"
  summary: "Convert this <xref uid=\"graphics.HSLColor\" data-throw-if-not-resolved=\"false\">HSLColor</xref> to a RGB <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">Color</xref> using <xref uid=\"graphics.HSLColor.toRGBA(float[])\" data-throw-if-not-resolved=\"false\">HSLColor#toRGBA(float[])</xref>"
  syntax:
    content: "public Color toRGBColor()"
    return:
      type: "graphics.Color"
      description: "a RGB <xref uid=\"graphics.Color\" data-throw-if-not-resolved=\"false\">Color</xref> representing the same color"
references:
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "graphics.HSLColor.HSLColor*"
  name: "HSLColor"
  nameWithType: "HSLColor.HSLColor"
  fullName: "graphics.HSLColor.HSLColor"
  package: "graphics"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "graphics.HSLColor.getHSLColor*"
  name: "getHSLColor"
  nameWithType: "HSLColor.getHSLColor"
  fullName: "graphics.HSLColor.getHSLColor"
  package: "graphics"
- uid: "float[]"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
  - name: "[]"
    fullName: "[]"
- uid: "graphics.HSLColor.toHSLA*"
  name: "toHSLA"
  nameWithType: "HSLColor.toHSLA"
  fullName: "graphics.HSLColor.toHSLA"
  package: "graphics"
- uid: "graphics.HSLColor.toRGBA*"
  name: "toRGBA"
  nameWithType: "HSLColor.toRGBA"
  fullName: "graphics.HSLColor.toRGBA"
  package: "graphics"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "graphics.HSLColor.toRGBColor*"
  name: "toRGBColor"
  nameWithType: "HSLColor.toRGBColor"
  fullName: "graphics.HSLColor.toRGBColor"
  package: "graphics"
- uid: "graphics.HSLColor.toNormalizedRGBColor*"
  name: "toNormalizedRGBColor"
  nameWithType: "HSLColor.toNormalizedRGBColor"
  fullName: "graphics.HSLColor.toNormalizedRGBColor"
  package: "graphics"
- uid: "graphics.HSLColor.set*"
  name: "set"
  nameWithType: "HSLColor.set"
  fullName: "graphics.HSLColor.set"
  package: "graphics"
- uid: "graphics.HSLColor.get*"
  name: "get"
  nameWithType: "HSLColor.get"
  fullName: "graphics.HSLColor.get"
  package: "graphics"
- uid: "org.joml.Vector3f"
  spec.java:
  - uid: "org.joml.Vector3f"
    name: "Vector3f"
    fullName: "org.joml.Vector3f"
- uid: "graphics.HSLColor.toHSLVector*"
  name: "toHSLVector"
  nameWithType: "HSLColor.toHSLVector"
  fullName: "graphics.HSLColor.toHSLVector"
  package: "graphics"
- uid: "org.joml.Vector4f"
  spec.java:
  - uid: "org.joml.Vector4f"
    name: "Vector4f"
    fullName: "org.joml.Vector4f"
- uid: "graphics.HSLColor.toHSLAVector*"
  name: "toHSLAVector"
  nameWithType: "HSLColor.toHSLAVector"
  fullName: "graphics.HSLColor.toHSLAVector"
  package: "graphics"
- uid: "java.lang.Object"
  spec.java:
  - uid: "java.lang.Object"
    name: "Object"
    fullName: "java.lang.Object"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "graphics.HSLColor.equals*"
  name: "equals"
  nameWithType: "HSLColor.equals"
  fullName: "graphics.HSLColor.equals"
  package: "graphics"
- uid: "graphics.HSLColor.hashCode*"
  name: "hashCode"
  nameWithType: "HSLColor.hashCode"
  fullName: "graphics.HSLColor.hashCode"
  package: "graphics"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
