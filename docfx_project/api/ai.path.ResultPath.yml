### YamlMime:ManagedReference
items:
- uid: "ai.path.ResultPath"
  id: "ResultPath"
  parent: "ai.path"
  children:
  - "ai.path.ResultPath.fullPath()"
  - "ai.path.ResultPath.start()"
  - "ai.path.ResultPath.target()"
  langs:
  - "java"
  name: "ResultPath<Position>"
  nameWithType: "ResultPath<Position>"
  fullName: "ai.path.ResultPath<Position>"
  type: "Interface"
  package: "ai.path"
  summary: "The result of a pathfinding algorithm containing a full path from start to target."
  syntax:
    content: "public interface ResultPath<Position>"
    typeParameters:
    - id: "Position"
- uid: "ai.path.ResultPath.fullPath()"
  id: "fullPath()"
  parent: "ai.path.ResultPath"
  langs:
  - "java"
  name: "fullPath()"
  nameWithType: "ResultPath<Position>.fullPath()"
  fullName: "ai.path.ResultPath<Position>.fullPath()"
  overload: "ai.path.ResultPath.fullPath*"
  type: "Method"
  package: "ai.path"
  summary: "The full path containing all nodes in order from start to target. This may include start and target as well."
  syntax:
    content: "public abstract List<Node<Position>> fullPath()"
    return:
      type: "java.util.List<ai.path.Node<Position>>"
      description: "the full path"
- uid: "ai.path.ResultPath.start()"
  id: "start()"
  parent: "ai.path.ResultPath"
  langs:
  - "java"
  name: "start()"
  nameWithType: "ResultPath<Position>.start()"
  fullName: "ai.path.ResultPath<Position>.start()"
  overload: "ai.path.ResultPath.start*"
  type: "Method"
  package: "ai.path"
  summary: "The start of the found path."
  syntax:
    content: "public abstract Node<Position> start()"
    return:
      type: "ai.path.Node<Position>"
      description: "the starting node"
- uid: "ai.path.ResultPath.target()"
  id: "target()"
  parent: "ai.path.ResultPath"
  langs:
  - "java"
  name: "target()"
  nameWithType: "ResultPath<Position>.target()"
  fullName: "ai.path.ResultPath<Position>.target()"
  overload: "ai.path.ResultPath.target*"
  type: "Method"
  package: "ai.path"
  summary: "The target of the found path"
  syntax:
    content: "public abstract Node<Position> target()"
    return:
      type: "ai.path.Node<Position>"
      description: "the target node"
references:
- uid: "ai.path.Node<Position>"
  spec.java:
  - uid: "ai.path.Node"
    name: "Node"
    fullName: "ai.path.Node"
  - name: "<"
    fullName: "<"
  - uid: "Position"
    name: "Position"
    fullName: "Position"
  - name: ">"
    fullName: ">"
- uid: "ai.path.ResultPath.start*"
  name: "start"
  nameWithType: "ResultPath<Position>.start"
  fullName: "ai.path.ResultPath<Position>.start"
  package: "ai.path"
- uid: "ai.path.ResultPath.target*"
  name: "target"
  nameWithType: "ResultPath<Position>.target"
  fullName: "ai.path.ResultPath<Position>.target"
  package: "ai.path"
- uid: "java.util.List<ai.path.Node<Position>>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "ai.path.Node"
    name: "Node"
    fullName: "ai.path.Node"
  - name: "<"
    fullName: "<"
  - uid: "Position"
    name: "Position"
    fullName: "Position"
  - name: ">"
    fullName: ">"
  - name: ">"
    fullName: ">"
- uid: "ai.path.ResultPath.fullPath*"
  name: "fullPath"
  nameWithType: "ResultPath<Position>.fullPath"
  fullName: "ai.path.ResultPath<Position>.fullPath"
  package: "ai.path"
- uid: "Position"
  name: "Position"
  nameWithType: "Position"
  fullName: "Position"
- uid: "ai.path.Node"
  name: "Node"
  nameWithType: "Node"
  fullName: "ai.path.Node"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
