### YamlMime:ManagedReference
items:
- uid: "util.Engine"
  id: "Engine"
  parent: "util"
  children:
  - "util.Engine.deltaTime()"
  - "util.Engine.getDeltaTime()"
  - "util.Engine.getInstance()"
  - "util.Engine.getWindow()"
  - "util.Engine.init(int,int,java.lang.String)"
  - "util.Engine.init(int,int,java.lang.String,float)"
  - "util.Engine.init(int,int,java.lang.String,float,boolean)"
  - "util.Engine.init(java.lang.String)"
  - "util.Engine.init(java.lang.String,float)"
  - "util.Engine.isRunning()"
  - "util.Engine.millisRunning()"
  - "util.Engine.scenes()"
  - "util.Engine.showWindow()"
  - "util.Engine.updateDeltaTime(float)"
  - "util.Engine.window()"
  langs:
  - "java"
  name: "Engine"
  nameWithType: "Engine"
  fullName: "util.Engine"
  type: "Class"
  package: "util"
  summary: "The Engine class initializes the Window and the game loop. It can also be used to access some globally used classes like the scene manager and Window."
  syntax:
    content: "public final class Engine"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "util.Engine.Engine()"
  id: "Engine()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "Engine()"
  nameWithType: "Engine.Engine()"
  fullName: "util.Engine.Engine()"
  overload: "util.Engine.Engine*"
  type: "Constructor"
  package: "util"
  syntax:
    content: "private Engine()"
- uid: "util.Engine.deltaTime()"
  id: "deltaTime()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "deltaTime()"
  nameWithType: "Engine.deltaTime()"
  fullName: "util.Engine.deltaTime()"
  overload: "util.Engine.deltaTime*"
  type: "Method"
  package: "util"
  syntax:
    content: "public static float deltaTime()"
    return:
      type: "float"
- uid: "util.Engine.getDeltaTime()"
  id: "getDeltaTime()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "getDeltaTime()"
  nameWithType: "Engine.getDeltaTime()"
  fullName: "util.Engine.getDeltaTime()"
  overload: "util.Engine.getDeltaTime*"
  type: "Method"
  package: "util"
  syntax:
    content: "public float getDeltaTime()"
    return:
      type: "float"
- uid: "util.Engine.getInstance()"
  id: "getInstance()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "getInstance()"
  nameWithType: "Engine.getInstance()"
  fullName: "util.Engine.getInstance()"
  overload: "util.Engine.getInstance*"
  type: "Method"
  package: "util"
  summary: "Get the global unique instance of the Engine object."
  syntax:
    content: "public static Engine getInstance()"
    return:
      type: "util.Engine"
- uid: "util.Engine.getWindow()"
  id: "getWindow()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "getWindow()"
  nameWithType: "Engine.getWindow()"
  fullName: "util.Engine.getWindow()"
  overload: "util.Engine.getWindow*"
  type: "Method"
  package: "util"
  syntax:
    content: "public Window getWindow()"
    return:
      type: "graphics.Window"
- uid: "util.Engine.init(int,int,java.lang.String)"
  id: "init(int,int,java.lang.String)"
  parent: "util.Engine"
  langs:
  - "java"
  name: "init(int windowWidth, int windowHeight, String windowTitle)"
  nameWithType: "Engine.init(int windowWidth, int windowHeight, String windowTitle)"
  fullName: "util.Engine.init(int windowWidth, int windowHeight, String windowTitle)"
  overload: "util.Engine.init*"
  type: "Method"
  package: "util"
  summary: "Start the engine, and initialize GLFW."
  syntax:
    content: "public static void init(int windowWidth, int windowHeight, String windowTitle)"
    parameters:
    - id: "windowWidth"
      type: "int"
      description: "Width of the window to be created"
    - id: "windowHeight"
      type: "int"
      description: "Height of the window to be created"
    - id: "windowTitle"
      type: "java.lang.String"
      description: "Title of the window to be created"
- uid: "util.Engine.init(int,int,java.lang.String,float)"
  id: "init(int,int,java.lang.String,float)"
  parent: "util.Engine"
  langs:
  - "java"
  name: "init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting)"
  nameWithType: "Engine.init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting)"
  fullName: "util.Engine.init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting)"
  overload: "util.Engine.init*"
  type: "Method"
  package: "util"
  summary: "Start the engine, and initialize GLFW."
  syntax:
    content: "public static void init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting)"
    parameters:
    - id: "windowWidth"
      type: "int"
      description: "Width of the window to be created"
    - id: "windowHeight"
      type: "int"
      description: "Height of the window to be created"
    - id: "windowTitle"
      type: "java.lang.String"
      description: "Title of the window to be created"
    - id: "minSceneLighting"
      type: "float"
      description: "float from 0-1 indicating the minimum scene light level"
- uid: "util.Engine.init(int,int,java.lang.String,float,boolean)"
  id: "init(int,int,java.lang.String,float,boolean)"
  parent: "util.Engine"
  langs:
  - "java"
  name: "init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  nameWithType: "Engine.init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  fullName: "util.Engine.init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
  overload: "util.Engine.init*"
  type: "Method"
  package: "util"
  syntax:
    content: "public static void init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting, boolean recalculateProjectionOnResize)"
    parameters:
    - id: "windowWidth"
      type: "int"
    - id: "windowHeight"
      type: "int"
    - id: "windowTitle"
      type: "java.lang.String"
    - id: "minSceneLighting"
      type: "float"
    - id: "recalculateProjectionOnResize"
      type: "boolean"
- uid: "util.Engine.init(java.lang.String)"
  id: "init(java.lang.String)"
  parent: "util.Engine"
  langs:
  - "java"
  name: "init(String windowTitle)"
  nameWithType: "Engine.init(String windowTitle)"
  fullName: "util.Engine.init(String windowTitle)"
  overload: "util.Engine.init*"
  type: "Method"
  package: "util"
  summary: "Start the engine, and initialize GLFW."
  syntax:
    content: "public static void init(String windowTitle)"
    parameters:
    - id: "windowTitle"
      type: "java.lang.String"
      description: "Title of the window to be created"
- uid: "util.Engine.init(java.lang.String,float)"
  id: "init(java.lang.String,float)"
  parent: "util.Engine"
  langs:
  - "java"
  name: "init(String windowTitle, float minSceneLighting)"
  nameWithType: "Engine.init(String windowTitle, float minSceneLighting)"
  fullName: "util.Engine.init(String windowTitle, float minSceneLighting)"
  overload: "util.Engine.init*"
  type: "Method"
  package: "util"
  summary: "Start the engine, and initialize GLFW. This will create a fullscreen window."
  syntax:
    content: "public static void init(String windowTitle, float minSceneLighting)"
    parameters:
    - id: "windowTitle"
      type: "java.lang.String"
      description: "Title of the window to be created"
    - id: "minSceneLighting"
      type: "float"
      description: "float from 0-1 indicating the minimum scene light level"
- uid: "util.Engine.isRunning()"
  id: "isRunning()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "isRunning()"
  nameWithType: "Engine.isRunning()"
  fullName: "util.Engine.isRunning()"
  overload: "util.Engine.isRunning*"
  type: "Method"
  package: "util"
  syntax:
    content: "public static boolean isRunning()"
    return:
      type: "boolean"
- uid: "util.Engine.millisRunning()"
  id: "millisRunning()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "millisRunning()"
  nameWithType: "Engine.millisRunning()"
  fullName: "util.Engine.millisRunning()"
  overload: "util.Engine.millisRunning*"
  type: "Method"
  package: "util"
  syntax:
    content: "public static double millisRunning()"
    return:
      type: "double"
      description: "Returns the number of milliseconds since the engine started. (since the first call)"
- uid: "util.Engine.scenes()"
  id: "scenes()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "scenes()"
  nameWithType: "Engine.scenes()"
  fullName: "util.Engine.scenes()"
  overload: "util.Engine.scenes*"
  type: "Method"
  package: "util"
  syntax:
    content: "public static SceneManager scenes()"
    return:
      type: "scene.SceneManager"
- uid: "util.Engine.showWindow()"
  id: "showWindow()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "showWindow()"
  nameWithType: "Engine.showWindow()"
  fullName: "util.Engine.showWindow()"
  overload: "util.Engine.showWindow*"
  type: "Method"
  package: "util"
  syntax:
    content: "public static void showWindow()"
- uid: "util.Engine.updateDeltaTime(float)"
  id: "updateDeltaTime(float)"
  parent: "util.Engine"
  langs:
  - "java"
  name: "updateDeltaTime(float deltaTime)"
  nameWithType: "Engine.updateDeltaTime(float deltaTime)"
  fullName: "util.Engine.updateDeltaTime(float deltaTime)"
  overload: "util.Engine.updateDeltaTime*"
  type: "Method"
  package: "util"
  syntax:
    content: "public static void updateDeltaTime(float deltaTime)"
    parameters:
    - id: "deltaTime"
      type: "float"
- uid: "util.Engine.window()"
  id: "window()"
  parent: "util.Engine"
  langs:
  - "java"
  name: "window()"
  nameWithType: "Engine.window()"
  fullName: "util.Engine.window()"
  overload: "util.Engine.window*"
  type: "Method"
  package: "util"
  syntax:
    content: "public static Window window()"
    return:
      type: "graphics.Window"
references:
- uid: "util.Engine.Engine*"
  name: "Engine"
  nameWithType: "Engine.Engine"
  fullName: "util.Engine.Engine"
  package: "util"
- uid: "util.Engine.getInstance*"
  name: "getInstance"
  nameWithType: "Engine.getInstance"
  fullName: "util.Engine.getInstance"
  package: "util"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "util.Engine.deltaTime*"
  name: "deltaTime"
  nameWithType: "Engine.deltaTime"
  fullName: "util.Engine.deltaTime"
  package: "util"
- uid: "util.Engine.updateDeltaTime*"
  name: "updateDeltaTime"
  nameWithType: "Engine.updateDeltaTime"
  fullName: "util.Engine.updateDeltaTime"
  package: "util"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "util.Engine.isRunning*"
  name: "isRunning"
  nameWithType: "Engine.isRunning"
  fullName: "util.Engine.isRunning"
  package: "util"
- uid: "graphics.Window"
  name: "Window"
  nameWithType: "Window"
  fullName: "graphics.Window"
- uid: "util.Engine.window*"
  name: "window"
  nameWithType: "Engine.window"
  fullName: "util.Engine.window"
  package: "util"
- uid: "util.Engine.showWindow*"
  name: "showWindow"
  nameWithType: "Engine.showWindow"
  fullName: "util.Engine.showWindow"
  package: "util"
- uid: "scene.SceneManager"
  name: "SceneManager"
  nameWithType: "SceneManager"
  fullName: "scene.SceneManager"
- uid: "util.Engine.scenes*"
  name: "scenes"
  nameWithType: "Engine.scenes"
  fullName: "util.Engine.scenes"
  package: "util"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "util.Engine.init*"
  name: "init"
  nameWithType: "Engine.init"
  fullName: "util.Engine.init"
  package: "util"
- uid: "double"
  spec.java:
  - uid: "double"
    name: "double"
    fullName: "double"
- uid: "util.Engine.millisRunning*"
  name: "millisRunning"
  nameWithType: "Engine.millisRunning"
  fullName: "util.Engine.millisRunning"
  package: "util"
- uid: "util.Engine.getWindow*"
  name: "getWindow"
  nameWithType: "Engine.getWindow"
  fullName: "util.Engine.getWindow"
  package: "util"
- uid: "util.Engine.getDeltaTime*"
  name: "getDeltaTime"
  nameWithType: "Engine.getDeltaTime"
  fullName: "util.Engine.getDeltaTime"
  package: "util"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
