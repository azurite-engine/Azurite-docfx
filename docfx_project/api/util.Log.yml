### YamlMime:ManagedReference
items:
- uid: "util.Log"
  id: "Log"
  parent: "util"
  children:
  - "util.Log.ALL"
  - "util.Log.CL_BLUE"
  - "util.Log.CL_CYAN"
  - "util.Log.CL_GRAY"
  - "util.Log.CL_GREEN"
  - "util.Log.CL_ORANGE"
  - "util.Log.CL_PURPLE"
  - "util.Log.CL_RED"
  - "util.Log.FATAL_ONLY"
  - "util.Log.Log()"
  - "util.Log.NO_DEBUG"
  - "util.Log.WARNINGS"
  - "util.Log.crash(java.lang.Exception)"
  - "util.Log.debug(java.lang.String)"
  - "util.Log.debug(java.lang.String,boolean)"
  - "util.Log.debug(java.lang.String,int)"
  - "util.Log.fatal(java.lang.String)"
  - "util.Log.fatal(java.lang.String,boolean)"
  - "util.Log.fatal(java.lang.String,int)"
  - "util.Log.info(java.lang.String)"
  - "util.Log.info(java.lang.String,boolean)"
  - "util.Log.info(java.lang.String,int)"
  - "util.Log.p(java.lang.String)"
  - "util.Log.p(java.lang.String,int)"
  - "util.Log.setLogLevel(int)"
  - "util.Log.startLogging(java.io.File,int)"
  - "util.Log.warn(java.lang.String)"
  - "util.Log.warn(java.lang.String,boolean)"
  - "util.Log.warn(java.lang.String,int)"
  langs:
  - "java"
  name: "Log"
  nameWithType: "Log"
  fullName: "util.Log"
  type: "Class"
  package: "util"
  summary: "Logging utility to print colored and labeled errors with class references. Always call the methods of this class directly and do not nest it inside other functions, because it will mess up the stacktrace and would therefore display a wrong source.\nLogging modes:\n\\- FATAL -> only fatal errors and major problems are reported; this is the minimal setting\n\\- WARNINGS -> includes fatal errors and minor warnings; useful for detecting common issues\n\\- NO\\_DEBUG -> displays all information except for hard debug logs; for integrity checks\n\\- ALL -> shows all logs including hard debug for a detailed overview over vital systems\n"
  syntax:
    content: "public class Log"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "util.Log.ALL"
  id: "ALL"
  parent: "util.Log"
  langs:
  - "java"
  name: "ALL"
  nameWithType: "Log.ALL"
  fullName: "util.Log.ALL"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final int ALL"
    return:
      type: "int"
- uid: "util.Log.CL_BLUE"
  id: "CL_BLUE"
  parent: "util.Log"
  langs:
  - "java"
  name: "CL_BLUE"
  nameWithType: "Log.CL_BLUE"
  fullName: "util.Log.CL_BLUE"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final String CL_BLUE"
    return:
      type: "java.lang.String"
- uid: "util.Log.CL_CYAN"
  id: "CL_CYAN"
  parent: "util.Log"
  langs:
  - "java"
  name: "CL_CYAN"
  nameWithType: "Log.CL_CYAN"
  fullName: "util.Log.CL_CYAN"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final String CL_CYAN"
    return:
      type: "java.lang.String"
- uid: "util.Log.CL_GRAY"
  id: "CL_GRAY"
  parent: "util.Log"
  langs:
  - "java"
  name: "CL_GRAY"
  nameWithType: "Log.CL_GRAY"
  fullName: "util.Log.CL_GRAY"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final String CL_GRAY"
    return:
      type: "java.lang.String"
- uid: "util.Log.CL_GREEN"
  id: "CL_GREEN"
  parent: "util.Log"
  langs:
  - "java"
  name: "CL_GREEN"
  nameWithType: "Log.CL_GREEN"
  fullName: "util.Log.CL_GREEN"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final String CL_GREEN"
    return:
      type: "java.lang.String"
- uid: "util.Log.CL_ORANGE"
  id: "CL_ORANGE"
  parent: "util.Log"
  langs:
  - "java"
  name: "CL_ORANGE"
  nameWithType: "Log.CL_ORANGE"
  fullName: "util.Log.CL_ORANGE"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final String CL_ORANGE"
    return:
      type: "java.lang.String"
- uid: "util.Log.CL_PURPLE"
  id: "CL_PURPLE"
  parent: "util.Log"
  langs:
  - "java"
  name: "CL_PURPLE"
  nameWithType: "Log.CL_PURPLE"
  fullName: "util.Log.CL_PURPLE"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final String CL_PURPLE"
    return:
      type: "java.lang.String"
- uid: "util.Log.CL_RED"
  id: "CL_RED"
  parent: "util.Log"
  langs:
  - "java"
  name: "CL_RED"
  nameWithType: "Log.CL_RED"
  fullName: "util.Log.CL_RED"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final String CL_RED"
    return:
      type: "java.lang.String"
- uid: "util.Log.FATAL_ONLY"
  id: "FATAL_ONLY"
  parent: "util.Log"
  langs:
  - "java"
  name: "FATAL_ONLY"
  nameWithType: "Log.FATAL_ONLY"
  fullName: "util.Log.FATAL_ONLY"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final int FATAL_ONLY"
    return:
      type: "int"
- uid: "util.Log.Log()"
  id: "Log()"
  parent: "util.Log"
  langs:
  - "java"
  name: "Log()"
  nameWithType: "Log.Log()"
  fullName: "util.Log.Log()"
  overload: "util.Log.Log*"
  type: "Constructor"
  package: "util"
  syntax:
    content: "public Log()"
- uid: "util.Log.NO_DEBUG"
  id: "NO_DEBUG"
  parent: "util.Log"
  langs:
  - "java"
  name: "NO_DEBUG"
  nameWithType: "Log.NO_DEBUG"
  fullName: "util.Log.NO_DEBUG"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final int NO_DEBUG"
    return:
      type: "int"
- uid: "util.Log.WARNINGS"
  id: "WARNINGS"
  parent: "util.Log"
  langs:
  - "java"
  name: "WARNINGS"
  nameWithType: "Log.WARNINGS"
  fullName: "util.Log.WARNINGS"
  type: "Field"
  package: "util"
  syntax:
    content: "public static final int WARNINGS"
    return:
      type: "int"
- uid: "util.Log.crash(java.lang.Exception)"
  id: "crash(java.lang.Exception)"
  parent: "util.Log"
  langs:
  - "java"
  name: "crash(Exception e)"
  nameWithType: "Log.crash(Exception e)"
  fullName: "util.Log.crash(Exception e)"
  overload: "util.Log.crash*"
  type: "Method"
  package: "util"
  summary: "Report a crash of the engine and log the actual exception."
  syntax:
    content: "public static void crash(Exception e)"
    parameters:
    - id: "e"
      type: "java.lang.Exception"
      description: "the exception causing the crash"
- uid: "util.Log.debug(java.lang.String)"
  id: "debug(java.lang.String)"
  parent: "util.Log"
  langs:
  - "java"
  name: "debug(String log)"
  nameWithType: "Log.debug(String log)"
  fullName: "util.Log.debug(String log)"
  overload: "util.Log.debug*"
  type: "Method"
  package: "util"
  summary: "Printed on level <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref> only. Use this method to print a detailed debug message about vital information in the system. Includes the source class of the method call in the log."
  syntax:
    content: "public static void debug(String log)"
    parameters:
    - id: "log"
      type: "java.lang.String"
      description: "the information to be logged"
- uid: "util.Log.debug(java.lang.String,boolean)"
  id: "debug(java.lang.String,boolean)"
  parent: "util.Log"
  langs:
  - "java"
  name: "debug(String log, boolean printSource)"
  nameWithType: "Log.debug(String log, boolean printSource)"
  fullName: "util.Log.debug(String log, boolean printSource)"
  overload: "util.Log.debug*"
  type: "Method"
  package: "util"
  summary: "Printed on level <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref> only. Use this method to print a detailed debug message about vital information in the system. May be used to exclude the source class of the method call from the log."
  syntax:
    content: "public static void debug(String log, boolean printSource)"
    parameters:
    - id: "log"
      type: "java.lang.String"
      description: "the information to be logged"
    - id: "printSource"
      type: "boolean"
      description: "if set to false, the source class is excluded; if set to true, the call is identical to <xref uid=\"util.Log.debug(java.lang.String)\" data-throw-if-not-resolved=\"false\">Log#debug(String)</xref>"
- uid: "util.Log.debug(java.lang.String,int)"
  id: "debug(java.lang.String,int)"
  parent: "util.Log"
  langs:
  - "java"
  name: "debug(String log, int stepUp)"
  nameWithType: "Log.debug(String log, int stepUp)"
  fullName: "util.Log.debug(String log, int stepUp)"
  overload: "util.Log.debug*"
  type: "Method"
  package: "util"
  summary: "Printed on level <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref> only. Use this method to print a detailed debug message about vital information in the system. Includes the source class of the method call in the log as well as a second source class further down the stacktrace."
  syntax:
    content: "public static void debug(String log, int stepUp)"
    parameters:
    - id: "log"
      type: "java.lang.String"
      description: "the information to be logged"
    - id: "stepUp"
      type: "int"
      description: "the amount of steps to take starting at the default calling class to reach the second class to log;\n               e.g. if the stacktrace is <code>A -> B -> C -> D -> debug</code>\n               then D would be the default calling class and a stepUp of 2 would specify B as the second one to log."
- uid: "util.Log.fatal(java.lang.String)"
  id: "fatal(java.lang.String)"
  parent: "util.Log"
  langs:
  - "java"
  name: "fatal(String error)"
  nameWithType: "Log.fatal(String error)"
  fullName: "util.Log.fatal(String error)"
  overload: "util.Log.fatal*"
  type: "Method"
  package: "util"
  summary: "Printed on all four levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref>, <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref>, <xref uid=\"util.Log.WARNINGS\" data-throw-if-not-resolved=\"false\">Log#WARNINGS</xref> and <xref uid=\"util.Log.FATAL_ONLY\" data-throw-if-not-resolved=\"false\">Log#FATAL_ONLY</xref>. Use this method to document fatal failures in vital functions. Includes the source class of the method call in the log."
  syntax:
    content: "public static void fatal(String error)"
    parameters:
    - id: "error"
      type: "java.lang.String"
      description: "the error to be logged"
- uid: "util.Log.fatal(java.lang.String,boolean)"
  id: "fatal(java.lang.String,boolean)"
  parent: "util.Log"
  langs:
  - "java"
  name: "fatal(String error, boolean printSource)"
  nameWithType: "Log.fatal(String error, boolean printSource)"
  fullName: "util.Log.fatal(String error, boolean printSource)"
  overload: "util.Log.fatal*"
  type: "Method"
  package: "util"
  summary: "Printed on all four levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref>, <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref>, <xref uid=\"util.Log.WARNINGS\" data-throw-if-not-resolved=\"false\">Log#WARNINGS</xref> and <xref uid=\"util.Log.FATAL_ONLY\" data-throw-if-not-resolved=\"false\">Log#FATAL_ONLY</xref>. Use this method to document fatal failures in vital functions. May be used to exclude the source class of the method call from the log."
  syntax:
    content: "public static void fatal(String error, boolean printSource)"
    parameters:
    - id: "error"
      type: "java.lang.String"
      description: "the error to be logged"
    - id: "printSource"
      type: "boolean"
      description: "if set to false, the source class is excluded; if set to true, the call is identical to <xref uid=\"util.Log.fatal(java.lang.String)\" data-throw-if-not-resolved=\"false\">Log#fatal(String)</xref>"
- uid: "util.Log.fatal(java.lang.String,int)"
  id: "fatal(java.lang.String,int)"
  parent: "util.Log"
  langs:
  - "java"
  name: "fatal(String error, int stepUp)"
  nameWithType: "Log.fatal(String error, int stepUp)"
  fullName: "util.Log.fatal(String error, int stepUp)"
  overload: "util.Log.fatal*"
  type: "Method"
  package: "util"
  summary: "Printed on all four levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref>, <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref>, <xref uid=\"util.Log.WARNINGS\" data-throw-if-not-resolved=\"false\">Log#WARNINGS</xref> and <xref uid=\"util.Log.FATAL_ONLY\" data-throw-if-not-resolved=\"false\">Log#FATAL_ONLY</xref>. Use this method to document fatal failures in vital functions. Includes the source class of the method call in the log as well as a second source class further down the stacktrace."
  syntax:
    content: "public static void fatal(String error, int stepUp)"
    parameters:
    - id: "error"
      type: "java.lang.String"
      description: "the error to be logged"
    - id: "stepUp"
      type: "int"
      description: "the amount of steps to take starting at the default calling class to reach the second class to log;\n               e.g. if the stacktrace is <code>A -> B -> C -> D -> debug</code>\n               then D would be the default calling class and a stepUp of 2 would specify B as the second one to log."
- uid: "util.Log.info(java.lang.String)"
  id: "info(java.lang.String)"
  parent: "util.Log"
  langs:
  - "java"
  name: "info(String info)"
  nameWithType: "Log.info(String info)"
  fullName: "util.Log.info(String info)"
  overload: "util.Log.info*"
  type: "Method"
  package: "util"
  summary: "Printed on levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref> and <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref> only. Use this method to notify of regular system events like successful loading operations for example. Includes the source class of the method call in the log."
  syntax:
    content: "public static void info(String info)"
    parameters:
    - id: "info"
      type: "java.lang.String"
      description: "the information to be logged"
- uid: "util.Log.info(java.lang.String,boolean)"
  id: "info(java.lang.String,boolean)"
  parent: "util.Log"
  langs:
  - "java"
  name: "info(String info, boolean printSource)"
  nameWithType: "Log.info(String info, boolean printSource)"
  fullName: "util.Log.info(String info, boolean printSource)"
  overload: "util.Log.info*"
  type: "Method"
  package: "util"
  summary: "Printed on levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref> and <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref> only. Use this method to notify of regular system events like successful loading operations for example. May be used to exclude the source class of the method call from the log."
  syntax:
    content: "public static void info(String info, boolean printSource)"
    parameters:
    - id: "info"
      type: "java.lang.String"
      description: "the information to be logged"
    - id: "printSource"
      type: "boolean"
      description: "if set to false, the source class is excluded; if set to true, the call is identical to <xref uid=\"util.Log.info(java.lang.String)\" data-throw-if-not-resolved=\"false\">Log#info(String)</xref>"
- uid: "util.Log.info(java.lang.String,int)"
  id: "info(java.lang.String,int)"
  parent: "util.Log"
  langs:
  - "java"
  name: "info(String info, int stepUp)"
  nameWithType: "Log.info(String info, int stepUp)"
  fullName: "util.Log.info(String info, int stepUp)"
  overload: "util.Log.info*"
  type: "Method"
  package: "util"
  summary: "Printed on levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref> and <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref> only. Use this method to notify of regular system events like successful loading operations for example. Includes the source class of the method call in the log as well as a second source class further down the stacktrace."
  syntax:
    content: "public static void info(String info, int stepUp)"
    parameters:
    - id: "info"
      type: "java.lang.String"
      description: "the information to be logged"
    - id: "stepUp"
      type: "int"
      description: "the amount of steps to take starting at the default calling class to reach the second class to log;\n               e.g. if the stacktrace is <code>A -> B -> C -> D -> debug</code>\n               then D would be the default calling class and a stepUp of 2 would specify B as the second one to log."
- uid: "util.Log.p(java.lang.String)"
  id: "p(java.lang.String)"
  parent: "util.Log"
  langs:
  - "java"
  name: "p(String text)"
  nameWithType: "Log.p(String text)"
  fullName: "util.Log.p(String text)"
  overload: "util.Log.p*"
  type: "Method"
  package: "util"
  summary: "Always printed. Use this method to make temporary manual debugging messages, that should get removed before any major update or release. Includes the source class of the method call in the log."
  syntax:
    content: "public static void p(String text)"
    parameters:
    - id: "text"
      type: "java.lang.String"
      description: "the debug to be logged"
- uid: "util.Log.p(java.lang.String,int)"
  id: "p(java.lang.String,int)"
  parent: "util.Log"
  langs:
  - "java"
  name: "p(String text, int stepUp)"
  nameWithType: "Log.p(String text, int stepUp)"
  fullName: "util.Log.p(String text, int stepUp)"
  overload: "util.Log.p*"
  type: "Method"
  package: "util"
  summary: "Always printed. Use this method to make temporary manual debugging messages, that should get removed before any major update or release. Includes the source class of the method call in the log as well as a second source class further down the stacktrace."
  syntax:
    content: "public static void p(String text, int stepUp)"
    parameters:
    - id: "text"
      type: "java.lang.String"
      description: "the debug to be logged"
    - id: "stepUp"
      type: "int"
      description: "the amount of steps to take starting at the default calling class to reach the second class to log;\n               e.g. if the stacktrace is <code>A -> B -> C -> D -> debug</code>\n               then D would be the default calling class and a stepUp of 2 would specify B as the second one to log."
- uid: "util.Log.setLogLevel(int)"
  id: "setLogLevel(int)"
  parent: "util.Log"
  langs:
  - "java"
  name: "setLogLevel(int logLevel)"
  nameWithType: "Log.setLogLevel(int logLevel)"
  fullName: "util.Log.setLogLevel(int logLevel)"
  overload: "util.Log.setLogLevel*"
  type: "Method"
  package: "util"
  summary: "Set the log level to filter the amount of logs printed to the terminal"
  syntax:
    content: "public static void setLogLevel(int logLevel)"
    parameters:
    - id: "logLevel"
      type: "int"
      description: "<xref uid=\"util.Log.FATAL_ONLY\" data-throw-if-not-resolved=\"false\">Log#FATAL_ONLY</xref>, <xref uid=\"util.Log.WARNINGS\" data-throw-if-not-resolved=\"false\">Log#WARNINGS</xref>, <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref>, <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref>"
- uid: "util.Log.startLogging(java.io.File,int)"
  id: "startLogging(java.io.File,int)"
  parent: "util.Log"
  langs:
  - "java"
  name: "startLogging(File path, int logLevel)"
  nameWithType: "Log.startLogging(File path, int logLevel)"
  fullName: "util.Log.startLogging(File path, int logLevel)"
  overload: "util.Log.startLogging*"
  type: "Method"
  package: "util"
  summary: "Starts a thread for saving the log into a file. the saved log may have a different logging level than the printed one."
  syntax:
    content: "public static synchronized void startLogging(File path, int logLevel)"
    parameters:
    - id: "path"
      type: "java.io.File"
      description: "the folder path for the log file to be saved to"
    - id: "logLevel"
      type: "int"
      description: "the logging level for the saved file"
  exceptions:
  - type: "java.io.IOException"
    description: "if any issue happens during the creation and saving of the log file"
- uid: "util.Log.warn(java.lang.String)"
  id: "warn(java.lang.String)"
  parent: "util.Log"
  langs:
  - "java"
  name: "warn(String warn)"
  nameWithType: "Log.warn(String warn)"
  fullName: "util.Log.warn(String warn)"
  overload: "util.Log.warn*"
  type: "Method"
  package: "util"
  summary: "Printed on levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref>, <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref> and <xref uid=\"util.Log.WARNINGS\" data-throw-if-not-resolved=\"false\">Log#WARNINGS</xref>. Use this method to warn about unintended behaviour that might lead to bugs that aren't spotted yet. Includes the source class of the method call in the log."
  syntax:
    content: "public static void warn(String warn)"
    parameters:
    - id: "warn"
      type: "java.lang.String"
      description: "the warning to be logged"
- uid: "util.Log.warn(java.lang.String,boolean)"
  id: "warn(java.lang.String,boolean)"
  parent: "util.Log"
  langs:
  - "java"
  name: "warn(String warn, boolean printSource)"
  nameWithType: "Log.warn(String warn, boolean printSource)"
  fullName: "util.Log.warn(String warn, boolean printSource)"
  overload: "util.Log.warn*"
  type: "Method"
  package: "util"
  summary: "Printed on levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref>, <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref> and <xref uid=\"util.Log.WARNINGS\" data-throw-if-not-resolved=\"false\">Log#WARNINGS</xref>. Use this method to warn about unintended behaviour that might lead to bugs that aren't spotted yet. May be used to exclude the source class of the method call from the log."
  syntax:
    content: "public static void warn(String warn, boolean printSource)"
    parameters:
    - id: "warn"
      type: "java.lang.String"
      description: "the warning to be logged"
    - id: "printSource"
      type: "boolean"
      description: "if set to false, the source class is excluded; if set to true, the call is identical to <xref uid=\"util.Log.warn(java.lang.String)\" data-throw-if-not-resolved=\"false\">Log#warn(String)</xref>"
- uid: "util.Log.warn(java.lang.String,int)"
  id: "warn(java.lang.String,int)"
  parent: "util.Log"
  langs:
  - "java"
  name: "warn(String warn, int stepUp)"
  nameWithType: "Log.warn(String warn, int stepUp)"
  fullName: "util.Log.warn(String warn, int stepUp)"
  overload: "util.Log.warn*"
  type: "Method"
  package: "util"
  summary: "Printed on levels <xref uid=\"util.Log.ALL\" data-throw-if-not-resolved=\"false\">Log#ALL</xref>, <xref uid=\"util.Log.NO_DEBUG\" data-throw-if-not-resolved=\"false\">Log#NO_DEBUG</xref> and <xref uid=\"util.Log.WARNINGS\" data-throw-if-not-resolved=\"false\">Log#WARNINGS</xref>. Use this method to warn about unintended behaviour that might lead to bugs that aren't spotted yet. Includes the source class of the method call in the log as well as a second source class further down the stacktrace."
  syntax:
    content: "public static void warn(String warn, int stepUp)"
    parameters:
    - id: "warn"
      type: "java.lang.String"
      description: "the warning to be logged"
    - id: "stepUp"
      type: "int"
      description: "the amount of steps to take starting at the default calling class to reach the second class to log;\n               e.g. if the stacktrace is <code>A -> B -> C -> D -> debug</code>\n               then D would be the default calling class and a stepUp of 2 would specify B as the second one to log."
references:
- uid: "util.Log.Log*"
  name: "Log"
  nameWithType: "Log.Log"
  fullName: "util.Log.Log"
  package: "util"
- uid: "java.io.IOException"
  spec.java:
  - uid: "java.io.IOException"
    name: "IOException"
    fullName: "java.io.IOException"
- uid: "java.io.File"
  spec.java:
  - uid: "java.io.File"
    name: "File"
    fullName: "java.io.File"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "util.Log.startLogging*"
  name: "startLogging"
  nameWithType: "Log.startLogging"
  fullName: "util.Log.startLogging"
  package: "util"
- uid: "util.Log.setLogLevel*"
  name: "setLogLevel"
  nameWithType: "Log.setLogLevel"
  fullName: "util.Log.setLogLevel"
  package: "util"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "util.Log.debug*"
  name: "debug"
  nameWithType: "Log.debug"
  fullName: "util.Log.debug"
  package: "util"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "util.Log.info*"
  name: "info"
  nameWithType: "Log.info"
  fullName: "util.Log.info"
  package: "util"
- uid: "util.Log.warn*"
  name: "warn"
  nameWithType: "Log.warn"
  fullName: "util.Log.warn"
  package: "util"
- uid: "util.Log.fatal*"
  name: "fatal"
  nameWithType: "Log.fatal"
  fullName: "util.Log.fatal"
  package: "util"
- uid: "util.Log.p*"
  name: "p"
  nameWithType: "Log.p"
  fullName: "util.Log.p"
  package: "util"
- uid: "java.lang.Exception"
  spec.java:
  - uid: "java.lang.Exception"
    name: "Exception"
    fullName: "java.lang.Exception"
- uid: "util.Log.crash*"
  name: "crash"
  nameWithType: "Log.crash"
  fullName: "util.Log.crash"
  package: "util"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
