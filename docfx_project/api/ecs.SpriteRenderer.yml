### YamlMime:ManagedReference
items:
- uid: "ecs.SpriteRenderer"
  id: "SpriteRenderer"
  parent: "ecs"
  children:
  - "ecs.SpriteRenderer.SpriteRenderer(graphics.Color,org.joml.Vector2f)"
  - "ecs.SpriteRenderer.SpriteRenderer(graphics.Sprite,org.joml.Vector2f)"
  - "ecs.SpriteRenderer.SpriteRenderer(java.lang.String,org.joml.Vector2f)"
  - "ecs.SpriteRenderer.SpriteRenderer(org.joml.Vector4f,org.joml.Vector2f)"
  - "ecs.SpriteRenderer.getColor()"
  - "ecs.SpriteRenderer.getColorVector()"
  - "ecs.SpriteRenderer.getSize()"
  - "ecs.SpriteRenderer.getTexCoords()"
  - "ecs.SpriteRenderer.getTexture()"
  - "ecs.SpriteRenderer.isDirty()"
  - "ecs.SpriteRenderer.markDirty()"
  - "ecs.SpriteRenderer.setAlpha(float)"
  - "ecs.SpriteRenderer.setClean()"
  - "ecs.SpriteRenderer.setColor(graphics.Color)"
  - "ecs.SpriteRenderer.setColor(org.joml.Vector4f)"
  - "ecs.SpriteRenderer.setSize(org.joml.Vector2f)"
  - "ecs.SpriteRenderer.setSprite(graphics.Sprite)"
  - "ecs.SpriteRenderer.setTexture(graphics.Texture)"
  - "ecs.SpriteRenderer.start()"
  - "ecs.SpriteRenderer.update(float)"
  langs:
  - "java"
  name: "SpriteRenderer"
  nameWithType: "SpriteRenderer"
  fullName: "ecs.SpriteRenderer"
  type: "Class"
  package: "ecs"
  summary: "SpriteRenderer is a component that can be added to a GameObject. it can contain a solid color, a semi-transparent color, or a texture. Sprites can be tinted by the color value."
  syntax:
    content: "public class SpriteRenderer extends Component"
  inheritance:
  - "java.lang.Object"
  - "ecs.Component"
  inheritedMembers:
  - "ecs.Component.compareTo(ecs.Component)"
  - "ecs.Component.debug()"
  - "ecs.Component.position()"
  - "ecs.Component.remove()"
  - "ecs.Component.setPosition(org.joml.Vector2f)"
  - "ecs.Component.start()"
  - "ecs.Component.update(float)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "ecs.SpriteRenderer.SpriteRenderer(graphics.Color,org.joml.Vector2f)"
  id: "SpriteRenderer(graphics.Color,org.joml.Vector2f)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "SpriteRenderer(Color color, Vector2f size)"
  nameWithType: "SpriteRenderer.SpriteRenderer(Color color, Vector2f size)"
  fullName: "ecs.SpriteRenderer.SpriteRenderer(Color color, Vector2f size)"
  overload: "ecs.SpriteRenderer.SpriteRenderer*"
  type: "Constructor"
  package: "ecs"
  summary: "Create the spriteRenderer using a Color object, no sprite."
  syntax:
    content: "public SpriteRenderer(Color color, Vector2f size)"
    parameters:
    - id: "color"
      type: "graphics.Color"
      description: "of type Color, range from 0-255"
    - id: "size"
      type: "org.joml.Vector2f"
- uid: "ecs.SpriteRenderer.SpriteRenderer(graphics.Sprite,org.joml.Vector2f)"
  id: "SpriteRenderer(graphics.Sprite,org.joml.Vector2f)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "SpriteRenderer(Sprite sprite, Vector2f size)"
  nameWithType: "SpriteRenderer.SpriteRenderer(Sprite sprite, Vector2f size)"
  fullName: "ecs.SpriteRenderer.SpriteRenderer(Sprite sprite, Vector2f size)"
  overload: "ecs.SpriteRenderer.SpriteRenderer*"
  type: "Constructor"
  package: "ecs"
  summary: "Create a spriteRenderer using a sprite that is already loaded. Default tint color is white (no tinting visible)."
  syntax:
    content: "public SpriteRenderer(Sprite sprite, Vector2f size)"
    parameters:
    - id: "sprite"
      type: "graphics.Sprite"
    - id: "size"
      type: "org.joml.Vector2f"
- uid: "ecs.SpriteRenderer.SpriteRenderer(java.lang.String,org.joml.Vector2f)"
  id: "SpriteRenderer(java.lang.String,org.joml.Vector2f)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "SpriteRenderer(String path, Vector2f size)"
  nameWithType: "SpriteRenderer.SpriteRenderer(String path, Vector2f size)"
  fullName: "ecs.SpriteRenderer.SpriteRenderer(String path, Vector2f size)"
  overload: "ecs.SpriteRenderer.SpriteRenderer*"
  type: "Constructor"
  package: "ecs"
  summary: "Create a spriteRenderer using an image from the fileSystem."
  syntax:
    content: "public SpriteRenderer(String path, Vector2f size)"
    parameters:
    - id: "path"
      type: "java.lang.String"
      description: "to the image (ie. \"src/assets/images/pepper.png\")"
    - id: "size"
      type: "org.joml.Vector2f"
- uid: "ecs.SpriteRenderer.SpriteRenderer(org.joml.Vector4f,org.joml.Vector2f)"
  id: "SpriteRenderer(org.joml.Vector4f,org.joml.Vector2f)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "SpriteRenderer(Vector4f color, Vector2f size)"
  nameWithType: "SpriteRenderer.SpriteRenderer(Vector4f color, Vector2f size)"
  fullName: "ecs.SpriteRenderer.SpriteRenderer(Vector4f color, Vector2f size)"
  overload: "ecs.SpriteRenderer.SpriteRenderer*"
  type: "Constructor"
  package: "ecs"
  summary: "Create the spriteRenderer using a color vector, no sprite."
  syntax:
    content: "public SpriteRenderer(Vector4f color, Vector2f size)"
    parameters:
    - id: "color"
      type: "org.joml.Vector4f"
      description: "of type JOML Vector4f, range from 0-1"
    - id: "size"
      type: "org.joml.Vector2f"
- uid: "ecs.SpriteRenderer.getColor()"
  id: "getColor()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "getColor()"
  nameWithType: "SpriteRenderer.getColor()"
  fullName: "ecs.SpriteRenderer.getColor()"
  overload: "ecs.SpriteRenderer.getColor*"
  type: "Method"
  package: "ecs"
  syntax:
    content: "public Color getColor()"
    return:
      type: "graphics.Color"
      description: "type Color in standard RGBA form in the range 0-255"
- uid: "ecs.SpriteRenderer.getColorVector()"
  id: "getColorVector()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "getColorVector()"
  nameWithType: "SpriteRenderer.getColorVector()"
  fullName: "ecs.SpriteRenderer.getColorVector()"
  overload: "ecs.SpriteRenderer.getColorVector*"
  type: "Method"
  package: "ecs"
  syntax:
    content: "public Vector4f getColorVector()"
    return:
      type: "org.joml.Vector4f"
      description: "a Vector4f containing the normalized (0-1) color values (R, G, B, and A)"
- uid: "ecs.SpriteRenderer.getSize()"
  id: "getSize()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "getSize()"
  nameWithType: "SpriteRenderer.getSize()"
  fullName: "ecs.SpriteRenderer.getSize()"
  overload: "ecs.SpriteRenderer.getSize*"
  type: "Method"
  package: "ecs"
  syntax:
    content: "public Vector2f getSize()"
    return:
      type: "org.joml.Vector2f"
- uid: "ecs.SpriteRenderer.getTexCoords()"
  id: "getTexCoords()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "getTexCoords()"
  nameWithType: "SpriteRenderer.getTexCoords()"
  fullName: "ecs.SpriteRenderer.getTexCoords()"
  overload: "ecs.SpriteRenderer.getTexCoords*"
  type: "Method"
  package: "ecs"
  syntax:
    content: "public Vector2f[] getTexCoords()"
    return:
      type: "org.joml.Vector2f[]"
      description: "Vector2f array of the UV coordinates of the sprite if applicable."
- uid: "ecs.SpriteRenderer.getTexture()"
  id: "getTexture()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "getTexture()"
  nameWithType: "SpriteRenderer.getTexture()"
  fullName: "ecs.SpriteRenderer.getTexture()"
  overload: "ecs.SpriteRenderer.getTexture*"
  type: "Method"
  package: "ecs"
  syntax:
    content: "public Texture getTexture()"
    return:
      type: "graphics.Texture"
      description: "type Texture of the sprite if applicable."
- uid: "ecs.SpriteRenderer.isDirty()"
  id: "isDirty()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "isDirty()"
  nameWithType: "SpriteRenderer.isDirty()"
  fullName: "ecs.SpriteRenderer.isDirty()"
  overload: "ecs.SpriteRenderer.isDirty*"
  type: "Method"
  package: "ecs"
  summary: "Used by the renderer to determine if this sprite should be sent back to the GPU to be redrawn."
  syntax:
    content: "public boolean isDirty()"
    return:
      type: "boolean"
      description: "true or false if the sprite or color has changes since last draw."
- uid: "ecs.SpriteRenderer.markDirty()"
  id: "markDirty()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "markDirty()"
  nameWithType: "SpriteRenderer.markDirty()"
  fullName: "ecs.SpriteRenderer.markDirty()"
  overload: "ecs.SpriteRenderer.markDirty*"
  type: "Method"
  package: "ecs"
  summary: "Mark this Sprite renderer as dirty"
  syntax:
    content: "public void markDirty()"
- uid: "ecs.SpriteRenderer.setAlpha(float)"
  id: "setAlpha(float)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "setAlpha(float a)"
  nameWithType: "SpriteRenderer.setAlpha(float a)"
  fullName: "ecs.SpriteRenderer.setAlpha(float a)"
  overload: "ecs.SpriteRenderer.setAlpha*"
  type: "Method"
  package: "ecs"
  summary: "Change the alpha/opacity of the sprite and/or color"
  syntax:
    content: "public void setAlpha(float a)"
    parameters:
    - id: "a"
      type: "float"
      description: "alpha/opacity"
- uid: "ecs.SpriteRenderer.setClean()"
  id: "setClean()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "setClean()"
  nameWithType: "SpriteRenderer.setClean()"
  fullName: "ecs.SpriteRenderer.setClean()"
  overload: "ecs.SpriteRenderer.setClean*"
  type: "Method"
  package: "ecs"
  summary: "Used by the renderer to reset the state of the SpriteRenderer to clean."
  syntax:
    content: "public void setClean()"
- uid: "ecs.SpriteRenderer.setColor(graphics.Color)"
  id: "setColor(graphics.Color)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "setColor(Color color)"
  nameWithType: "SpriteRenderer.setColor(Color color)"
  fullName: "ecs.SpriteRenderer.setColor(Color color)"
  overload: "ecs.SpriteRenderer.setColor*"
  type: "Method"
  package: "ecs"
  summary: "Change the color by passing a Color object, converting it to a normalized Vector4f."
  syntax:
    content: "public void setColor(Color color)"
    parameters:
    - id: "color"
      type: "graphics.Color"
      description: "should be in range of 0-255"
- uid: "ecs.SpriteRenderer.setColor(org.joml.Vector4f)"
  id: "setColor(org.joml.Vector4f)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "setColor(Vector4f color)"
  nameWithType: "SpriteRenderer.setColor(Vector4f color)"
  fullName: "ecs.SpriteRenderer.setColor(Vector4f color)"
  overload: "ecs.SpriteRenderer.setColor*"
  type: "Method"
  package: "ecs"
  summary: "Change the color by passing a Vector4f"
  syntax:
    content: "public void setColor(Vector4f color)"
    parameters:
    - id: "color"
      type: "org.joml.Vector4f"
      description: "vector, values should be in the range of 0-1"
- uid: "ecs.SpriteRenderer.setSize(org.joml.Vector2f)"
  id: "setSize(org.joml.Vector2f)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "setSize(Vector2f size)"
  nameWithType: "SpriteRenderer.setSize(Vector2f size)"
  fullName: "ecs.SpriteRenderer.setSize(Vector2f size)"
  overload: "ecs.SpriteRenderer.setSize*"
  type: "Method"
  package: "ecs"
  syntax:
    content: "public void setSize(Vector2f size)"
    parameters:
    - id: "size"
      type: "org.joml.Vector2f"
- uid: "ecs.SpriteRenderer.setSprite(graphics.Sprite)"
  id: "setSprite(graphics.Sprite)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "setSprite(Sprite sprite)"
  nameWithType: "SpriteRenderer.setSprite(Sprite sprite)"
  fullName: "ecs.SpriteRenderer.setSprite(Sprite sprite)"
  overload: "ecs.SpriteRenderer.setSprite*"
  type: "Method"
  package: "ecs"
  summary: "Change the sprite contained in the SpriteRenderer Component."
  syntax:
    content: "public void setSprite(Sprite sprite)"
    parameters:
    - id: "sprite"
      type: "graphics.Sprite"
- uid: "ecs.SpriteRenderer.setTexture(graphics.Texture)"
  id: "setTexture(graphics.Texture)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "setTexture(Texture texture)"
  nameWithType: "SpriteRenderer.setTexture(Texture texture)"
  fullName: "ecs.SpriteRenderer.setTexture(Texture texture)"
  overload: "ecs.SpriteRenderer.setTexture*"
  type: "Method"
  package: "ecs"
  summary: "Set the texture of the Sprite if required."
  syntax:
    content: "public void setTexture(Texture texture)"
    parameters:
    - id: "texture"
      type: "graphics.Texture"
      description: "the new texture of this sprite"
- uid: "ecs.SpriteRenderer.start()"
  id: "start()"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "start()"
  nameWithType: "SpriteRenderer.start()"
  fullName: "ecs.SpriteRenderer.start()"
  overload: "ecs.SpriteRenderer.start*"
  overridden: "ecs.Component.start()"
  type: "Method"
  package: "ecs"
  summary: "Initialize the Component, called once after creation by the parent GameObject."
  syntax:
    content: "public void start()"
- uid: "ecs.SpriteRenderer.update(float)"
  id: "update(float)"
  parent: "ecs.SpriteRenderer"
  langs:
  - "java"
  name: "update(float dt)"
  nameWithType: "SpriteRenderer.update(float dt)"
  fullName: "ecs.SpriteRenderer.update(float dt)"
  overload: "ecs.SpriteRenderer.update*"
  overridden: "ecs.Component.update(float)"
  type: "Method"
  package: "ecs"
  summary: "Update method called every frame by parent GameObject"
  syntax:
    content: "public void update(float dt)"
    parameters:
    - id: "dt"
      type: "float"
      description: "Engine.deltaTime"
references:
- uid: "org.joml.Vector4f"
  spec.java:
  - uid: "org.joml.Vector4f"
    name: "Vector4f"
    fullName: "org.joml.Vector4f"
- uid: "org.joml.Vector2f"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
- uid: "ecs.SpriteRenderer.SpriteRenderer*"
  name: "SpriteRenderer"
  nameWithType: "SpriteRenderer.SpriteRenderer"
  fullName: "ecs.SpriteRenderer.SpriteRenderer"
  package: "ecs"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "graphics.Sprite"
  name: "Sprite"
  nameWithType: "Sprite"
  fullName: "graphics.Sprite"
- uid: "java.lang.String"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
- uid: "ecs.SpriteRenderer.start*"
  name: "start"
  nameWithType: "SpriteRenderer.start"
  fullName: "ecs.SpriteRenderer.start"
  package: "ecs"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "ecs.SpriteRenderer.update*"
  name: "update"
  nameWithType: "SpriteRenderer.update"
  fullName: "ecs.SpriteRenderer.update"
  package: "ecs"
- uid: "graphics.Texture"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
- uid: "ecs.SpriteRenderer.getTexture*"
  name: "getTexture"
  nameWithType: "SpriteRenderer.getTexture"
  fullName: "ecs.SpriteRenderer.getTexture"
  package: "ecs"
- uid: "ecs.SpriteRenderer.getSize*"
  name: "getSize"
  nameWithType: "SpriteRenderer.getSize"
  fullName: "ecs.SpriteRenderer.getSize"
  package: "ecs"
- uid: "ecs.SpriteRenderer.setSize*"
  name: "setSize"
  nameWithType: "SpriteRenderer.setSize"
  fullName: "ecs.SpriteRenderer.setSize"
  package: "ecs"
- uid: "ecs.SpriteRenderer.setTexture*"
  name: "setTexture"
  nameWithType: "SpriteRenderer.setTexture"
  fullName: "ecs.SpriteRenderer.setTexture"
  package: "ecs"
- uid: "org.joml.Vector2f[]"
  spec.java:
  - uid: "org.joml.Vector2f"
    name: "Vector2f"
    fullName: "org.joml.Vector2f"
  - name: "[]"
    fullName: "[]"
- uid: "ecs.SpriteRenderer.getTexCoords*"
  name: "getTexCoords"
  nameWithType: "SpriteRenderer.getTexCoords"
  fullName: "ecs.SpriteRenderer.getTexCoords"
  package: "ecs"
- uid: "ecs.SpriteRenderer.getColorVector*"
  name: "getColorVector"
  nameWithType: "SpriteRenderer.getColorVector"
  fullName: "ecs.SpriteRenderer.getColorVector"
  package: "ecs"
- uid: "ecs.SpriteRenderer.getColor*"
  name: "getColor"
  nameWithType: "SpriteRenderer.getColor"
  fullName: "ecs.SpriteRenderer.getColor"
  package: "ecs"
- uid: "ecs.SpriteRenderer.setColor*"
  name: "setColor"
  nameWithType: "SpriteRenderer.setColor"
  fullName: "ecs.SpriteRenderer.setColor"
  package: "ecs"
- uid: "ecs.SpriteRenderer.setAlpha*"
  name: "setAlpha"
  nameWithType: "SpriteRenderer.setAlpha"
  fullName: "ecs.SpriteRenderer.setAlpha"
  package: "ecs"
- uid: "ecs.SpriteRenderer.setSprite*"
  name: "setSprite"
  nameWithType: "SpriteRenderer.setSprite"
  fullName: "ecs.SpriteRenderer.setSprite"
  package: "ecs"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "ecs.SpriteRenderer.isDirty*"
  name: "isDirty"
  nameWithType: "SpriteRenderer.isDirty"
  fullName: "ecs.SpriteRenderer.isDirty"
  package: "ecs"
- uid: "ecs.SpriteRenderer.markDirty*"
  name: "markDirty"
  nameWithType: "SpriteRenderer.markDirty"
  fullName: "ecs.SpriteRenderer.markDirty"
  package: "ecs"
- uid: "ecs.SpriteRenderer.setClean*"
  name: "setClean"
  nameWithType: "SpriteRenderer.setClean"
  fullName: "ecs.SpriteRenderer.setClean"
  package: "ecs"
- uid: "ecs.Component"
  name: "Component"
  nameWithType: "Component"
  fullName: "ecs.Component"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "ecs.Component.compareTo(ecs.Component)"
  name: "Component.compareTo(Component)"
  nameWithType: "Component.compareTo(Component)"
  fullName: "ecs.Component.compareTo(ecs.Component)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "ecs.Component.debug()"
  name: "Component.debug()"
  nameWithType: "Component.debug()"
  fullName: "ecs.Component.debug()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ecs.Component.start()"
  name: "Component.start()"
  nameWithType: "Component.start()"
  fullName: "ecs.Component.start()"
- uid: "ecs.Component.remove()"
  name: "Component.remove()"
  nameWithType: "Component.remove()"
  fullName: "ecs.Component.remove()"
- uid: "ecs.Component.position()"
  name: "Component.position()"
  nameWithType: "Component.position()"
  fullName: "ecs.Component.position()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "ecs.Component.setPosition(org.joml.Vector2f)"
  name: "Component.setPosition(Vector2f)"
  nameWithType: "Component.setPosition(Vector2f)"
  fullName: "ecs.Component.setPosition(org.joml.Vector2f)"
- uid: "ecs.Component.update(float)"
  name: "Component.update(float)"
  nameWithType: "Component.update(float)"
  fullName: "ecs.Component.update(float)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
