### YamlMime:ManagedReference
items:
- uid: "audio.AudioSource"
  id: "AudioSource"
  parent: "audio"
  children:
  - "audio.AudioSource.AudioSource()"
  - "audio.AudioSource.AudioSource(audio.AudioBuffer)"
  - "audio.AudioSource.AudioSource(java.lang.String...)"
  - "audio.AudioSource.audioBuffers"
  - "audio.AudioSource.getSelectedBuffer()"
  - "audio.AudioSource.isLooping()"
  - "audio.AudioSource.isPlaying()"
  - "audio.AudioSource.play(int,boolean)"
  - "audio.AudioSource.setLooping(boolean)"
  - "audio.AudioSource.start()"
  - "audio.AudioSource.stop()"
  - "audio.AudioSource.update(float)"
  langs:
  - "java"
  name: "AudioSource"
  nameWithType: "AudioSource"
  fullName: "audio.AudioSource"
  type: "Class"
  package: "audio"
  summary: "Object representing a sound's source as well as it's velocity (for applying the doppler effect)."
  syntax:
    content: "public class AudioSource extends Component"
  inheritance:
  - "java.lang.Object"
  - "ecs.Component"
  inheritedMembers:
  - "ecs.Component.compareTo(ecs.Component)"
  - "ecs.Component.debug()"
  - "ecs.Component.position()"
  - "ecs.Component.remove()"
  - "ecs.Component.setPosition(org.joml.Vector2f)"
  - "ecs.Component.start()"
  - "ecs.Component.update(float)"
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "audio.AudioSource.AudioSource()"
  id: "AudioSource()"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "AudioSource()"
  nameWithType: "AudioSource.AudioSource()"
  fullName: "audio.AudioSource.AudioSource()"
  overload: "audio.AudioSource.AudioSource*"
  type: "Constructor"
  package: "audio"
  syntax:
    content: "public AudioSource()"
- uid: "audio.AudioSource.AudioSource(audio.AudioBuffer)"
  id: "AudioSource(audio.AudioBuffer)"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "AudioSource(AudioBuffer buffer)"
  nameWithType: "AudioSource.AudioSource(AudioBuffer buffer)"
  fullName: "audio.AudioSource.AudioSource(AudioBuffer buffer)"
  overload: "audio.AudioSource.AudioSource*"
  type: "Constructor"
  package: "audio"
  syntax:
    content: "public AudioSource(AudioBuffer buffer)"
    parameters:
    - id: "buffer"
      type: "audio.AudioBuffer"
- uid: "audio.AudioSource.AudioSource(java.lang.String...)"
  id: "AudioSource(java.lang.String...)"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "AudioSource(String[] sources)"
  nameWithType: "AudioSource.AudioSource(String[] sources)"
  fullName: "audio.AudioSource.AudioSource(String[] sources)"
  overload: "audio.AudioSource.AudioSource*"
  type: "Constructor"
  package: "audio"
  syntax:
    content: "public AudioSource(String[] sources)"
    parameters:
    - id: "sources"
      type: "java.lang.String[]"
- uid: "audio.AudioSource.audioBuffers"
  id: "audioBuffers"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "audioBuffers"
  nameWithType: "AudioSource.audioBuffers"
  fullName: "audio.AudioSource.audioBuffers"
  type: "Field"
  package: "audio"
  summary: "List of audio buffers this source can play."
  syntax:
    content: "public List<AudioBuffer> audioBuffers"
    return:
      type: "java.util.List<audio.AudioBuffer>"
- uid: "audio.AudioSource.getSelectedBuffer()"
  id: "getSelectedBuffer()"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "getSelectedBuffer()"
  nameWithType: "AudioSource.getSelectedBuffer()"
  fullName: "audio.AudioSource.getSelectedBuffer()"
  overload: "audio.AudioSource.getSelectedBuffer*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public AudioBuffer getSelectedBuffer()"
    return:
      type: "audio.AudioBuffer"
- uid: "audio.AudioSource.isLooping()"
  id: "isLooping()"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "isLooping()"
  nameWithType: "AudioSource.isLooping()"
  fullName: "audio.AudioSource.isLooping()"
  overload: "audio.AudioSource.isLooping*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public boolean isLooping()"
    return:
      type: "boolean"
- uid: "audio.AudioSource.isPlaying()"
  id: "isPlaying()"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "isPlaying()"
  nameWithType: "AudioSource.isPlaying()"
  fullName: "audio.AudioSource.isPlaying()"
  overload: "audio.AudioSource.isPlaying*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public boolean isPlaying()"
    return:
      type: "boolean"
- uid: "audio.AudioSource.play(int,boolean)"
  id: "play(int,boolean)"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "play(int index, boolean isLooping)"
  nameWithType: "AudioSource.play(int index, boolean isLooping)"
  fullName: "audio.AudioSource.play(int index, boolean isLooping)"
  overload: "audio.AudioSource.play*"
  type: "Method"
  package: "audio"
  summary: "Sets the selected buffer to whatever the index indicates, then plays all of this buffer."
  syntax:
    content: "public void play(int index, boolean isLooping)"
    parameters:
    - id: "index"
      type: "int"
    - id: "isLooping"
      type: "boolean"
- uid: "audio.AudioSource.setLooping(boolean)"
  id: "setLooping(boolean)"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "setLooping(boolean looping)"
  nameWithType: "AudioSource.setLooping(boolean looping)"
  fullName: "audio.AudioSource.setLooping(boolean looping)"
  overload: "audio.AudioSource.setLooping*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public void setLooping(boolean looping)"
    parameters:
    - id: "looping"
      type: "boolean"
- uid: "audio.AudioSource.start()"
  id: "start()"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "start()"
  nameWithType: "AudioSource.start()"
  fullName: "audio.AudioSource.start()"
  overload: "audio.AudioSource.start*"
  overridden: "ecs.Component.start()"
  type: "Method"
  package: "audio"
  summary: "Called once on Component initialization."
  syntax:
    content: "public void start()"
- uid: "audio.AudioSource.stop()"
  id: "stop()"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "stop()"
  nameWithType: "AudioSource.stop()"
  fullName: "audio.AudioSource.stop()"
  overload: "audio.AudioSource.stop*"
  type: "Method"
  package: "audio"
  syntax:
    content: "public void stop()"
- uid: "audio.AudioSource.update(float)"
  id: "update(float)"
  parent: "audio.AudioSource"
  langs:
  - "java"
  name: "update(float dt)"
  nameWithType: "AudioSource.update(float dt)"
  fullName: "audio.AudioSource.update(float dt)"
  overload: "audio.AudioSource.update*"
  overridden: "ecs.Component.update(float)"
  type: "Method"
  package: "audio"
  summary: "Called once per frame for each Component"
  syntax:
    content: "public void update(float dt)"
    parameters:
    - id: "dt"
      type: "float"
references:
- uid: "audio.AudioSource.AudioSource*"
  name: "AudioSource"
  nameWithType: "AudioSource.AudioSource"
  fullName: "audio.AudioSource.AudioSource"
  package: "audio"
- uid: "audio.AudioBuffer"
  name: "AudioBuffer"
  nameWithType: "AudioBuffer"
  fullName: "audio.AudioBuffer"
- uid: "java.lang.String[]"
  spec.java:
  - uid: "java.lang.String"
    name: "String"
    fullName: "java.lang.String"
  - name: "[]"
    fullName: "[]"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "audio.AudioSource.setLooping*"
  name: "setLooping"
  nameWithType: "AudioSource.setLooping"
  fullName: "audio.AudioSource.setLooping"
  package: "audio"
- uid: "audio.AudioSource.isLooping*"
  name: "isLooping"
  nameWithType: "AudioSource.isLooping"
  fullName: "audio.AudioSource.isLooping"
  package: "audio"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "audio.AudioSource.play*"
  name: "play"
  nameWithType: "AudioSource.play"
  fullName: "audio.AudioSource.play"
  package: "audio"
- uid: "audio.AudioSource.isPlaying*"
  name: "isPlaying"
  nameWithType: "AudioSource.isPlaying"
  fullName: "audio.AudioSource.isPlaying"
  package: "audio"
- uid: "audio.AudioSource.stop*"
  name: "stop"
  nameWithType: "AudioSource.stop"
  fullName: "audio.AudioSource.stop"
  package: "audio"
- uid: "audio.AudioSource.getSelectedBuffer*"
  name: "getSelectedBuffer"
  nameWithType: "AudioSource.getSelectedBuffer"
  fullName: "audio.AudioSource.getSelectedBuffer"
  package: "audio"
- uid: "audio.AudioSource.start*"
  name: "start"
  nameWithType: "AudioSource.start"
  fullName: "audio.AudioSource.start"
  package: "audio"
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "audio.AudioSource.update*"
  name: "update"
  nameWithType: "AudioSource.update"
  fullName: "audio.AudioSource.update"
  package: "audio"
- uid: "java.util.List<audio.AudioBuffer>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "audio.AudioBuffer"
    name: "AudioBuffer"
    fullName: "audio.AudioBuffer"
  - name: ">"
    fullName: ">"
- uid: "ecs.Component"
  name: "Component"
  nameWithType: "Component"
  fullName: "ecs.Component"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "ecs.Component.compareTo(ecs.Component)"
  name: "Component.compareTo(Component)"
  nameWithType: "Component.compareTo(Component)"
  fullName: "ecs.Component.compareTo(ecs.Component)"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "ecs.Component.debug()"
  name: "Component.debug()"
  nameWithType: "Component.debug()"
  fullName: "ecs.Component.debug()"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "ecs.Component.start()"
  name: "Component.start()"
  nameWithType: "Component.start()"
  fullName: "ecs.Component.start()"
- uid: "ecs.Component.remove()"
  name: "Component.remove()"
  nameWithType: "Component.remove()"
  fullName: "ecs.Component.remove()"
- uid: "ecs.Component.position()"
  name: "Component.position()"
  nameWithType: "Component.position()"
  fullName: "ecs.Component.position()"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "ecs.Component.setPosition(org.joml.Vector2f)"
  name: "Component.setPosition(Vector2f)"
  nameWithType: "Component.setPosition(Vector2f)"
  fullName: "ecs.Component.setPosition(org.joml.Vector2f)"
- uid: "ecs.Component.update(float)"
  name: "Component.update(float)"
  nameWithType: "Component.update(float)"
  fullName: "ecs.Component.update(float)"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
