### YamlMime:ManagedReference
items:
- uid: "scene.Scene"
  id: "Scene"
  parent: "scene"
  children:
  - "scene.Scene.Scene()"
  - "scene.Scene.activate()"
  - "scene.Scene.addGameObjectToScene(ecs.GameObject)"
  - "scene.Scene.addToRenderers(ecs.GameObject)"
  - "scene.Scene.addUiObject(ecs.Text)"
  - "scene.Scene.awake()"
  - "scene.Scene.camera"
  - "scene.Scene.camera()"
  - "scene.Scene.clean()"
  - "scene.Scene.deactivate()"
  - "scene.Scene.debugRender()"
  - "scene.Scene.debugRenderer"
  - "scene.Scene.forwardToScreen"
  - "scene.Scene.getColliders()"
  - "scene.Scene.getGameObjects()"
  - "scene.Scene.initRenderers()"
  - "scene.Scene.isActive()"
  - "scene.Scene.lightmapRenderer"
  - "scene.Scene.postProcess(graphics.Texture)"
  - "scene.Scene.registerCollider(ecs.GameObject)"
  - "scene.Scene.registerRenderer(graphics.renderer.Renderer)"
  - "scene.Scene.removeGameObjectFromScene(ecs.GameObject)"
  - "scene.Scene.render()"
  - "scene.Scene.renderer"
  - "scene.Scene.sceneId()"
  - "scene.Scene.startGameObjects()"
  - "scene.Scene.startUi()"
  - "scene.Scene.textRender()"
  - "scene.Scene.textRenderer"
  - "scene.Scene.unregisterCollider(ecs.GameObject)"
  - "scene.Scene.update()"
  - "scene.Scene.updateGameObjects()"
  - "scene.Scene.updateUI()"
  langs:
  - "java"
  name: "Scene"
  nameWithType: "Scene"
  fullName: "scene.Scene"
  type: "Class"
  package: "scene"
  syntax:
    content: "public abstract class Scene"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "scene.Scene.Scene()"
  id: "Scene()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "Scene()"
  nameWithType: "Scene.Scene()"
  fullName: "scene.Scene.Scene()"
  overload: "scene.Scene.Scene*"
  type: "Constructor"
  package: "scene"
  syntax:
    content: "public Scene()"
- uid: "scene.Scene.activate()"
  id: "activate()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "activate()"
  nameWithType: "Scene.activate()"
  fullName: "scene.Scene.activate()"
  overload: "scene.Scene.activate*"
  type: "Method"
  package: "scene"
  summary: "This method will be called each time this scene becomes active by <xref uid=\"scene.SceneManager\" data-throw-if-not-resolved=\"false\">SceneManager</xref>. Will be called right before the first update. Can be used to prepare the scene to be shown after been shown previously to reset to a certain state."
  syntax:
    content: "public void activate()"
- uid: "scene.Scene.addGameObjectToScene(ecs.GameObject)"
  id: "addGameObjectToScene(ecs.GameObject)"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "addGameObjectToScene(GameObject gameObject)"
  nameWithType: "Scene.addGameObjectToScene(GameObject gameObject)"
  fullName: "scene.Scene.addGameObjectToScene(GameObject gameObject)"
  overload: "scene.Scene.addGameObjectToScene*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void addGameObjectToScene(GameObject gameObject)"
    parameters:
    - id: "gameObject"
      type: "ecs.GameObject"
      description: "GameObject to be added.\n                   Add a new gameObject to the scene and immediately call its start method."
- uid: "scene.Scene.addToRenderers(ecs.GameObject)"
  id: "addToRenderers(ecs.GameObject)"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "addToRenderers(GameObject gameObject)"
  nameWithType: "Scene.addToRenderers(GameObject gameObject)"
  fullName: "scene.Scene.addToRenderers(GameObject gameObject)"
  overload: "scene.Scene.addToRenderers*"
  type: "Method"
  package: "scene"
  summary: "Add a gameObject to all renderers"
  syntax:
    content: "public void addToRenderers(GameObject gameObject)"
    parameters:
    - id: "gameObject"
      type: "ecs.GameObject"
      description: "the gameObject to be added"
- uid: "scene.Scene.addUiObject(ecs.Text)"
  id: "addUiObject(ecs.Text)"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "addUiObject(Text t)"
  nameWithType: "Scene.addUiObject(Text t)"
  fullName: "scene.Scene.addUiObject(Text t)"
  overload: "scene.Scene.addUiObject*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void addUiObject(Text t)"
    parameters:
    - id: "t"
      type: "ecs.Text"
- uid: "scene.Scene.awake()"
  id: "awake()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "awake()"
  nameWithType: "Scene.awake()"
  fullName: "scene.Scene.awake()"
  overload: "scene.Scene.awake*"
  type: "Method"
  package: "scene"
  summary: "Runs only once on startup, useful for initializing gameObjects or for first time setup."
  syntax:
    content: "public void awake()"
- uid: "scene.Scene.camera"
  id: "camera"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "camera"
  nameWithType: "Scene.camera"
  fullName: "scene.Scene.camera"
  type: "Field"
  package: "scene"
  syntax:
    content: "protected Camera camera"
    return:
      type: "graphics.Camera"
- uid: "scene.Scene.camera()"
  id: "camera()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "camera()"
  nameWithType: "Scene.camera()"
  fullName: "scene.Scene.camera()"
  overload: "scene.Scene.camera*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public Camera camera()"
    return:
      type: "graphics.Camera"
      description: "Returns the scene's instance of Camera"
- uid: "scene.Scene.clean()"
  id: "clean()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "clean()"
  nameWithType: "Scene.clean()"
  fullName: "scene.Scene.clean()"
  overload: "scene.Scene.clean*"
  type: "Method"
  package: "scene"
  summary: "This method is called at the end of the program"
  syntax:
    content: "public void clean()"
- uid: "scene.Scene.deactivate()"
  id: "deactivate()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "deactivate()"
  nameWithType: "Scene.deactivate()"
  fullName: "scene.Scene.deactivate()"
  overload: "scene.Scene.deactivate*"
  type: "Method"
  package: "scene"
  summary: "This method will be called each time this scene becomes inactive by <xref uid=\"scene.SceneManager\" data-throw-if-not-resolved=\"false\">SceneManager</xref>, because of switching to another method or termination of the program. Can be used to preserve the current state of the scene or quickly complete/cancel tasks that were midst execution."
  syntax:
    content: "public void deactivate()"
- uid: "scene.Scene.debugRender()"
  id: "debugRender()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "debugRender()"
  nameWithType: "Scene.debugRender()"
  fullName: "scene.Scene.debugRender()"
  overload: "scene.Scene.debugRender*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void debugRender()"
- uid: "scene.Scene.debugRenderer"
  id: "debugRenderer"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "debugRenderer"
  nameWithType: "Scene.debugRenderer"
  fullName: "scene.Scene.debugRenderer"
  type: "Field"
  package: "scene"
  syntax:
    content: "public DebugRenderer debugRenderer"
    return:
      type: "graphics.renderer.DebugRenderer"
- uid: "scene.Scene.forwardToScreen"
  id: "forwardToScreen"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "forwardToScreen"
  nameWithType: "Scene.forwardToScreen"
  fullName: "scene.Scene.forwardToScreen"
  type: "Field"
  package: "scene"
  syntax:
    content: "protected ForwardToTexture forwardToScreen"
    return:
      type: "postprocess.ForwardToTexture"
- uid: "scene.Scene.getColliders()"
  id: "getColliders()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "getColliders()"
  nameWithType: "Scene.getColliders()"
  fullName: "scene.Scene.getColliders()"
  overload: "scene.Scene.getColliders*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public List<Collider> getColliders()"
    return:
      type: "java.util.List<physics.collision.Collider>"
- uid: "scene.Scene.getGameObjects()"
  id: "getGameObjects()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "getGameObjects()"
  nameWithType: "Scene.getGameObjects()"
  fullName: "scene.Scene.getGameObjects()"
  overload: "scene.Scene.getGameObjects*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public List<GameObject> getGameObjects()"
    return:
      type: "java.util.List<ecs.GameObject>"
      description: "the List of gameObjects contained in the scene."
- uid: "scene.Scene.initRenderers()"
  id: "initRenderers()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "initRenderers()"
  nameWithType: "Scene.initRenderers()"
  fullName: "scene.Scene.initRenderers()"
  overload: "scene.Scene.initRenderers*"
  type: "Method"
  package: "scene"
  summary: "Initialize all renderers"
  syntax:
    content: "public void initRenderers()"
- uid: "scene.Scene.isActive()"
  id: "isActive()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "isActive()"
  nameWithType: "Scene.isActive()"
  fullName: "scene.Scene.isActive()"
  overload: "scene.Scene.isActive*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public boolean isActive()"
    return:
      type: "boolean"
- uid: "scene.Scene.lightmapRenderer"
  id: "lightmapRenderer"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "lightmapRenderer"
  nameWithType: "Scene.lightmapRenderer"
  fullName: "scene.Scene.lightmapRenderer"
  type: "Field"
  package: "scene"
  syntax:
    content: "public LightmapRenderer lightmapRenderer"
    return:
      type: "graphics.renderer.LightmapRenderer"
- uid: "scene.Scene.postProcess(graphics.Texture)"
  id: "postProcess(graphics.Texture)"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "postProcess(Texture texture)"
  nameWithType: "Scene.postProcess(Texture texture)"
  fullName: "scene.Scene.postProcess(Texture texture)"
  overload: "scene.Scene.postProcess*"
  type: "Method"
  package: "scene"
  summary: "Apply post processing to a texture"
  syntax:
    content: "public void postProcess(Texture texture)"
    parameters:
    - id: "texture"
      type: "graphics.Texture"
      description: "input texture"
- uid: "scene.Scene.registerCollider(ecs.GameObject)"
  id: "registerCollider(ecs.GameObject)"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "registerCollider(GameObject gameObject)"
  nameWithType: "Scene.registerCollider(GameObject gameObject)"
  fullName: "scene.Scene.registerCollider(GameObject gameObject)"
  overload: "scene.Scene.registerCollider*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public final void registerCollider(GameObject gameObject)"
    parameters:
    - id: "gameObject"
      type: "ecs.GameObject"
- uid: "scene.Scene.registerRenderer(graphics.renderer.Renderer)"
  id: "registerRenderer(graphics.renderer.Renderer)"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "registerRenderer(Renderer renderer)"
  nameWithType: "Scene.registerRenderer(Renderer renderer)"
  fullName: "scene.Scene.registerRenderer(Renderer renderer)"
  overload: "scene.Scene.registerRenderer*"
  type: "Method"
  package: "scene"
  summary: "Register a renderer to this scene"
  syntax:
    content: "public void registerRenderer(Renderer renderer)"
    parameters:
    - id: "renderer"
      type: "graphics.renderer.Renderer"
      description: "the renderer to be registered"
- uid: "scene.Scene.removeGameObjectFromScene(ecs.GameObject)"
  id: "removeGameObjectFromScene(ecs.GameObject)"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "removeGameObjectFromScene(GameObject gameObject)"
  nameWithType: "Scene.removeGameObjectFromScene(GameObject gameObject)"
  fullName: "scene.Scene.removeGameObjectFromScene(GameObject gameObject)"
  overload: "scene.Scene.removeGameObjectFromScene*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void removeGameObjectFromScene(GameObject gameObject)"
    parameters:
    - id: "gameObject"
      type: "ecs.GameObject"
      description: "GameObject to be added."
- uid: "scene.Scene.render()"
  id: "render()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "render()"
  nameWithType: "Scene.render()"
  fullName: "scene.Scene.render()"
  overload: "scene.Scene.render*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void render()"
- uid: "scene.Scene.renderer"
  id: "renderer"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "renderer"
  nameWithType: "Scene.renderer"
  fullName: "scene.Scene.renderer"
  type: "Field"
  package: "scene"
  syntax:
    content: "public DefaultRenderer renderer"
    return:
      type: "graphics.renderer.DefaultRenderer"
- uid: "scene.Scene.sceneId()"
  id: "sceneId()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "sceneId()"
  nameWithType: "Scene.sceneId()"
  fullName: "scene.Scene.sceneId()"
  overload: "scene.Scene.sceneId*"
  type: "Method"
  package: "scene"
  summary: "The sceneId is meant to represent the instance of a scene as an integer"
  syntax:
    content: "public final int sceneId()"
    return:
      type: "int"
- uid: "scene.Scene.startGameObjects()"
  id: "startGameObjects()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "startGameObjects()"
  nameWithType: "Scene.startGameObjects()"
  fullName: "scene.Scene.startGameObjects()"
  overload: "scene.Scene.startGameObjects*"
  type: "Method"
  package: "scene"
  summary: "Loops through all gameobjects already in the scene and calls their start methods."
  syntax:
    content: "public final void startGameObjects()"
- uid: "scene.Scene.startUi()"
  id: "startUi()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "startUi()"
  nameWithType: "Scene.startUi()"
  fullName: "scene.Scene.startUi()"
  overload: "scene.Scene.startUi*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public final void startUi()"
- uid: "scene.Scene.textRender()"
  id: "textRender()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "textRender()"
  nameWithType: "Scene.textRender()"
  fullName: "scene.Scene.textRender()"
  overload: "scene.Scene.textRender*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public final void textRender()"
- uid: "scene.Scene.textRenderer"
  id: "textRenderer"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "textRenderer"
  nameWithType: "Scene.textRenderer"
  fullName: "scene.Scene.textRenderer"
  type: "Field"
  package: "scene"
  syntax:
    content: "public TextRenderer textRenderer"
    return:
      type: "graphics.renderer.TextRenderer"
- uid: "scene.Scene.unregisterCollider(ecs.GameObject)"
  id: "unregisterCollider(ecs.GameObject)"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "unregisterCollider(GameObject gameObject)"
  nameWithType: "Scene.unregisterCollider(GameObject gameObject)"
  fullName: "scene.Scene.unregisterCollider(GameObject gameObject)"
  overload: "scene.Scene.unregisterCollider*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public final void unregisterCollider(GameObject gameObject)"
    parameters:
    - id: "gameObject"
      type: "ecs.GameObject"
- uid: "scene.Scene.update()"
  id: "update()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "update()"
  nameWithType: "Scene.update()"
  fullName: "scene.Scene.update()"
  overload: "scene.Scene.update*"
  type: "Method"
  package: "scene"
  summary: "This method is called every frame, and can be used to update objects."
  syntax:
    content: "public void update()"
- uid: "scene.Scene.updateGameObjects()"
  id: "updateGameObjects()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "updateGameObjects()"
  nameWithType: "Scene.updateGameObjects()"
  fullName: "scene.Scene.updateGameObjects()"
  overload: "scene.Scene.updateGameObjects*"
  type: "Method"
  package: "scene"
  summary: "Loops through all the gameObjects in the scene and calls their update methods."
  syntax:
    content: "public void updateGameObjects()"
- uid: "scene.Scene.updateUI()"
  id: "updateUI()"
  parent: "scene.Scene"
  langs:
  - "java"
  name: "updateUI()"
  nameWithType: "Scene.updateUI()"
  fullName: "scene.Scene.updateUI()"
  overload: "scene.Scene.updateUI*"
  type: "Method"
  package: "scene"
  syntax:
    content: "public void updateUI()"
references:
- uid: "scene.Scene.Scene*"
  name: "Scene"
  nameWithType: "Scene.Scene"
  fullName: "scene.Scene.Scene"
  package: "scene"
- uid: "boolean"
  spec.java:
  - uid: "boolean"
    name: "boolean"
    fullName: "boolean"
- uid: "scene.Scene.isActive*"
  name: "isActive"
  nameWithType: "Scene.isActive"
  fullName: "scene.Scene.isActive"
  package: "scene"
- uid: "scene.Scene.awake*"
  name: "awake"
  nameWithType: "Scene.awake"
  fullName: "scene.Scene.awake"
  package: "scene"
- uid: "scene.Scene.activate*"
  name: "activate"
  nameWithType: "Scene.activate"
  fullName: "scene.Scene.activate"
  package: "scene"
- uid: "scene.Scene.deactivate*"
  name: "deactivate"
  nameWithType: "Scene.deactivate"
  fullName: "scene.Scene.deactivate"
  package: "scene"
- uid: "scene.Scene.update*"
  name: "update"
  nameWithType: "Scene.update"
  fullName: "scene.Scene.update"
  package: "scene"
- uid: "graphics.Texture"
  name: "Texture"
  nameWithType: "Texture"
  fullName: "graphics.Texture"
- uid: "scene.Scene.postProcess*"
  name: "postProcess"
  nameWithType: "Scene.postProcess"
  fullName: "scene.Scene.postProcess"
  package: "scene"
- uid: "scene.Scene.clean*"
  name: "clean"
  nameWithType: "Scene.clean"
  fullName: "scene.Scene.clean"
  package: "scene"
- uid: "scene.Scene.startUi*"
  name: "startUi"
  nameWithType: "Scene.startUi"
  fullName: "scene.Scene.startUi"
  package: "scene"
- uid: "scene.Scene.startGameObjects*"
  name: "startGameObjects"
  nameWithType: "Scene.startGameObjects"
  fullName: "scene.Scene.startGameObjects"
  package: "scene"
- uid: "java.util.List<physics.collision.Collider>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "physics.collision.Collider"
    name: "Collider"
    fullName: "physics.collision.Collider"
  - name: ">"
    fullName: ">"
- uid: "scene.Scene.getColliders*"
  name: "getColliders"
  nameWithType: "Scene.getColliders"
  fullName: "scene.Scene.getColliders"
  package: "scene"
- uid: "ecs.GameObject"
  name: "GameObject"
  nameWithType: "GameObject"
  fullName: "ecs.GameObject"
- uid: "scene.Scene.registerCollider*"
  name: "registerCollider"
  nameWithType: "Scene.registerCollider"
  fullName: "scene.Scene.registerCollider"
  package: "scene"
- uid: "scene.Scene.unregisterCollider*"
  name: "unregisterCollider"
  nameWithType: "Scene.unregisterCollider"
  fullName: "scene.Scene.unregisterCollider"
  package: "scene"
- uid: "int"
  spec.java:
  - uid: "int"
    name: "int"
    fullName: "int"
- uid: "scene.Scene.sceneId*"
  name: "sceneId"
  nameWithType: "Scene.sceneId"
  fullName: "scene.Scene.sceneId"
  package: "scene"
- uid: "java.util.List<ecs.GameObject>"
  spec.java:
  - uid: "java.util.List"
    name: "List"
    fullName: "java.util.List"
  - name: "<"
    fullName: "<"
  - uid: "ecs.GameObject"
    name: "GameObject"
    fullName: "ecs.GameObject"
  - name: ">"
    fullName: ">"
- uid: "scene.Scene.getGameObjects*"
  name: "getGameObjects"
  nameWithType: "Scene.getGameObjects"
  fullName: "scene.Scene.getGameObjects"
  package: "scene"
- uid: "scene.Scene.addGameObjectToScene*"
  name: "addGameObjectToScene"
  nameWithType: "Scene.addGameObjectToScene"
  fullName: "scene.Scene.addGameObjectToScene"
  package: "scene"
- uid: "scene.Scene.removeGameObjectFromScene*"
  name: "removeGameObjectFromScene"
  nameWithType: "Scene.removeGameObjectFromScene"
  fullName: "scene.Scene.removeGameObjectFromScene"
  package: "scene"
- uid: "graphics.renderer.Renderer"
  name: "Renderer"
  nameWithType: "Renderer"
  fullName: "graphics.renderer.Renderer"
- uid: "scene.Scene.registerRenderer*"
  name: "registerRenderer"
  nameWithType: "Scene.registerRenderer"
  fullName: "scene.Scene.registerRenderer"
  package: "scene"
- uid: "graphics.Camera"
  name: "Camera"
  nameWithType: "Camera"
  fullName: "graphics.Camera"
- uid: "scene.Scene.camera*"
  name: "camera"
  nameWithType: "Scene.camera"
  fullName: "scene.Scene.camera"
  package: "scene"
- uid: "scene.Scene.updateGameObjects*"
  name: "updateGameObjects"
  nameWithType: "Scene.updateGameObjects"
  fullName: "scene.Scene.updateGameObjects"
  package: "scene"
- uid: "scene.Scene.render*"
  name: "render"
  nameWithType: "Scene.render"
  fullName: "scene.Scene.render"
  package: "scene"
- uid: "scene.Scene.debugRender*"
  name: "debugRender"
  nameWithType: "Scene.debugRender"
  fullName: "scene.Scene.debugRender"
  package: "scene"
- uid: "scene.Scene.initRenderers*"
  name: "initRenderers"
  nameWithType: "Scene.initRenderers"
  fullName: "scene.Scene.initRenderers"
  package: "scene"
- uid: "ecs.Text"
  name: "Text"
  nameWithType: "Text"
  fullName: "ecs.Text"
- uid: "scene.Scene.addUiObject*"
  name: "addUiObject"
  nameWithType: "Scene.addUiObject"
  fullName: "scene.Scene.addUiObject"
  package: "scene"
- uid: "scene.Scene.textRender*"
  name: "textRender"
  nameWithType: "Scene.textRender"
  fullName: "scene.Scene.textRender"
  package: "scene"
- uid: "scene.Scene.updateUI*"
  name: "updateUI"
  nameWithType: "Scene.updateUI"
  fullName: "scene.Scene.updateUI"
  package: "scene"
- uid: "scene.Scene.addToRenderers*"
  name: "addToRenderers"
  nameWithType: "Scene.addToRenderers"
  fullName: "scene.Scene.addToRenderers"
  package: "scene"
- uid: "graphics.renderer.DefaultRenderer"
  name: "DefaultRenderer"
  nameWithType: "DefaultRenderer"
  fullName: "graphics.renderer.DefaultRenderer"
- uid: "graphics.renderer.LightmapRenderer"
  name: "LightmapRenderer"
  nameWithType: "LightmapRenderer"
  fullName: "graphics.renderer.LightmapRenderer"
- uid: "graphics.renderer.DebugRenderer"
  name: "DebugRenderer"
  nameWithType: "DebugRenderer"
  fullName: "graphics.renderer.DebugRenderer"
- uid: "graphics.renderer.TextRenderer"
  name: "TextRenderer"
  nameWithType: "TextRenderer"
  fullName: "graphics.renderer.TextRenderer"
- uid: "postprocess.ForwardToTexture"
  name: "ForwardToTexture"
  nameWithType: "ForwardToTexture"
  fullName: "postprocess.ForwardToTexture"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
- uid: "java.util.List"
  name: "List"
  nameWithType: "List"
  fullName: "java.util.List"
- uid: "physics.collision.Collider"
  name: "Collider"
  nameWithType: "Collider"
  fullName: "physics.collision.Collider"
