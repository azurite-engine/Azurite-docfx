### YamlMime:ManagedReference
items:
- uid: "util.debug.DebugPrimitive"
  id: "DebugPrimitive"
  parent: "util.debug"
  children:
  - "util.debug.DebugPrimitive.DebugPrimitive(util.debug.DebugLine[])"
  - "util.debug.DebugPrimitive.getLines()"
  - "util.debug.DebugPrimitive.lines"
  langs:
  - "java"
  name: "DebugPrimitive"
  nameWithType: "DebugPrimitive"
  fullName: "util.debug.DebugPrimitive"
  type: "Class"
  package: "util.debug"
  summary: "A Primitive that consists of a bunch of lines. These lines are rendered by the DebugRenderer"
  syntax:
    content: "public class DebugPrimitive"
  inheritance:
  - "java.lang.Object"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
- uid: "util.debug.DebugPrimitive.DebugPrimitive(util.debug.DebugLine[])"
  id: "DebugPrimitive(util.debug.DebugLine[])"
  parent: "util.debug.DebugPrimitive"
  langs:
  - "java"
  name: "DebugPrimitive(DebugLine[] lines)"
  nameWithType: "DebugPrimitive.DebugPrimitive(DebugLine[] lines)"
  fullName: "util.debug.DebugPrimitive.DebugPrimitive(DebugLine[] lines)"
  overload: "util.debug.DebugPrimitive.DebugPrimitive*"
  type: "Constructor"
  package: "util.debug"
  summary: "Create a primitive with the given lines"
  syntax:
    content: "public DebugPrimitive(DebugLine[] lines)"
    parameters:
    - id: "lines"
      type: "util.debug.DebugLine[]"
      description: "the lines making up the primitive"
- uid: "util.debug.DebugPrimitive.getLines()"
  id: "getLines()"
  parent: "util.debug.DebugPrimitive"
  langs:
  - "java"
  name: "getLines()"
  nameWithType: "DebugPrimitive.getLines()"
  fullName: "util.debug.DebugPrimitive.getLines()"
  overload: "util.debug.DebugPrimitive.getLines*"
  type: "Method"
  package: "util.debug"
  summary: "Get the lines making up the primitive"
  syntax:
    content: "public DebugLine[] getLines()"
    return:
      type: "util.debug.DebugLine[]"
- uid: "util.debug.DebugPrimitive.lines"
  id: "lines"
  parent: "util.debug.DebugPrimitive"
  langs:
  - "java"
  name: "lines"
  nameWithType: "DebugPrimitive.lines"
  fullName: "util.debug.DebugPrimitive.lines"
  type: "Field"
  package: "util.debug"
  summary: "The lines making up this primitive"
  syntax:
    content: "protected DebugLine[] lines"
    return:
      type: "util.debug.DebugLine[]"
references:
- uid: "util.debug.DebugLine[]"
  spec.java:
  - uid: "util.debug.DebugLine"
    name: "DebugLine"
    fullName: "util.debug.DebugLine"
  - name: "[]"
    fullName: "[]"
- uid: "util.debug.DebugPrimitive.DebugPrimitive*"
  name: "DebugPrimitive"
  nameWithType: "DebugPrimitive.DebugPrimitive"
  fullName: "util.debug.DebugPrimitive.DebugPrimitive"
  package: "util.debug"
- uid: "util.debug.DebugPrimitive.getLines*"
  name: "getLines"
  nameWithType: "DebugPrimitive.getLines"
  fullName: "util.debug.DebugPrimitive.getLines"
  package: "util.debug"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
