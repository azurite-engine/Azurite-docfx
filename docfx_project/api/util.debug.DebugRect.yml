### YamlMime:ManagedReference
items:
- uid: "util.debug.DebugRect"
  id: "DebugRect"
  parent: "util.debug"
  children:
  - "util.debug.DebugRect.DebugRect(float,float,float,float,graphics.Color)"
  - "util.debug.DebugRect.reset(float,float,float,float)"
  langs:
  - "java"
  name: "DebugRect"
  nameWithType: "DebugRect"
  fullName: "util.debug.DebugRect"
  type: "Class"
  package: "util.debug"
  summary: "A Rectangle Primitive for the Debug Renderer"
  syntax:
    content: "public class DebugRect extends DebugPrimitive"
  inheritance:
  - "java.lang.Object"
  - "util.debug.DebugPrimitive"
  inheritedMembers:
  - "java.lang.Object.clone()"
  - "java.lang.Object.equals(java.lang.Object)"
  - "java.lang.Object.finalize()"
  - "java.lang.Object.getClass()"
  - "java.lang.Object.hashCode()"
  - "java.lang.Object.notify()"
  - "java.lang.Object.notifyAll()"
  - "java.lang.Object.toString()"
  - "java.lang.Object.wait()"
  - "java.lang.Object.wait(long)"
  - "java.lang.Object.wait(long,int)"
  - "util.debug.DebugPrimitive.getLines()"
- uid: "util.debug.DebugRect.DebugRect(float,float,float,float,graphics.Color)"
  id: "DebugRect(float,float,float,float,graphics.Color)"
  parent: "util.debug.DebugRect"
  langs:
  - "java"
  name: "DebugRect(float x, float y, float width, float height, Color color)"
  nameWithType: "DebugRect.DebugRect(float x, float y, float width, float height, Color color)"
  fullName: "util.debug.DebugRect.DebugRect(float x, float y, float width, float height, Color color)"
  overload: "util.debug.DebugRect.DebugRect*"
  type: "Constructor"
  package: "util.debug"
  summary: "Constructs the Rectangle at given x, y location with width and height and specified color"
  syntax:
    content: "public DebugRect(float x, float y, float width, float height, Color color)"
    parameters:
    - id: "x"
      type: "float"
      description: "x position of the rect"
    - id: "y"
      type: "float"
      description: "y position of the rect"
    - id: "width"
      type: "float"
      description: "width of the rect"
    - id: "height"
      type: "float"
      description: "height of the rect"
    - id: "color"
      type: "graphics.Color"
      description: "color of the rect"
- uid: "util.debug.DebugRect.reset(float,float,float,float)"
  id: "reset(float,float,float,float)"
  parent: "util.debug.DebugRect"
  langs:
  - "java"
  name: "reset(float x, float y, float width, float height)"
  nameWithType: "DebugRect.reset(float x, float y, float width, float height)"
  fullName: "util.debug.DebugRect.reset(float x, float y, float width, float height)"
  overload: "util.debug.DebugRect.reset*"
  type: "Method"
  package: "util.debug"
  summary: "Recalculates start and end points of the lines"
  syntax:
    content: "public void reset(float x, float y, float width, float height)"
    parameters:
    - id: "x"
      type: "float"
      description: "x position of the rect"
    - id: "y"
      type: "float"
      description: "y position of the rect"
    - id: "width"
      type: "float"
      description: "width of the rect"
    - id: "height"
      type: "float"
      description: "height of the rect"
references:
- uid: "float"
  spec.java:
  - uid: "float"
    name: "float"
    fullName: "float"
- uid: "graphics.Color"
  name: "Color"
  nameWithType: "Color"
  fullName: "graphics.Color"
- uid: "util.debug.DebugRect.DebugRect*"
  name: "DebugRect"
  nameWithType: "DebugRect.DebugRect"
  fullName: "util.debug.DebugRect.DebugRect"
  package: "util.debug"
- uid: "util.debug.DebugRect.reset*"
  name: "reset"
  nameWithType: "DebugRect.reset"
  fullName: "util.debug.DebugRect.reset"
  package: "util.debug"
- uid: "util.debug.DebugPrimitive"
  name: "DebugPrimitive"
  nameWithType: "DebugPrimitive"
  fullName: "util.debug.DebugPrimitive"
- uid: "java.lang.Object.notify()"
  name: "Object.notify()"
  nameWithType: "Object.notify()"
  fullName: "java.lang.Object.notify()"
- uid: "java.lang.Object.wait()"
  name: "Object.wait()"
  nameWithType: "Object.wait()"
  fullName: "java.lang.Object.wait()"
- uid: "util.debug.DebugPrimitive.getLines()"
  name: "DebugPrimitive.getLines()"
  nameWithType: "DebugPrimitive.getLines()"
  fullName: "util.debug.DebugPrimitive.getLines()"
- uid: "java.lang.Object.finalize()"
  name: "Object.finalize()"
  nameWithType: "Object.finalize()"
  fullName: "java.lang.Object.finalize()"
- uid: "java.lang.Object.clone()"
  name: "Object.clone()"
  nameWithType: "Object.clone()"
  fullName: "java.lang.Object.clone()"
- uid: "java.lang.Object.notifyAll()"
  name: "Object.notifyAll()"
  nameWithType: "Object.notifyAll()"
  fullName: "java.lang.Object.notifyAll()"
- uid: "java.lang.Object.equals(java.lang.Object)"
  name: "Object.equals(Object)"
  nameWithType: "Object.equals(Object)"
  fullName: "java.lang.Object.equals(java.lang.Object)"
- uid: "java.lang.Object.getClass()"
  name: "Object.getClass()"
  nameWithType: "Object.getClass()"
  fullName: "java.lang.Object.getClass()"
- uid: "java.lang.Object.wait(long)"
  name: "Object.wait(long)"
  nameWithType: "Object.wait(long)"
  fullName: "java.lang.Object.wait(long)"
- uid: "java.lang.Object.hashCode()"
  name: "Object.hashCode()"
  nameWithType: "Object.hashCode()"
  fullName: "java.lang.Object.hashCode()"
- uid: "java.lang.Object.wait(long,int)"
  name: "Object.wait(long,int)"
  nameWithType: "Object.wait(long,int)"
  fullName: "java.lang.Object.wait(long,int)"
- uid: "java.lang.Object.toString()"
  name: "Object.toString()"
  nameWithType: "Object.toString()"
  fullName: "java.lang.Object.toString()"
