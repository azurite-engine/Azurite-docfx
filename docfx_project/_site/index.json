{
  "api/ai.path.html": {
    "href": "api/ai.path.html",
    "title": "Namespace ai.path",
    "keywords": "Namespace ai.path Classes Node<Position> A Node describes a single node of a finite graph and does knows all paths to its neighbors. It is a container for any external position data for using in a Map for a pathfinding algorithm. Pathfinding This class contains currently 2 pathfinding methods: - a-star (A*) - dijkstra Interfaces Map<Position> A Map describes the complete state of a finite graph and offers a start and target node to be processed by a pathfinding algorithm. Path<Position> Describes a path from one node to another with a fixed path cost value. This path is considered a direct path for the pathfinding algorithm. ResultPath<Position> The result of a pathfinding algorithm containing a full path from start to target."
  },
  "api/ai.path.Map.html": {
    "href": "api/ai.path.Map.html",
    "title": "Interface Map<Position>",
    "keywords": "Interface Map<Position> A Map describes the complete state of a finite graph and offers a start and target node to be processed by a pathfinding algorithm. Namespace : Assembly : .dll Syntax public interface Map<Position> Type Parameters Name Description Position Methods start() The start node for the pathfinding algorithm Declaration public abstract Node<Position> start() Returns Type Description Node < Position > the start node target() The target node for the pathfinding algorithm Declaration public abstract Node<Position> target() Returns Type Description Node < Position > the target node"
  },
  "api/ai.path.Node.html": {
    "href": "api/ai.path.Node.html",
    "title": "Class Node<Position>",
    "keywords": "Class Node<Position> A Node describes a single node of a finite graph and does knows all paths to its neighbors. It is a container for any external position data for using in a Map for a pathfinding algorithm. Inheritance java.lang.Object Node<Position> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class Node<Position> Type Parameters Name Description Position Constructors Node() Declaration public Node() Methods getMarker() Declaration public final Node.Marker<Position> getMarker() Returns Type Description ai.path.Node.Marker < Position > hasMarker() Declaration public final boolean hasMarker() Returns Type Description boolean paths() All paths starting at this node. Declaration public abstract List<Path<Position>> paths() Returns Type Description java.util.List < Path < Position >> all paths starting at this node position() The external position data contained in this node. The exact value of this method is ignored by the pathfinding algorithms, but may be used to calculate relationship data between nodes using an external algorithm. Declaration public abstract Position position() Returns Type Description Position the position data chosen for this node setMarker(Node.Marker<Position> marker) Declaration public final void setMarker(Node.Marker<Position> marker) Parameters Type Name Description ai.path.Node.Marker < Position > marker"
  },
  "api/ai.path.Path.html": {
    "href": "api/ai.path.Path.html",
    "title": "Interface Path<Position>",
    "keywords": "Interface Path<Position> Describes a path from one node to another with a fixed path cost value. This path is considered a direct path for the pathfinding algorithm. Namespace : Assembly : .dll Syntax public interface Path<Position> Type Parameters Name Description Position Methods cost() The costs to take this path. An artificial value to order multiple paths by costs and to find a the path with the lowest cost which is considered the shortest. Declaration public abstract float cost() Returns Type Description float the cost to take this path end() The node where the path ends. Declaration public abstract Node<Position> end() Returns Type Description Node < Position > the ending node start() The node where the path starts. Declaration public abstract Node<Position> start() Returns Type Description Node < Position > the starting node"
  },
  "api/ai.path.Pathfinding.html": {
    "href": "api/ai.path.Pathfinding.html",
    "title": "Class Pathfinding",
    "keywords": "Class Pathfinding This class contains currently 2 pathfinding methods: - a-star (A*) - dijkstra Inheritance java.lang.Object Pathfinding Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Pathfinding Constructors Pathfinding() Declaration public Pathfinding() Methods <Position>astar(Map<Position> map, BiFunction<Position,Position,Float> hCost) A fully modifiable version of the A* (a-star) algorithm. It uses a finite possibly directional weighted graph structure to find the shortest possible path from a given start node to a given target node. This method will not check every possible path, so if the weights are not equally distributed, it may lead to results, that are not the best solution to the problem. Declaration public static Optional<ResultPath<Position>> <Position>astar(Map<Position> map, BiFunction<Position,Position,Float> hCost) Parameters Type Name Description Map < Position > map a map containing a graph of weighted node references java.util.function.BiFunction < Position , Position , java.lang.Float > hCost the hCost algorithm which should make a guess about how far posA is away from posB. It is required, that the calculation never results in a value less than 0 and it is preferred to be exactly 0 if both positions are identical. If possible, it is usually a good approach to measure the distance between both positions or a value that is proportional to that distance. Returns Type Description java.util.Optional < ResultPath < Position >> an optional containing the found path if there is one <Position>dijkstra(Map<Position> map) A flexible implementation of the dijkstra pathfinding algorithm. It uses a finite possibly directional weighted graph structure to find the shortest possible path from a given start node to a given target node. This method will find the global shortest possible path, if there is one, but it might be less efficient for large graphs compared to A* (a-star). Declaration public static Optional<ResultPath<Position>> <Position>dijkstra(Map<Position> map) Parameters Type Name Description Map < Position > map a map containing a graph of weighted node references Returns Type Description java.util.Optional < ResultPath < Position >> an optional containing the shortest path if there is one"
  },
  "api/ai.path.ResultPath.html": {
    "href": "api/ai.path.ResultPath.html",
    "title": "Interface ResultPath<Position>",
    "keywords": "Interface ResultPath<Position> The result of a pathfinding algorithm containing a full path from start to target. Namespace : Assembly : .dll Syntax public interface ResultPath<Position> Type Parameters Name Description Position Methods fullPath() The full path containing all nodes in order from start to target. This may include start and target as well. Declaration public abstract List<Node<Position>> fullPath() Returns Type Description java.util.List < Node < Position >> the full path start() The start of the found path. Declaration public abstract Node<Position> start() Returns Type Description Node < Position > the starting node target() The target of the found path Declaration public abstract Node<Position> target() Returns Type Description Node < Position > the target node"
  },
  "api/ai.path.vector2f.html": {
    "href": "api/ai.path.vector2f.html",
    "title": "Namespace ai.path.vector2f",
    "keywords": "Namespace ai.path.vector2f Classes Vector2fMap Vector2fNode Vector2fPath"
  },
  "api/ai.path.vector2f.Vector2fMap.html": {
    "href": "api/ai.path.vector2f.Vector2fMap.html",
    "title": "Class Vector2fMap",
    "keywords": "Class Vector2fMap Inheritance java.lang.Object Vector2fMap Implements ai.path.Map<org.joml.Vector2f> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Vector2fMap implements Map<Vector2f> Constructors Vector2fMap(Node<Vector2f> start, Node<Vector2f> target) Declaration public Vector2fMap(Node<Vector2f> start, Node<Vector2f> target) Parameters Type Name Description Node < org.joml.Vector2f > start Node < org.joml.Vector2f > target Methods start() The start node for the pathfinding algorithm Declaration public Node<Vector2f> start() Returns Type Description Node < org.joml.Vector2f > target() The target node for the pathfinding algorithm Declaration public Node<Vector2f> target() Returns Type Description Node < org.joml.Vector2f > Implements ai.path.Map<org.joml.Vector2f>"
  },
  "api/ai.path.vector2f.Vector2fNode.html": {
    "href": "api/ai.path.vector2f.Vector2fNode.html",
    "title": "Class Vector2fNode",
    "keywords": "Class Vector2fNode Inheritance java.lang.Object Node Vector2fNode Inherited Members Node.getMarker() Node.hasMarker() Node.paths() Node.position() Node.setMarker(Node.Marker<Position>) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Vector2fNode extends Node<Vector2f> Constructors Vector2fNode(Vector2f position) Declaration public Vector2fNode(Vector2f position) Parameters Type Name Description org.joml.Vector2f position Methods addPathTo(Vector2fNode node, float cost, boolean bidirectional) Declaration public void addPathTo(Vector2fNode node, float cost, boolean bidirectional) Parameters Type Name Description node float cost boolean bidirectional paths() All paths starting at this node. Declaration public List<Path<Vector2f>> paths() Returns Type Description java.util.List < Path < org.joml.Vector2f >> Overrides Node<Position>.paths() position() The external position data contained in this node. The exact value of this method is ignored by the pathfinding algorithms, but may be used to calculate relationship data between nodes using an external algorithm. Declaration public Vector2f position() Returns Type Description org.joml.Vector2f Overrides Node<Position>.position()"
  },
  "api/ai.path.vector2f.Vector2fPath.html": {
    "href": "api/ai.path.vector2f.Vector2fPath.html",
    "title": "Class Vector2fPath",
    "keywords": "Class Vector2fPath Inheritance java.lang.Object Vector2fPath Implements ai.path.Path<org.joml.Vector2f> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Vector2fPath implements Path<Vector2f> Constructors Vector2fPath(Node<Vector2f> start, Node<Vector2f> end, float cost) Declaration public Vector2fPath(Node<Vector2f> start, Node<Vector2f> end, float cost) Parameters Type Name Description Node < org.joml.Vector2f > start Node < org.joml.Vector2f > end float cost Methods cost() The costs to take this path. An artificial value to order multiple paths by costs and to find a the path with the lowest cost which is considered the shortest. Declaration public float cost() Returns Type Description float end() The node where the path ends. Declaration public Node<Vector2f> end() Returns Type Description Node < org.joml.Vector2f > start() The node where the path starts. Declaration public Node<Vector2f> start() Returns Type Description Node < org.joml.Vector2f > Implements ai.path.Path<org.joml.Vector2f>"
  },
  "api/ai.statemachine.html": {
    "href": "api/ai.statemachine.html",
    "title": "Namespace ai.statemachine",
    "keywords": "Namespace ai.statemachine Classes StateMachine A flexible implementation of a statemachine. This class can represent a deterministic or non-deterministic statemachine, however the actual transitions will never be random, therefore all statemachines are predictable in their transitions. It involves an unlimited number of states and transitions between them, which can be automated by adding conditions to them. Interfaces State Defines a state inside a StateMachine and can basically do anything inside its boundaries."
  },
  "api/ai.statemachine.State.html": {
    "href": "api/ai.statemachine.State.html",
    "title": "Interface State",
    "keywords": "Interface State Defines a state inside a StateMachine and can basically do anything inside its boundaries. Namespace : Assembly : .dll Syntax public interface State Methods enterState() Called if the current state gets transitioned to. Declaration public abstract void enterState() exitState() Called if the current state transitioned to another. Call happens before update loop call and before the next states #enterState() Declaration public abstract void exitState() updateState(float dt) Update loop call from the object using the StateMachine Declaration public abstract void updateState(float dt) Parameters Type Name Description float dt the delta time value"
  },
  "api/ai.statemachine.StateMachine.html": {
    "href": "api/ai.statemachine.StateMachine.html",
    "title": "Class StateMachine",
    "keywords": "Class StateMachine A flexible implementation of a statemachine. This class can represent a deterministic or non-deterministic statemachine, however the actual transitions will never be random, therefore all statemachines are predictable in their transitions. It involves an unlimited number of states and transitions between them, which can be automated by adding conditions to them. Inheritance java.lang.Object StateMachine Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class StateMachine Constructors StateMachine() Create a statemachine with no states or transitions. Declaration public StateMachine() Methods addState(String name, State state) Adds a new state to the machine. Declaration public boolean addState(String name, State state) Parameters Type Name Description java.lang.String name the name of the new state State state the new state Returns Type Description boolean false if the state could not be added or a state with identical name already existed addTransition(String fromState, String toState, Function<State,Boolean> condition) Add a new transition. Declaration public boolean addTransition(String fromState, String toState, Function<State,Boolean> condition) Parameters Type Name Description java.lang.String fromState java.lang.String toState java.util.function.Function < State , java.lang.Boolean > condition Returns Type Description boolean false, if the states are unknown canTransitionTo(String state) Check if there is any known state that can transition to the given state. Declaration public boolean canTransitionTo(String state) Parameters Type Name Description java.lang.String state the name of the state to potentially transition to Returns Type Description boolean true if and only if there is any state that has a transition to the given one doTransition(String toState) Attempts to transition to the given state. Declaration public boolean doTransition(String toState) Parameters Type Name Description java.lang.String toState the state to transition to Returns Type Description boolean false, if and only if the given stte is unknown or null getCurrentState() Declaration public State getCurrentState() Returns Type Description State the current State of the machine getCurrentStateName() Declaration public String getCurrentStateName() Returns Type Description java.lang.String hasState(String name) Check if a state is known by its name. Declaration public boolean hasState(String name) Parameters Type Name Description java.lang.String name the name of the state Returns Type Description boolean true if and only if there is a state by this name hasTransition(String state) Check if there is any known transition outgoing from the given state. Declaration public boolean hasTransition(String state) Parameters Type Name Description java.lang.String state the name of the state to transition from Returns Type Description boolean true if and only if there is any transition starting at the given state hasTransition(String fromState, String toState) Check if there is transition from a given state to a given state by their names. Declaration public boolean hasTransition(String fromState, String toState) Parameters Type Name Description java.lang.String fromState the name of the state to start java.lang.String toState the name of the state to potentially transition to Returns Type Description boolean true if and only if there is at least one know transition startMachine(String startState) Attempts to start the state machine. This is required to set the starting/current state of the machine and enable the update loop. The method #doTransition(String) will fail as well, before this method is called. Declaration public boolean startMachine(String startState) Parameters Type Name Description java.lang.String startState the state to start from Returns Type Description boolean false, if the the statemachine could not be started, because startState is null startState is not known to the machine currentState is already not null, so machine already started update(float dt) Update loop method. Will do nothing, if the machine is not started. Declaration public void update(float dt) Parameters Type Name Description float dt the delta time validate() Validate whether the state machine does not contain unreachable or deadlock states. Declaration public boolean validate() Returns Type Description boolean false if and only if there are states, that do not transition or are orphaned"
  },
  "api/audio.AudioBuffer.html": {
    "href": "api/audio.AudioBuffer.html",
    "title": "Class AudioBuffer",
    "keywords": "Class AudioBuffer Instantiations of this class hold all information about how a sound should be replayed and the sound data itself (if you know OpenGL, think of this as a massive vbo containing a single noise or piece of music). Personally I don't really like how it works right now; it allocates a lot of memory for every sound file that needs to be played; maybe we can have a destructor or some kind of cleanup daemon? I based the design off of an article by Michael Eric Oberlin found here . Inheritance java.lang.Object AudioBuffer Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class AudioBuffer Constructors AudioBuffer(String path) Declaration public AudioBuffer(String path) Parameters Type Name Description java.lang.String path Methods getALBuffers() Declaration public int[] getALBuffers() Returns Type Description int [] getAudioData() Declaration public byte[] getAudioData() Returns Type Description byte [] getFormat() Declaration public int getFormat() Returns Type Description int getSampleRate() Declaration public float getSampleRate() Returns Type Description float getTime() Declaration public long getTime() Returns Type Description long"
  },
  "api/audio.AudioListener.html": {
    "href": "api/audio.AudioListener.html",
    "title": "Class AudioListener",
    "keywords": "Class AudioListener This is where the \"ear\" is located. There can only ever be one Listener, hence the singleton. Inheritance java.lang.Object Component AudioListener Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class AudioListener extends Component Methods get() Declaration public static synchronized AudioListener get() Returns Type Description start() Called once on Component initialization. Declaration public void start() Overrides Component.start() update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Overrides Component.update(float dt)"
  },
  "api/audio.AudioMaster.html": {
    "href": "api/audio.AudioMaster.html",
    "title": "Class AudioMaster",
    "keywords": "Class AudioMaster Main audio center: equivocal to graphics.Window but for initializing audio stuff, like toggling and changing some parameters in the OpenAL API Inheritance java.lang.Object AudioMaster Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class AudioMaster Methods addSource(AudioSource s) Declaration public void addSource(AudioSource s) Parameters Type Name Description AudioSource s alGetError() Declaration public static void alGetError() clean() Declaration public void clean() get() Declaration public static synchronized AudioMaster get() Returns Type Description"
  },
  "api/audio.AudioSource.html": {
    "href": "api/audio.AudioSource.html",
    "title": "Class AudioSource",
    "keywords": "Class AudioSource Object representing a sound's source as well as it's velocity (for applying the doppler effect). Inheritance java.lang.Object Component AudioSource Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class AudioSource extends Component Constructors AudioSource() Declaration public AudioSource() AudioSource(AudioBuffer buffer) Declaration public AudioSource(AudioBuffer buffer) Parameters Type Name Description AudioBuffer buffer AudioSource(String[] sources) Declaration public AudioSource(String[] sources) Parameters Type Name Description java.lang.String [] sources Fields audioBuffers List of audio buffers this source can play. Declaration public List<AudioBuffer> audioBuffers Field Value Type Description java.util.List < AudioBuffer > Methods getSelectedBuffer() Declaration public AudioBuffer getSelectedBuffer() Returns Type Description AudioBuffer isLooping() Declaration public boolean isLooping() Returns Type Description boolean isPlaying() Declaration public boolean isPlaying() Returns Type Description boolean play(int index, boolean isLooping) Sets the selected buffer to whatever the index indicates, then plays all of this buffer. Declaration public void play(int index, boolean isLooping) Parameters Type Name Description int index boolean isLooping setLooping(boolean looping) Declaration public void setLooping(boolean looping) Parameters Type Name Description boolean looping start() Called once on Component initialization. Declaration public void start() Overrides Component.start() stop() Declaration public void stop() update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Overrides Component.update(float dt)"
  },
  "api/audio.html": {
    "href": "api/audio.html",
    "title": "Namespace audio",
    "keywords": "Namespace audio Classes AudioBuffer Instantiations of this class hold all information about how a sound should be replayed and the sound data itself (if you know OpenGL, think of this as a massive vbo containing a single noise or piece of music). Personally I don't really like how it works right now; it allocates a lot of memory for every sound file that needs to be played; maybe we can have a destructor or some kind of cleanup daemon? I based the design off of an article by Michael Eric Oberlin found here . AudioListener This is where the \"ear\" is located. There can only ever be one Listener, hence the singleton. AudioMaster Main audio center: equivocal to graphics.Window but for initializing audio stuff, like toggling and changing some parameters in the OpenAL API AudioSource Object representing a sound's source as well as it's velocity (for applying the doppler effect)."
  },
  "api/ecs.CharacterController.html": {
    "href": "api/ecs.CharacterController.html",
    "title": "Class CharacterController",
    "keywords": "Class CharacterController Character controllers built to support the Top down and Side scroller Demo scenes. Inheritance java.lang.Object Component CharacterController Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class CharacterController extends Component Methods getPlayerInputForce() Declaration public Force getPlayerInputForce() Returns Type Description Force getSpeedModifier() Declaration public float getSpeedModifier() Returns Type Description float standardPlatformer(Dynamics dynamics, float speedModifier) Declaration public static CharacterController standardPlatformer(Dynamics dynamics, float speedModifier) Parameters Type Name Description Dynamics dynamics float speedModifier Returns Type Description standardTopDown(Dynamics dynamics, float speedModifier) Declaration public static CharacterController standardTopDown(Dynamics dynamics, float speedModifier) Parameters Type Name Description Dynamics dynamics float speedModifier Returns Type Description"
  },
  "api/ecs.CollisionHandler.html": {
    "href": "api/ecs.CollisionHandler.html",
    "title": "Class CollisionHandler",
    "keywords": "Class CollisionHandler A component to handle and react to collisions using a collider. Can be attached to an object if it should react to collisions in any way. Inheritance java.lang.Object Component CollisionHandler Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class CollisionHandler extends Component Constructors CollisionHandler(Collider collider) Declaration public CollisionHandler(Collider collider) Parameters Type Name Description Collider collider Methods collision(Collider environment, CollisionInformation collisionInformation) Will be called in the update loop if a collision happens CollisionInformation#collision() with the given environment collider and the defined one of this handler {@link this#getCollider()}. Declaration public abstract void collision(Collider environment, CollisionInformation collisionInformation) Parameters Type Name Description Collider environment the other collider in the environment CollisionInformation collisionInformation the data about the collision getCollider() Declaration protected Collider getCollider() Returns Type Description Collider start() Called once on Component initialization. Declaration public void start() Overrides Component.start() update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Overrides Component.update(float dt)"
  },
  "api/ecs.CollisionHandlers.html": {
    "href": "api/ecs.CollisionHandlers.html",
    "title": "Class CollisionHandlers",
    "keywords": "Class CollisionHandlers Inheritance java.lang.Object CollisionHandlers Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class CollisionHandlers Constructors CollisionHandlers() Declaration public CollisionHandlers() Methods unpassablePolygonCollider(PolygonCollider collider) A CollisionHandler for a PolygonCollider that should not pass through other colliders. Can be thought of as making the collider a solid object. Declaration public static CollisionHandler unpassablePolygonCollider(PolygonCollider collider) Parameters Type Name Description PolygonCollider collider the collider to attach the handler to Returns Type Description CollisionHandler the CollisionHandler to be attached to the gameObject holding the collider"
  },
  "api/ecs.Component.ComponentOrder.html": {
    "href": "api/ecs.Component.ComponentOrder.html",
    "title": "Enum Component.ComponentOrder",
    "keywords": "Enum Component.ComponentOrder Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum Component.ComponentOrder extends Enum<Component.ComponentOrder> Fields Name Description COLLISION DRAW INPUT POST_DRAW POST_TRANSFORM PRE_CALC TRANSFORM Methods Name Description valueOf(String name) values()"
  },
  "api/ecs.Component.html": {
    "href": "api/ecs.Component.html",
    "title": "Class Component",
    "keywords": "Class Component Abstract structure for ECS Components. It is highly recommended to use this when implementing any system that can/should be applied to a GameObject. Inheritance java.lang.Object Component Implements java.lang.Comparable<ecs.Component> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class Component implements Comparable<Component> Constructors Component() Declaration public Component() Component(Component.ComponentOrder order) Declaration public Component(Component.ComponentOrder order) Parameters Type Name Description Component.ComponentOrder order Fields gameObject Parent GameObject Declaration public GameObject gameObject Field Value Type Description GameObject Methods compareTo(Component o) Declaration public int compareTo(Component o) Parameters Type Name Description o Returns Type Description int debug() Get an array of debug lines to be rendered in debug mode Declaration public DebugPrimitive[] debug() Returns Type Description DebugPrimitive [] an array of lines to be rendered in debug mode position() Shortcut to get the current position of the parent gameobject. Declaration protected Vector2f position() Returns Type Description org.joml.Vector2f the current position of the parent gameobject remove() Called when component is removed from GameObject. Declaration public void remove() setPosition(Vector2f position) Shortcut to overwrite the current position of the parent gameobject. Declaration protected void setPosition(Vector2f position) Parameters Type Name Description org.joml.Vector2f position start() Called once on Component initialization. Declaration public void start() update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Engine.deltaTime Implements java.lang.Comparable<ecs.Component>"
  },
  "api/ecs.Dynamics.html": {
    "href": "api/ecs.Dynamics.html",
    "title": "Class Dynamics",
    "keywords": "Class Dynamics The Dynamics manage movement of a GameObject . Inheritance java.lang.Object Component Dynamics Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Dynamics extends Component Constructors Dynamics() Declaration public Dynamics() Fields DEFAULT_FORCE_CAPACITY Declaration public static final int DEFAULT_FORCE_CAPACITY Field Value Type Description int Methods applyForce(Force force) Applies another force to the physical entity that will be added to the physical entities effective force. Declaration public final void applyForce(Force force) Parameters Type Name Description Force force a new force effecting this entity removeForce(String identifier) Removes all forces matching a given identifier. They will no longer effect the force of the entity. Declaration public final boolean removeForce(String identifier) Parameters Type Name Description java.lang.String identifier the identifier to find all matching forces Returns Type Description boolean true if any force got removed update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Overrides Component.update(float dt) velocity() The current directional velocity of the physical entity. Declaration public final Vector2f velocity() Returns Type Description org.joml.Vector2f the current directional velocity"
  },
  "api/ecs.GameObject.html": {
    "href": "api/ecs.GameObject.html",
    "title": "Class GameObject",
    "keywords": "Class GameObject A GameObject is the root of the Entity Component system used to store all entities in Azurite games. Each GameObject can contain any of a number of available components including spriteRenderers and lights. By default, each GameObject contains a Transform, which holds the X and Y position, and width and height of the object in pixels. Inheritance java.lang.Object GameObject Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class GameObject Constructors GameObject(String name, int zIndex) Declaration public GameObject(String name, int zIndex) Parameters Type Name Description java.lang.String name int zIndex GameObject(String name, List<Component> componentList, Vector2f position, int zIndex) Creates a new GameObject. Declaration public GameObject(String name, List<Component> componentList, Vector2f position, int zIndex) Parameters Type Name Description java.lang.String name java.util.List < Component > componentList org.joml.Vector2f position int zIndex GameObject(String name, Vector2f position, int zIndex) Declaration public GameObject(String name, Vector2f position, int zIndex) Parameters Type Name Description java.lang.String name org.joml.Vector2f position int zIndex GameObject(Vector2f position) Declaration public GameObject(Vector2f position) Parameters Type Name Description org.joml.Vector2f position GameObject(Vector2f position, int zIndex) Declaration public GameObject(Vector2f position, int zIndex) Parameters Type Name Description org.joml.Vector2f position int zIndex GameObject(Scene scene, String name, Vector2f position, int zIndex) Creates a new GameObject. Declaration public GameObject(Scene scene, String name, Vector2f position, int zIndex) Parameters Type Name Description Scene scene the scene to add the GameObject to. By default, GameObjects are added to the currentScene. java.lang.String name name of the GameObject org.joml.Vector2f position int zIndex Fields DEFAULT_GAMEOBJECT_NAME Declaration public static final String DEFAULT_GAMEOBJECT_NAME Field Value Type Description java.lang.String DEFAULT_Z_INDEX Declaration public static final int DEFAULT_Z_INDEX Field Value Type Description int Methods <T>getComponent(Class<T> componentClass) Takes a parameter of a class that extends component and returns it if it is contained in the GameObject's list of components. Declaration public T <T>getComponent(Class<T> componentClass) Parameters Type Name Description java.lang.Class < T > componentClass of component (ie. \"SpriteRenderer.class\") Returns Type Description T Component of type passed as param is contained in GameObject <T>getComponents(Class<T> componentClass) Takes a parameter of a class that extends component and returns it if it is contained in the GameObject's list of components. Declaration public List<T> <T>getComponents(Class<T> componentClass) Parameters Type Name Description java.lang.Class < T > componentClass of component (ie. \"SpriteRenderer.class\") Returns Type Description java.util.List < T > all components of type passed as param is contained in GameObject <T>removeComponent(Class<T> componentClass) Takes a parameter of a class that extends component and removed it from the GameObject if it is contained in the list of components. Declaration public void <T>removeComponent(Class<T> componentClass) Parameters Type Name Description java.lang.Class < T > componentClass of component (ie. \"SpriteRenderer.class\") addComponent(Component c) Adds a new component to the GameObject's list. Declaration public GameObject addComponent(Component c) Parameters Type Name Description Component c the new component Returns Type Description the gameobject itself getComponents() Declaration public List<Component> getComponents() Returns Type Description java.util.List < Component > List of Components in GameObject getParentScene() Declaration public Scene getParentScene() Returns Type Description Scene the parent scene of this gameObject getPositionData() Declaration public float[] getPositionData() Returns Type Description float [] getReadOnlyPosition() Declaration public Vector2f getReadOnlyPosition() Returns Type Description org.joml.Vector2f getUniqueId() Declaration public long getUniqueId() Returns Type Description long the universal and unique id among all objects name() Declaration public String name() Returns Type Description java.lang.String setZIndex(int z) Declaration public void setZIndex(int z) Parameters Type Name Description int z start() Called once on gameObject creation, also starts any components that are passed to the constructor. Declaration public void start() update(float dt) Called once every frame for each GameObject, calls the update method for each component it contains Declaration public void update(float dt) Parameters Type Name Description float dt zIndex() Declaration public int zIndex() Returns Type Description int"
  },
  "api/ecs.html": {
    "href": "api/ecs.html",
    "title": "Namespace ecs",
    "keywords": "Namespace ecs Classes CharacterController Character controllers built to support the Top down and Side scroller Demo scenes. CollisionHandler A component to handle and react to collisions using a collider. Can be attached to an object if it should react to collisions in any way. CollisionHandlers Component Abstract structure for ECS Components. It is highly recommended to use this when implementing any system that can/should be applied to a GameObject. Dynamics The Dynamics manage movement of a GameObject . GameObject A GameObject is the root of the Entity Component system used to store all entities in Azurite games. Each GameObject can contain any of a number of available components including spriteRenderers and lights. By default, each GameObject contains a Transform, which holds the X and Y position, and width and height of the object in pixels. PointLight A Point Light Component is essentially a location in the world that emits light in all directions. One can also specify both it's color and it's intensity. PolygonCollider A polygon collider for a GameObject . Collision detection uses GJK in MathUtils#gjksmCollision(PrimitiveShape, PrimitiveShape) . Must not be mixed with other colliders. SpriteAnimation SpriteRenderer SpriteRenderer is a component that can be added to a GameObject. it can contain a solid color, a semi-transparent color, or a texture. Sprites can be tinted by the color value. Tween This class provides Tweening with easing in and out for smooth movement from point to point. Great for moving platforms or moving AI to exact spot for desired time. Also great for changing values of any property really... including colors and size Enums Component.ComponentOrder Tween.TweenMode"
  },
  "api/ecs.PointLight.html": {
    "href": "api/ecs.PointLight.html",
    "title": "Class PointLight",
    "keywords": "Class PointLight A Point Light Component is essentially a location in the world that emits light in all directions. One can also specify both it's color and it's intensity. Inheritance java.lang.Object Component PointLight Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class PointLight extends Component Constructors PointLight(float intensity) Constructor which sets color of the light by default to white. Declaration public PointLight(float intensity) Parameters Type Name Description float intensity float: Intensity of the light PointLight(Color color, float intensity) Declaration public PointLight(Color color, float intensity) Parameters Type Name Description Color color Vector3f: Color of the light float intensity float: Intensity of the light Fields color Colour of the light Declaration public Vector3f color Field Value Type Description org.joml.Vector3f intensity Intensity of the light It controls how far the light's attenuation will reach Declaration public float intensity Field Value Type Description float Methods start() Called once on Component initialization. Declaration public void start() Overrides Component.start() update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Overrides Component.update(float dt)"
  },
  "api/ecs.PolygonCollider.html": {
    "href": "api/ecs.PolygonCollider.html",
    "title": "Class PolygonCollider",
    "keywords": "Class PolygonCollider A polygon collider for a GameObject . Collision detection uses GJK in MathUtils#gjksmCollision(PrimitiveShape, PrimitiveShape) . Must not be mixed with other colliders. Inheritance java.lang.Object Component PolygonCollider Implements Collider Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class PolygonCollider extends Component implements Collider Constructors PolygonCollider(PrimitiveShape shape) Declaration public PolygonCollider(PrimitiveShape shape) Parameters Type Name Description PrimitiveShape shape PolygonCollider(PrimitiveShape shape, boolean passive) Declaration public PolygonCollider(PrimitiveShape shape, boolean passive) Parameters Type Name Description PrimitiveShape shape boolean passive Methods addTag(String tag) Adds a tag to this collider, making it a tagged collider if it isnt already one. Declaration public void addTag(String tag) Parameters Type Name Description java.lang.String tag canCollideWith(Collider other) Determines whether a collider could potentially intersect with another collider ONLY by their collision layers. This method can be considered part of the broad phase of collision detection. Declaration public boolean canCollideWith(Collider other) Parameters Type Name Description Collider other Returns Type Description boolean detectCollision(Collider collider) Determines whether a collider intersects with another collider IGNORING the collision layers. Declaration public CollisionInformation detectCollision(Collider collider) Parameters Type Name Description Collider collider Returns Type Description CollisionInformation getShape() The shape of the collider. Declaration public PrimitiveShape getShape() Returns Type Description PrimitiveShape hasMask(int layer) Determines whether a collision mask for a specified layer is enabled. Declaration public boolean hasMask(int layer) Parameters Type Name Description int layer Returns Type Description boolean hasTags() Defines whether a collider is a tagged or an untagged collider. Declaration public boolean hasTags() Returns Type Description boolean isOnLayer(int layer) Determines whether the collider exists in a specified layer. Declaration public boolean isOnLayer(int layer) Parameters Type Name Description int layer Returns Type Description boolean layer(int[] layers) Sets multiple layers at once for handy usage. Declaration public PolygonCollider layer(int[] layers) Parameters Type Name Description int [] layers all layers that should be set. Returns Type Description the collider itself, to chain the call. layers() A short containing all enabled layers encoded as bit mask. Should be usable to compare different masks with each other to check for intersection. Declaration public short layers() Returns Type Description short mask() A short containing all enabled masks encoded as bit mask. Should be usable to compare different masks with each other to check for intersection. Declaration public short mask() Returns Type Description short mask(int[] masks) Sets multiple masks at once for handy usage. Declaration public PolygonCollider mask(int[] masks) Parameters Type Name Description int [] masks all layers that should be set. Returns Type Description the collider itself, to chain the call. matchTags(Collider collider) Checks for matching tags with another collider. There are 3 different rules for tag matching: - a collider without tags can only collide with a collider without tags (ignoring tags and only using layers) - a collider without tags can never collide with a tagged collider - a tagged collider can only collide with another tagged object, if there is any intersection comparing both sets of tags Declaration public boolean matchTags(Collider collider) Parameters Type Name Description Collider collider Returns Type Description boolean passive() Defines the behaviour of this collider. A passive collider will never get checked against others colliders, however any collider might get checked against it. Declaration public boolean passive() Returns Type Description boolean removeTag(String tag) Removes a tag to this collider. If the last tag got removed, this collider becomes an untagged collider. Declaration public void removeTag(String tag) Parameters Type Name Description java.lang.String tag setLayer(int layer, boolean active) Change the colliders presence in a specified layer. Making a collider present in a specified layer will it enable to collide with all collider including the specified layer in their collision mask. Declaration public void setLayer(int layer, boolean active) Parameters Type Name Description int layer boolean active setMask(int layer, boolean active) Changes the collision mask entry for a specified layer. Enabling the mask for layer n will allow this collider to collide with any other collider set in the target layer n vise versa. Declaration public void setMask(int layer, boolean active) Parameters Type Name Description int layer boolean active setShape(PrimitiveShape shape) Overwrite the shape of the collider. Use with caution. Declaration public void setShape(PrimitiveShape shape) Parameters Type Name Description PrimitiveShape shape the new shape. start() Called once on Component initialization. Declaration public void start() Overrides Component.start() tags() All tags assigned to this collider. Declaration public Set<String> tags() Returns Type Description java.util.Set < java.lang.String > update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Overrides Component.update(float dt) Implements Collider"
  },
  "api/ecs.SpriteAnimation.html": {
    "href": "api/ecs.SpriteAnimation.html",
    "title": "Class SpriteAnimation",
    "keywords": "Class SpriteAnimation Inheritance java.lang.Object Component SpriteAnimation Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class SpriteAnimation extends Component Constructors SpriteAnimation(SpriteRenderer renderer, Sprite baseImage, float timePerSprite) Declaration public SpriteAnimation(SpriteRenderer renderer, Sprite baseImage, float timePerSprite) Parameters Type Name Description SpriteRenderer renderer Sprite baseImage float timePerSprite Methods nextAnimation(String nextAnimation, int nextRepetitions) Declaration public void nextAnimation(String nextAnimation, int nextRepetitions) Parameters Type Name Description java.lang.String nextAnimation int nextRepetitions setAnimation(String name, List<Sprite> sprites) Declaration public void setAnimation(String name, List<Sprite> sprites) Parameters Type Name Description java.lang.String name java.util.List < Sprite > sprites setAnimationEndEvent(Consumer<String> animationEndEvent) Declaration public void setAnimationEndEvent(Consumer<String> animationEndEvent) Parameters Type Name Description java.util.function.Consumer < java.lang.String > animationEndEvent setBaseImage(Sprite baseImage) Declaration public void setBaseImage(Sprite baseImage) Parameters Type Name Description Sprite baseImage setCurrentRepetition(int currentRepetition) Declaration public void setCurrentRepetition(int currentRepetition) Parameters Type Name Description int currentRepetition setTimePerSprite(float timePerSprite) Declaration public void setTimePerSprite(float timePerSprite) Parameters Type Name Description float timePerSprite start() Called once on Component initialization. Declaration public void start() Overrides Component.start() switchAnimation(boolean instant) Declaration public void switchAnimation(boolean instant) Parameters Type Name Description boolean instant update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Overrides Component.update(float dt)"
  },
  "api/ecs.SpriteRenderer.html": {
    "href": "api/ecs.SpriteRenderer.html",
    "title": "Class SpriteRenderer",
    "keywords": "Class SpriteRenderer SpriteRenderer is a component that can be added to a GameObject. it can contain a solid color, a semi-transparent color, or a texture. Sprites can be tinted by the color value. Inheritance java.lang.Object Component SpriteRenderer Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class SpriteRenderer extends Component Constructors SpriteRenderer(Color color, Vector2f size) Create the spriteRenderer using a Color object, no sprite. Declaration public SpriteRenderer(Color color, Vector2f size) Parameters Type Name Description Color color of type Color, range from 0-255 org.joml.Vector2f size SpriteRenderer(Sprite sprite, Vector2f size) Create a spriteRenderer using a sprite that is already loaded. Default tint color is white (no tinting visible). Declaration public SpriteRenderer(Sprite sprite, Vector2f size) Parameters Type Name Description Sprite sprite org.joml.Vector2f size SpriteRenderer(String path, Vector2f size) Create a spriteRenderer using an image from the fileSystem. Declaration public SpriteRenderer(String path, Vector2f size) Parameters Type Name Description java.lang.String path to the image (ie. \"src/assets/images/pepper.png\") org.joml.Vector2f size SpriteRenderer(Vector4f color, Vector2f size) Create the spriteRenderer using a color vector, no sprite. Declaration public SpriteRenderer(Vector4f color, Vector2f size) Parameters Type Name Description org.joml.Vector4f color of type JOML Vector4f, range from 0-1 org.joml.Vector2f size Methods getColor() Declaration public Color getColor() Returns Type Description Color type Color in standard RGBA form in the range 0-255 getColorVector() Declaration public Vector4f getColorVector() Returns Type Description org.joml.Vector4f a Vector4f containing the normalized (0-1) color values (R, G, B, and A) getSize() Declaration public Vector2f getSize() Returns Type Description org.joml.Vector2f getTexCoords() Declaration public Vector2f[] getTexCoords() Returns Type Description org.joml.Vector2f [] Vector2f array of the UV coordinates of the sprite if applicable. getTexture() Declaration public Texture getTexture() Returns Type Description Texture type Texture of the sprite if applicable. isDirty() Used by the renderer to determine if this sprite should be sent back to the GPU to be redrawn. Declaration public boolean isDirty() Returns Type Description boolean true or false if the sprite or color has changes since last draw. markDirty() Mark this Sprite renderer as dirty Declaration public void markDirty() setAlpha(float a) Change the alpha/opacity of the sprite and/or color Declaration public void setAlpha(float a) Parameters Type Name Description float a alpha/opacity setClean() Used by the renderer to reset the state of the SpriteRenderer to clean. Declaration public void setClean() setColor(Color color) Change the color by passing a Color object, converting it to a normalized Vector4f. Declaration public void setColor(Color color) Parameters Type Name Description Color color should be in range of 0-255 setColor(Vector4f color) Change the color by passing a Vector4f Declaration public void setColor(Vector4f color) Parameters Type Name Description org.joml.Vector4f color vector, values should be in the range of 0-1 setSize(Vector2f size) Declaration public void setSize(Vector2f size) Parameters Type Name Description org.joml.Vector2f size setSprite(Sprite sprite) Change the sprite contained in the SpriteRenderer Component. Declaration public void setSprite(Sprite sprite) Parameters Type Name Description Sprite sprite setTexture(Texture texture) Set the texture of the Sprite if required. Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture the new texture of this sprite start() Initialize the Component, called once after creation by the parent GameObject. Declaration public void start() Overrides Component.start() update(float dt) Update method called every frame by parent GameObject Declaration public void update(float dt) Parameters Type Name Description float dt Engine.deltaTime Overrides Component.update(float dt)"
  },
  "api/ecs.Text.html": {
    "href": "api/ecs.Text.html",
    "title": "Class Text",
    "keywords": "Class Text Inheritance java.lang.Object Text Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Text Constructors Text(String string, float x, float y) Declaration public Text(String string, float x, float y) Parameters Type Name Description java.lang.String string the text to be rendered. float x the X position of the Text object. float y the Y position of the Text object. Text(String string, Font font, Color color, float x, float y) Declaration public Text(String string, Font font, Color color, float x, float y) Parameters Type Name Description java.lang.String string the text to be rendered. Font font the fonts.Font object that contains your preferred .ttf font file. Color color the graphics.Color object that contains your prefered RGBA color. float x the X position of the Text object. float y the Y position of the Text object. Text(String string, Font font, Color color, float x, float y, int zIndex, boolean isSticky, boolean isCentered) Declaration public Text(String string, Font font, Color color, float x, float y, int zIndex, boolean isSticky, boolean isCentered) Parameters Type Name Description java.lang.String string the text to be rendered. Font font the fonts.Font object that contains your preferred .ttf font file. Color color the graphics.Color object that contains your prefered RGBA color. float x the X position of the Text object. float y the Y position of the Text object. int zIndex the Z-Index of the Text Object (currently can only be set on creation, this will change in the future). boolean isSticky boolean determining whether the text sticks in one position regardless of the camera position (isSticky = true) or if it will move in world space. boolean isCentered boolean determining whether the text is left aligned or center aligned. This can be changed after creation using .setCentered(). Text(String string, Color color, float x, float y) Declaration public Text(String string, Color color, float x, float y) Parameters Type Name Description java.lang.String string the text to be rendered. Color color the graphics.Color object that contains your prefered RGBA color. float x the X position of the Text object. float y the Y position of the Text object. Methods addX(float x) Add to the existing X position incrementally each time this method is called. Declaration public void addX(float x) Parameters Type Name Description float x amount to increment X position by. addY(float y) Add to the existing Y position incrementally each time this method is called. Declaration public void addY(float y) Parameters Type Name Description float y amount to increment Y position by. change(String string) This method is called when the user wants to modify the string in the Text object. This can be called anytime after object creation. Declaration public void change(String string) Parameters Type Name Description java.lang.String string the text to change the current string to. getGlyphRenderers() Declaration public ArrayList<GlyphRenderer> getGlyphRenderers() Returns Type Description java.util.ArrayList < GlyphRenderer > getX() Declaration public float getX() Returns Type Description float getY() Declaration public float getY() Returns Type Description float isCentered() Declaration public boolean isCentered() Returns Type Description boolean boolean value of isCentered. rainbowify() Applies a rainbow effect to the Text, gradually changing the color of each Glyph in a rainbow. Declaration public void rainbowify() setCentered(boolean centered) Allows the user to change the text alignment after creation. Declaration public void setCentered(boolean centered) Parameters Type Name Description boolean centered boolean isCentered. setColor(Color color) Set the color of the entire Text object. Declaration public void setColor(Color color) Parameters Type Name Description Color color RGBA Color object. setPosition(Vector2f position) Allows the user to change the position of the Text object. Declaration public void setPosition(Vector2f position) Parameters Type Name Description org.joml.Vector2f position Vector2f containing new position data. setX(float x) Declaration public void setX(float x) Parameters Type Name Description float x setY(float y) Declaration public void setY(float y) Parameters Type Name Description float y update() Update method called for every text object by the scene.Scene.updateUI() method. This should not be called by general users. Declaration public void update() zIndex() Declaration public int zIndex() Returns Type Description int"
  },
  "api/ecs.Tween.html": {
    "href": "api/ecs.Tween.html",
    "title": "Class Tween",
    "keywords": "Class Tween This class provides Tweening with easing in and out for smooth movement from point to point. Great for moving platforms or moving AI to exact spot for desired time. Also great for changing values of any property really... including colors and size Inheritance java.lang.Object Component Tween Inherited Members Component.compareTo(Component) Component.debug() Component.position() Component.remove() Component.setPosition(Vector2f) Component.start() Component.update(float) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Tween extends Component Constructors Tween() Declaration public Tween() Methods play() After setting up all of the animations it will play them NOTE! - MUST USE setUpTween function first! Declaration public void play() setUpTweenObject(Vector2f object, Vector2f startPos, Vector2f target, float duration, Tween.TweenMode tweenMode) Smoothly changes object's value from startPos to target Declaration public void setUpTweenObject(Vector2f object, Vector2f startPos, Vector2f target, float duration, Tween.TweenMode tweenMode) Parameters Type Name Description org.joml.Vector2f object Value to change using this tween. This can be Transform of an object like position or size or anything really that is Vector2f for now org.joml.Vector2f startPos Starting position of the object org.joml.Vector2f target Ending destination float duration How long will it take for the object to reach its destination in seconds Tween.TweenMode tweenMode Minor movement effects of the object setUpTweenPosition(Vector2f startPos, Vector2f target, float duration, Tween.TweenMode tweenMode) Smoothly moves object from one position to another in desired time Declaration public void setUpTweenPosition(Vector2f startPos, Vector2f target, float duration, Tween.TweenMode tweenMode) Parameters Type Name Description org.joml.Vector2f startPos Starting position of the object org.joml.Vector2f target Ending destination float duration How long will it take for the object to reach its destination in seconds Tween.TweenMode tweenMode Minor movement effects of the object start() Called once on Component initialization. Declaration public void start() Overrides Component.start() tweenFinished() Checks whether current tween that is being processed has finished Declaration public boolean tweenFinished() Returns Type Description boolean true if tween finished tweenFinishedAll() Checks whether all of the tweens in the list have finished Declaration public boolean tweenFinishedAll() Returns Type Description boolean true if all tweens finished update(float dt) Called once per frame for each Component Declaration public void update(float dt) Parameters Type Name Description float dt Overrides Component.update(float dt)"
  },
  "api/ecs.Tween.TweenMode.html": {
    "href": "api/ecs.Tween.TweenMode.html",
    "title": "Enum Tween.TweenMode",
    "keywords": "Enum Tween.TweenMode Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum Tween.TweenMode extends Enum<Tween.TweenMode> Fields Name Description EASING_IN EASING_IN_OUT EASING_OUT NO_EASING Methods Name Description valueOf(String name) values()"
  },
  "api/event.EventData.html": {
    "href": "api/event.EventData.html",
    "title": "Class EventData",
    "keywords": "Class EventData A base class to be extended by classes that are going to function as Data for the Event System Inheritance java.lang.Object EventData Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class EventData Constructors EventData() Declaration public EventData()"
  },
  "api/event.EventData.KeyEventData.html": {
    "href": "api/event.EventData.KeyEventData.html",
    "title": "Class EventData.KeyEventData",
    "keywords": "Class EventData.KeyEventData Event Data for the Key Event Inheritance java.lang.Object EventData EventData.KeyEventData Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public static class EventData.KeyEventData extends EventData Constructors KeyEventData(int keycode, int scancode, int action, int modifiers) Declaration public KeyEventData(int keycode, int scancode, int action, int modifiers) Parameters Type Name Description int keycode int scancode int action int modifiers Fields action Declaration public final int action Field Value Type Description int keycode Declaration public final int keycode Field Value Type Description int modifiers Declaration public final int modifiers Field Value Type Description int scancode Declaration public final int scancode Field Value Type Description int"
  },
  "api/event.EventData.MouseButtonEventData.html": {
    "href": "api/event.EventData.MouseButtonEventData.html",
    "title": "Class EventData.MouseButtonEventData",
    "keywords": "Class EventData.MouseButtonEventData Event Data for the Mouse Button Event Inheritance java.lang.Object EventData EventData.MouseButtonEventData Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public static class EventData.MouseButtonEventData extends EventData Constructors MouseButtonEventData(int button, int action, int modifiers) Declaration public MouseButtonEventData(int button, int action, int modifiers) Parameters Type Name Description int button int action int modifiers Fields action Declaration public final int action Field Value Type Description int button Declaration public final int button Field Value Type Description int modifiers Declaration public final int modifiers Field Value Type Description int"
  },
  "api/event.EventData.MouseScrollEventData.html": {
    "href": "api/event.EventData.MouseScrollEventData.html",
    "title": "Class EventData.MouseScrollEventData",
    "keywords": "Class EventData.MouseScrollEventData Event Data for the Mouse Scroll Event Inheritance java.lang.Object EventData EventData.MouseScrollEventData Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public static class EventData.MouseScrollEventData extends EventData Constructors MouseScrollEventData(double xScroll, double yScroll) Declaration public MouseScrollEventData(double xScroll, double yScroll) Parameters Type Name Description double xScroll double yScroll Fields xScroll Declaration public final double xScroll Field Value Type Description double yScroll Declaration public final double yScroll Field Value Type Description double"
  },
  "api/event.EventData.TriggerEnterEvent.html": {
    "href": "api/event.EventData.TriggerEnterEvent.html",
    "title": "Class EventData.TriggerEnterEvent",
    "keywords": "Class EventData.TriggerEnterEvent Event Data for the Trigger Enter Event. Empty Inheritance java.lang.Object EventData EventData.TriggerEnterEvent Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public static class EventData.TriggerEnterEvent extends EventData Constructors TriggerEnterEvent() Declaration public TriggerEnterEvent()"
  },
  "api/event.EventData.TriggerExitEvent.html": {
    "href": "api/event.EventData.TriggerExitEvent.html",
    "title": "Class EventData.TriggerExitEvent",
    "keywords": "Class EventData.TriggerExitEvent Event Data for the Trigger Exit Event. Empty Inheritance java.lang.Object EventData EventData.TriggerExitEvent Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public static class EventData.TriggerExitEvent extends EventData Constructors TriggerExitEvent() Declaration public TriggerExitEvent()"
  },
  "api/event.EventData.WindowResizeEventData.html": {
    "href": "api/event.EventData.WindowResizeEventData.html",
    "title": "Class EventData.WindowResizeEventData",
    "keywords": "Class EventData.WindowResizeEventData Event Data for the Window Resized Event Inheritance java.lang.Object EventData EventData.WindowResizeEventData Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public static class EventData.WindowResizeEventData extends EventData Constructors WindowResizeEventData(int x, int y) Declaration public WindowResizeEventData(int x, int y) Parameters Type Name Description int x int y Fields x Declaration public final int x Field Value Type Description int y Declaration public final int y Field Value Type Description int"
  },
  "api/event.EventListener.html": {
    "href": "api/event.EventListener.html",
    "title": "Interface EventListener<T>",
    "keywords": "Interface EventListener<T> A Simple listener interface Namespace : Assembly : .dll Syntax public interface EventListener<T> Type Parameters Name Description T Methods onEvent(T t) Called when the respective event occurs Declaration public abstract void onEvent(T t) Parameters Type Name Description T t Data for that event"
  },
  "api/event.EventNode.html": {
    "href": "api/event.EventNode.html",
    "title": "Class EventNode<T>",
    "keywords": "Class EventNode<T> A class which can handle Event listeners. Automatically calls all listeners when event occurs Inheritance java.lang.Object EventNode<T> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class EventNode<T> Type Parameters Name Description T Constructors EventNode() A default constructor Declaration public EventNode() Methods onEvent(T t) Notifies the node that an event has occurred. Notifies all listeners Declaration public void onEvent(T t) Parameters Type Name Description T t the data that is to be given to all the listeners. subscribe(EventListener<T> listener) Add a function to the listeners list. The function will be called when the event occurs Declaration public void subscribe(EventListener<T> listener) Parameters Type Name Description EventListener < T > listener The function that is to be called when the event occurs"
  },
  "api/event.Events.html": {
    "href": "api/event.Events.html",
    "title": "Class Events",
    "keywords": "Class Events Collection of Event Nodes for various Events Inheritance java.lang.Object Events Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Events Constructors Events() Declaration public Events() Fields keyEvent Declaration public static EventNode<EventData.KeyEventData> keyEvent Field Value Type Description EventNode < KeyEventData > mouseButtonEvent Declaration public static EventNode<EventData.MouseButtonEventData> mouseButtonEvent Field Value Type Description EventNode < MouseButtonEventData > mouseScrollEvent Declaration public static EventNode<EventData.MouseScrollEventData> mouseScrollEvent Field Value Type Description EventNode < MouseScrollEventData > windowResizeEvent Declaration public static EventNode<EventData.WindowResizeEventData> windowResizeEvent Field Value Type Description EventNode < WindowResizeEventData >"
  },
  "api/event.html": {
    "href": "api/event.html",
    "title": "Namespace event",
    "keywords": "Namespace event Classes EventData A base class to be extended by classes that are going to function as Data for the Event System EventData.KeyEventData Event Data for the Key Event EventData.MouseButtonEventData Event Data for the Mouse Button Event EventData.MouseScrollEventData Event Data for the Mouse Scroll Event EventData.TriggerEnterEvent Event Data for the Trigger Enter Event. Empty EventData.TriggerExitEvent Event Data for the Trigger Exit Event. Empty EventData.WindowResizeEventData Event Data for the Window Resized Event EventNode<T> A class which can handle Event listeners. Automatically calls all listeners when event occurs Events Collection of Event Nodes for various Events Interfaces EventListener<T> A Simple listener interface"
  },
  "api/fonts.Font.html": {
    "href": "api/fonts.Font.html",
    "title": "Class Font",
    "keywords": "Class Font This class contains a font texture for drawing text. A lot of credit for the base of this file goes to @SilverTiger on GitHub, his base has been heavily modified to work in Azurite. Inheritance java.lang.Object Font Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Font Constructors Font() Creates a default antialiased font with monospaced glyphs and default size 16. Declaration public Font() Font(boolean antiAlias) Creates a default font with monospaced glyphs and default size 16. Declaration public Font(boolean antiAlias) Parameters Type Name Description boolean antiAlias Wheter the font should be antialiased or not Font(int size) Creates a default antialiased font with monospaced glyphs and specified size. Declaration public Font(int size) Parameters Type Name Description int size Font size Font(int size, boolean antiAlias) Creates a default font with monospaced glyphs and specified size. Declaration public Font(int size, boolean antiAlias) Parameters Type Name Description int size Font size boolean antiAlias Wheter the font should be antialiased or not Font(Font font) Creates a antialiased font from an AWT Font. Declaration public Font(Font font) Parameters Type Name Description java.awt.Font font The AWT Font Font(Font font, boolean antiAlias) Creates a font from an AWT Font. Declaration public Font(Font font, boolean antiAlias) Parameters Type Name Description java.awt.Font font The AWT Font boolean antiAlias Wheter the font should be antialiased or not Font(InputStream in, int size) Creates a antialiased Font from an input stream. Declaration public Font(InputStream in, int size) Parameters Type Name Description java.io.InputStream in The input stream int size Font size Font(InputStream in, int size, boolean antiAlias) Creates a Font from an input stream. Declaration public Font(InputStream in, int size, boolean antiAlias) Parameters Type Name Description java.io.InputStream in The input stream int size Font size boolean antiAlias Wheter the font should be antialiased or not Font(String path, float size, boolean antiAlias) Creates a Font from an input stream. Declaration public Font(String path, float size, boolean antiAlias) Parameters Type Name Description java.lang.String path Path to TTF file float size Font size boolean antiAlias Whether the font should be antialiased or not Methods getFontHeight() Declaration public int getFontHeight() Returns Type Description int getGlyphs() Declaration public Map<Character,Glyph> getGlyphs() Returns Type Description java.util.Map < java.lang.Character , Glyph > getHeight(CharSequence text) Gets the height of the specified text. Declaration public int getHeight(CharSequence text) Parameters Type Name Description java.lang.CharSequence text The text Returns Type Description int Height in pixels of the text. getTexture() Declaration public Texture getTexture() Returns Type Description Texture"
  },
  "api/fonts.Glyph.html": {
    "href": "api/fonts.Glyph.html",
    "title": "Class Glyph",
    "keywords": "Class Glyph This class represents a font glyph. Inheritance java.lang.Object Sprite Glyph Inherited Members Sprite.getHeight() Sprite.getTexture() Sprite.getTextureCoordinates() Sprite.getTextureID() Sprite.getWidth() Sprite.setTexture(Texture) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Glyph extends Sprite Constructors Glyph(int width, int height, int x, int y) Creates a font Glyph. Declaration public Glyph(int width, int height, int x, int y) Parameters Type Name Description int width Width of the Glyph int height Height of the Glyph int x X coordinate on the font texture int y Y coordinate on the font texture Fields height Declaration public final int height Field Value Type Description int uvCoordinates Declaration public Vector2f[] uvCoordinates Field Value Type Description org.joml.Vector2f [] width Declaration public final int width Field Value Type Description int x Declaration public final int x Field Value Type Description int y Declaration public final int y Field Value Type Description int Methods calculateUVs(Texture texture) Declaration public void calculateUVs(Texture texture) Parameters Type Name Description Texture texture getUV() Declaration public Vector2f[] getUV() Returns Type Description org.joml.Vector2f []"
  },
  "api/fonts.GlyphRenderer.html": {
    "href": "api/fonts.GlyphRenderer.html",
    "title": "Class GlyphRenderer",
    "keywords": "Class GlyphRenderer Inheritance java.lang.Object GlyphRenderer Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class GlyphRenderer Constructors GlyphRenderer(Transform transform, Glyph glyph, Text parentText, char c, boolean isSticky, Color color) Create a spriteRenderer using a sprite that is already loaded. Default tint color is white (no tinting visible). Declaration public GlyphRenderer(Transform transform, Glyph glyph, Text parentText, char c, boolean isSticky, Color color) Parameters Type Name Description Transform transform Glyph glyph Text parentText char c boolean isSticky Color color Methods addX(float x) Declaration public void addX(float x) Parameters Type Name Description float x addY(float x) Declaration public void addY(float x) Parameters Type Name Description float x getCharacter() Declaration public char getCharacter() Returns Type Description char getColor() Declaration public Color getColor() Returns Type Description Color type Color in standard RGBA form in the range 0-255 getColorVector() Declaration public Vector4f getColorVector() Returns Type Description org.joml.Vector4f a Vector4f containing the normalized (0-1) color values (R, G, B, and A) getLocalTransform() Declaration public Transform getLocalTransform() Returns Type Description Transform getParentText() Declaration public Text getParentText() Returns Type Description Text getTexCoords() Declaration public Vector2f[] getTexCoords() Returns Type Description org.joml.Vector2f [] Vector2f array of the UV coordinates of the sprite if applicable. getTexture() Declaration public Texture getTexture() Returns Type Description Texture type Texture of the sprite if applicable. isDirty() Used by the renderer to determine if this glyph should be sent back to the GPU to be redrawn. Declaration public boolean isDirty() Returns Type Description boolean true or false if the sprite or color has changes since last draw. isSticky() Declaration public boolean isSticky() Returns Type Description boolean setAlpha(float a) Change the alpha/opacity of the sprite and/or color Declaration public void setAlpha(float a) Parameters Type Name Description float a alpha/opacity setClean() Used by the renderer to reset the state of the GlyphRenderer to clean. Declaration public void setClean() setColor(Color color) Change the color by passing a Color object, converting it to a normalized Vector4f. Declaration public void setColor(Color color) Parameters Type Name Description Color color should be in range of 0-255 setColor(Vector4f color) Change the color by passing a Vector4f Declaration public void setColor(Vector4f color) Parameters Type Name Description org.joml.Vector4f color vector, values should be in the range of 0-1 setDirty() Used by the renderer to reset the state of the GlyphRenderer to dirty. Declaration public void setDirty() update(float dt) Update method called every frame by parent Declaration public void update(float dt) Parameters Type Name Description float dt Engine.deltaTime updatePosition(Vector2f delta) Declaration public void updatePosition(Vector2f delta) Parameters Type Name Description org.joml.Vector2f delta"
  },
  "api/fonts.html": {
    "href": "api/fonts.html",
    "title": "Namespace fonts",
    "keywords": "Namespace fonts Classes Font This class contains a font texture for drawing text. A lot of credit for the base of this file goes to @SilverTiger on GitHub, his base has been heavily modified to work in Azurite. Glyph This class represents a font glyph. GlyphRenderer"
  },
  "api/graphics.Camera.html": {
    "href": "api/graphics.Camera.html",
    "title": "Class Camera",
    "keywords": "Class Camera Represents a basic camera. The purpose of a digital camera capturing a digital point of view is to translate the 3D locations in game onto the 2 dimensions of your monitor (if you come from the future with holograms in it, Hi! welcome to the past!) The camera does so by way of linear algebra; points in 3D space can be projected onto a 2D plane using matrix transformations. Specifically, the digital camera used in this engine is composed of two matrices: the projection and the view matrices. The projection matrix is used to define an in game width and height to your perspective by defining how many in-game coordinate units can be seen horizontally and vertically on your monitor. The view matrix defines the direction and orientation of the camera; it's usually the matrix defined in terms of camera position, pitch, and yaw. Inheritance java.lang.Object Camera Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Camera Constructors Camera() Creates a new Camera positioned at (0, 0) Projection matrix is set to default: 0 to Window's width from left to right, 0 to Window's height from top to bottom Declaration public Camera() Camera(Vector2f position) Creates a new Camera with a certain position Projection matrix is set to default: 0 to Window's width from left to right, 0 to Window's height from top to bottom Declaration public Camera(Vector2f position) Parameters Type Name Description org.joml.Vector2f position initial position Fields instance Declaration public static Camera instance Field Value Type Description mode Declaration public Camera.Mode mode Field Value Type Description graphics.Camera.Mode position Position of the camera Declaration public Vector2f position Field Value Type Description org.joml.Vector2f worldSize World size otherwise known as pixel size Declaration public Vector2f worldSize Field Value Type Description org.joml.Vector2f Methods adjustProjection() Recalculate Projection Matrix Declaration public void adjustProjection() getInverseProjection() Declaration public Matrix4f getInverseProjection() Returns Type Description org.joml.Matrix4f getInverseView() Declaration public Matrix4f getInverseView() Returns Type Description org.joml.Matrix4f getPosition() Get the camera's position Declaration public Vector2f getPosition() Returns Type Description org.joml.Vector2f getProjectionMatrix() Get the camera's projection matrix Declaration public Matrix4f getProjectionMatrix() Returns Type Description org.joml.Matrix4f getViewMatrix() Recalculates and returns the view marix Declaration public Matrix4f getViewMatrix() Returns Type Description org.joml.Matrix4f getViewportPosX() Declaration public int getViewportPosX() Returns Type Description int getViewportPosY() Declaration public int getViewportPosY() Returns Type Description int getViewportSizeX() Declaration public float getViewportSizeX() Returns Type Description float getViewportSizeY() Declaration public float getViewportSizeY() Returns Type Description float getWorldSize() Declaration public Vector2f getWorldSize() Returns Type Description org.joml.Vector2f smoothFollow(Vector2f c) Smoothly center the camera on to a transform Declaration public void smoothFollow(Vector2f c) Parameters Type Name Description org.joml.Vector2f c"
  },
  "api/graphics.Color.html": {
    "href": "api/graphics.Color.html",
    "title": "Class Color",
    "keywords": "Class Color Represents a 4-channel color of either RGBA or HSLA type, with some helper functions to convert an RGBA to HSLA, or vice versa. This Class also contains some predefined colors, a random color generator, and some OpenGL-related helper functions. Inheritance java.lang.Object Color Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Color Constructors Color(float c) Creates new color with specified value for rgb Declaration public Color(float c) Parameters Type Name Description float c value for red, green and blue Color(float pr, float pg, float pb) Creates new color with specified rgb values Declaration public Color(float pr, float pg, float pb) Parameters Type Name Description float pr initial red value float pg initial green value float pb initial blue value Color(float pr, float pg, float pb, float pa) Creates new color with specified rgba values Declaration public Color(float pr, float pg, float pb, float pa) Parameters Type Name Description float pr initial red value float pg initial green value float pb initial blue value float pa initial alpha value Fields BLACK Declaration public static Color BLACK Field Value Type Description BLUE Declaration public static Color BLUE Field Value Type Description BROWN Declaration public static Color BROWN Field Value Type Description CRIMSON Declaration public static Color CRIMSON Field Value Type Description CYAN Declaration public static Color CYAN Field Value Type Description DARK_BLUE Declaration public static Color DARK_BLUE Field Value Type Description DARK_GREEN Declaration public static Color DARK_GREEN Field Value Type Description DARK_RED Declaration public static Color DARK_RED Field Value Type Description DIRTY_BLUE Declaration public static Color DIRTY_BLUE Field Value Type Description FIREBRICK Declaration public static Color FIREBRICK Field Value Type Description GRAY Declaration public static Color GRAY Field Value Type Description GREEN Declaration public static Color GREEN Field Value Type Description MAROON Declaration public static Color MAROON Field Value Type Description NAVY_BLUE Declaration public static Color NAVY_BLUE Field Value Type Description OLIVE Declaration public static Color OLIVE Field Value Type Description PINK Declaration public static Color PINK Field Value Type Description PURPLE Declaration public static Color PURPLE Field Value Type Description RED Declaration public static Color RED Field Value Type Description SILVER Declaration public static Color SILVER Field Value Type Description TEAL Declaration public static Color TEAL Field Value Type Description TYPE_HSLA Declaration public static final int TYPE_HSLA Field Value Type Description int TYPE_RGBA Declaration public static final int TYPE_RGBA Field Value Type Description int WHITE Declaration public static Color WHITE Field Value Type Description YELLOW Declaration public static Color YELLOW Field Value Type Description a Alpha component for this color. Range: 0-255 Declaration public float a Field Value Type Description float b Blue component for this color. Range: 0-255 Declaration public float b Field Value Type Description float g Green component for this color. Range: 0-255 Declaration public float g Field Value Type Description float r Red component for this color. Range: 0-255 Declaration public float r Field Value Type Description float random Declaration public static Random random Field Value Type Description java.util.Random Methods decode(String colorCode) Decode a rgb color code into a Color Declaration public static Color decode(String colorCode) Parameters Type Name Description java.lang.String colorCode the color code Returns Type Description a valid rgb color equals(Object c) Check if colors are equal Declaration public boolean equals(Object c) Parameters Type Name Description java.lang.Object c Returns Type Description boolean Overrides java.lang.Object.equals(java.lang.Object) fromNormalized() Turn a Color with normalised values to a color with values from 0-255 Declaration public Color fromNormalized() Returns Type Description getColor(float x, float y, float z, float a, int inputType) Create a new color. Declaration public static Color getColor(float x, float y, float z, float a, int inputType) Parameters Type Name Description float x the first component float y the second component float z the third component float a the alpha value int inputType whether the input values are RGBA or HSLA Returns Type Description a RGBA Color representing the input randomColor() Declaration public static Color randomColor() Returns Type Description random Color setAlpha(float value) Set Alpha for this color Declaration public void setAlpha(float value) Parameters Type Name Description float value setValue(char type, float value) Set a component of this color to a value Declaration public void setValue(char type, float value) Parameters Type Name Description char type can be one of r, g, b, a float value value to set the component to toHSLColor() Convert this RGB Color to a HSLColor using HSLColor#toHSLA(float[]) Declaration public HSLColor toHSLColor() Returns Type Description HSLColor a HSLColor representing the same color toNormalizedVec3f() Get the Normalized Vector3f for this color. Used mostly in OpenGL Declaration public Vector3f toNormalizedVec3f() Returns Type Description org.joml.Vector3f toNormalizedVec4f() Get the Normalized Vector4f for this color. Used mostly in OpenGL Declaration public Vector4f toNormalizedVec4f() Returns Type Description org.joml.Vector4f toVec4f() Returns a Vector4f with rgba as xyzw Declaration public Vector4f toVec4f() Returns Type Description org.joml.Vector4f"
  },
  "api/graphics.Framebuffer.html": {
    "href": "api/graphics.Framebuffer.html",
    "title": "Class Framebuffer",
    "keywords": "Class Framebuffer This class is heavily inspired from TheCherno's Hazel Engine's Framebuffer API An encapsulation of an OpenGL Framebuffer Inheritance java.lang.Object Framebuffer Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Framebuffer Constructors Framebuffer(int width, int height, FramebufferSpec spec) Default Framebuffer constructor Declaration public Framebuffer(int width, int height, FramebufferSpec spec) Parameters Type Name Description int width int: width of the fbo int height int: height of the fbo FramebufferSpec spec FramebufferSpec: Specification of the framebuffer Methods bind() Binds the framebuffer Declaration public void bind() blitColorBuffersToScreen() Copies all data from the color texture attachments of this framebuffer to the texture attachments of the default Framebuffer. OpenGL provides a function, glBlitFramebuffer for this Declaration public void blitColorBuffersToScreen() blitEntireFboToScreen() Copies all data from the ALL texture attachments of this framebuffer to the texture attachments of the default Framebuffer. OpenGL provides a function, glBlitFramebuffer for this Declaration public void blitEntireFboToScreen() clean() Deletes all Framebuffers Called after the X is pressed Declaration public static void clean() createDefault() Factory method to create an instance that manages the default framebuffer Declaration public static Framebuffer createDefault() Returns Type Description Framebuffer createHalfResWithColorAttachment() Factory method to create an instance that is half the size of the screen and has one simple color attachment Declaration public static Framebuffer createHalfResWithColorAttachment() Returns Type Description Framebuffer createWithColorAttachment() Factory method to create an instance that has one simple color attachment Declaration public static Framebuffer createWithColorAttachment() Returns Type Description Framebuffer delete() Deletes the texture attachments and the framebuffer Declaration public void delete() getColorAttachment(int i) Get a color texture attachment id from the framebuffer Declaration public Texture getColorAttachment(int i) Parameters Type Name Description int i index of the texture attachment required Returns Type Description Texture the color attachment texture id at the index getDepthAttachment() Get the depth attachment texture from this framebuffer Declaration public Texture getDepthAttachment() Returns Type Description Texture the depth attachment texture id getHeight() Get the height of this Framebuffer Declaration public int getHeight() Returns Type Description int height of the Framebuffer getWidth() Get the width of this Framebuffer Declaration public int getWidth() Returns Type Description int width of the Framebuffer isDefault() Checks if the fbo is a wrapper around the default one. Required because created wrapper has no attachments stored in colorAttachmentTextures Declaration public boolean isDefault() Returns Type Description boolean if the framebuffer instance is a wrapper around the resize(int width, int height) Resize the Framebuffer to a specific size it will regenerate the entire framebuffer Declaration public void resize(int width, int height) Parameters Type Name Description int width int: new width int height int new height resizeAll(EventData.WindowResizeEventData data) Resize all Framebuffers created via the createWithColorAttachment() or createHalfResWithColorAttachment() methods Declaration public static void resizeAll(EventData.WindowResizeEventData data) Parameters Type Name Description EventData.WindowResizeEventData data unbind() Unbinds the framebuffer i.e. binds the default framebuffer Declaration public static void unbind()"
  },
  "api/graphics.Graphics.html": {
    "href": "api/graphics.Graphics.html",
    "title": "Class Graphics",
    "keywords": "Class Graphics A utility class for changing background colors. More functionality will probably added to this class as the engine starts to grow. Inheritance java.lang.Object Graphics Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Graphics Constructors Graphics() Declaration public Graphics() Fields defaultBackground Declaration public static Color defaultBackground Field Value Type Description Color Methods background(float rgb) Set the GL clear color on a grayscale. Declaration public static void background(float rgb) Parameters Type Name Description float rgb Single value affecting red, green, and blue (0-255) background(float r, float g, float b) Set the GL clear color Declaration public static void background(float r, float g, float b) Parameters Type Name Description float r Red (0-255) float g Green (0-255) float b Blue (0-255) background(Color color) Set the GL clear color Declaration public static void background(Color color) Parameters Type Name Description Color color to set the clear color. Alpha is ignored setDefaultBackground(float rgb) Set the GL clear color for the DefaultRenderer on a greyscale. Declaration public static void setDefaultBackground(float rgb) Parameters Type Name Description float rgb Single value affecting red, green, and blue (0-255) setDefaultBackground(float r, float g, float b) Set the GL clear color for the DefaultRenderer Declaration public static void setDefaultBackground(float r, float g, float b) Parameters Type Name Description float r Red (0-255) float g Green (0-255) float b Blue (0-255) setDefaultBackground(Color color) Set the GL clear color for the DefaultRenderer Declaration public static void setDefaultBackground(Color color) Parameters Type Name Description Color color to set the clear color. Alpha is ignored"
  },
  "api/graphics.HSLColor.html": {
    "href": "api/graphics.HSLColor.html",
    "title": "Class HSLColor",
    "keywords": "Class HSLColor Represents a HSLA color. Inheritance java.lang.Object HSLColor Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class HSLColor Constructors HSLColor(float h, float s, float l, float a) Create a HSLColor. Declaration public HSLColor(float h, float s, float l, float a) Parameters Type Name Description float h the hue ranging from 0 to 360, values outside get smoothly fit into the range float s the saturation ranging from 0 to 100, values are limited to this range float l the luminance ranging from 0 to 100, values are limited to this range float a the alpha ranging from 0 to 1, values are limited to this range Fields ALPHA Declaration public static final int ALPHA Field Value Type Description int HUE Declaration public static final int HUE Field Value Type Description int LUMINANCE Declaration public static final int LUMINANCE Field Value Type Description int SATURATION Declaration public static final int SATURATION Field Value Type Description int Methods equals(Object o) Declaration public boolean equals(Object o) Parameters Type Name Description java.lang.Object o Returns Type Description boolean Overrides java.lang.Object.equals(java.lang.Object) get(int component) Get a component of this color. Declaration public float get(int component) Parameters Type Name Description int component the component from 0-3. Named representations are #HUE , #SATURATION , #LUMINANCE and #ALPHA Returns Type Description float the value of the component getHSLColor(float x, float y, float z, float a, int inputType) Declaration public static HSLColor getHSLColor(float x, float y, float z, float a, int inputType) Parameters Type Name Description float x float y float z float a int inputType Returns Type Description hashCode() Declaration public int hashCode() Returns Type Description int Overrides java.lang.Object.hashCode() set(int component, float newValue) Set a component of this color. Declaration public void set(int component, float newValue) Parameters Type Name Description int component the component from 0-3. Named representations are #HUE , #SATURATION , #LUMINANCE and #ALPHA float newValue the new value for the component toHSLA(float[] rgba) Convert a RGBA color to it corresponding HSLA color. RGBA ranges are [0-1,0-1,0-1,0-1]. HSLA output ranges are [0-360,0-100,0-100,0-1]. Declaration public static float[] toHSLA(float[] rgba) Parameters Type Name Description float [] rgba a float array containing [r,g,b,a], where a is an optional parameter Returns Type Description float [] normalized hsla array [h,s,l,a] toHSLAVector() Create a Vector4f containing the HSLA values. Declaration public Vector4f toHSLAVector() Returns Type Description org.joml.Vector4f a vector containing (h,s,l,a) toHSLVector() Create a Vector3f containing the HSL values. Declaration public Vector3f toHSLVector() Returns Type Description org.joml.Vector3f a vector containing (h,s,l) toNormalizedRGBColor() Convert this HSLColor to a normalized RGB Color using HSLColor#toRGBA(float[]) Declaration public Color toNormalizedRGBColor() Returns Type Description Color a normalized RGB Color representing the same color toRGBA(float[] hsla) Convert a HSLA color to RGBA. HSLA ranges are [0-360,0-100,0-100,0-1]. RGBA output ranges are [0-1,0-1,0-1,0-1]. If there is no alpha in the input, there won't be an alpha in the output as well. Declaration public static float[] toRGBA(float[] hsla) Parameters Type Name Description float [] hsla a float array containing [h,s,l,a], where a is an optional parameter Returns Type Description float [] normalized rgba array [r,g,b,a] toRGBColor() Convert this HSLColor to a RGB Color using HSLColor#toRGBA(float[]) Declaration public Color toRGBColor() Returns Type Description Color a RGB Color representing the same color"
  },
  "api/graphics.html": {
    "href": "api/graphics.html",
    "title": "Namespace graphics",
    "keywords": "Namespace graphics Classes Camera Represents a basic camera. The purpose of a digital camera capturing a digital point of view is to translate the 3D locations in game onto the 2 dimensions of your monitor (if you come from the future with holograms in it, Hi! welcome to the past!) The camera does so by way of linear algebra; points in 3D space can be projected onto a 2D plane using matrix transformations. Specifically, the digital camera used in this engine is composed of two matrices: the projection and the view matrices. The projection matrix is used to define an in game width and height to your perspective by defining how many in-game coordinate units can be seen horizontally and vertically on your monitor. The view matrix defines the direction and orientation of the camera; it's usually the matrix defined in terms of camera position, pitch, and yaw. Color Represents a 4-channel color of either RGBA or HSLA type, with some helper functions to convert an RGBA to HSLA, or vice versa. This Class also contains some predefined colors, a random color generator, and some OpenGL-related helper functions. Framebuffer This class is heavily inspired from TheCherno's Hazel Engine's Framebuffer API An encapsulation of an OpenGL Framebuffer Graphics A utility class for changing background colors. More functionality will probably added to this class as the engine starts to grow. HSLColor Represents a HSLA color. Shader Sprite Contains the texture and UV coordinates used by openGL to render an image Spritesheet Texture This is a class for an OpenGL texture Window The Window class handles setup of GLFW Enums Primitive A primitive is a simple shape that contains all the information necessary to prepare an element buffer of that primitive's type. The primitives available are: Quadrilateral Line ShaderDatatype Represents a datatype in GLSL"
  },
  "api/graphics.postprocess.BloomEffect.html": {
    "href": "api/graphics.postprocess.BloomEffect.html",
    "title": "Class BloomEffect",
    "keywords": "Class BloomEffect Post Processing Pipeline to apply a bloom effect to a Texture. Inheritance java.lang.Object PostProcessPipeline BloomEffect Inherited Members PostProcessPipeline.apply(Texture) PostProcessPipeline.init() java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class BloomEffect extends PostProcessPipeline Constructors BloomEffect(PostProcessStep.Target dest) To construct a Bloom Effect Pipeline with a bloom of 0.8 Declaration public BloomEffect(PostProcessStep.Target dest) Parameters Type Name Description PostProcessStep.Target dest Where the final texture is to be rendered BloomEffect(PostProcessStep.Target dest, float bloomAmt) To construct a Bloom Effect Pipeline with a bloom of 0.8 Declaration public BloomEffect(PostProcessStep.Target dest, float bloomAmt) Parameters Type Name Description PostProcessStep.Target dest Where the final texture is to be rendered float bloomAmt amount of bloom to be applied Methods apply(Texture input) Apply the bloom effect and return the final texture if not rendering to the default framebuffer Declaration public Texture apply(Texture input) Parameters Type Name Description Texture input input texture to bee processed Returns Type Description Texture the final texture if not rendering to the default framebuffer Overrides PostProcessPipeline.apply(Texture input) init() Initializes all steps in this pipeline Declaration public void init() Overrides PostProcessPipeline.init()"
  },
  "api/graphics.postprocess.BrightFilter.html": {
    "href": "api/graphics.postprocess.BrightFilter.html",
    "title": "Class BrightFilter",
    "keywords": "Class BrightFilter A Post Processing Step that only renders bright parts of the scene Inheritance java.lang.Object PostProcessStep BrightFilter Inherited Members PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class BrightFilter extends PostProcessStep Constructors BrightFilter(PostProcessStep.Target target) Default Constructor Declaration public BrightFilter(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTexture(Texture texture) Set the input texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture input texture uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/graphics.postprocess.ForwardToTexture.html": {
    "href": "api/graphics.postprocess.ForwardToTexture.html",
    "title": "Class ForwardToTexture",
    "keywords": "Class ForwardToTexture A Post Processing Step that renders the texture as-is to another framebuffer. Perfect for debugging steps. NOTE: If you want to forward any texture to the screen, the scene class has a forwardToScreen field that can be used Inheritance java.lang.Object PostProcessStep ForwardToTexture Inherited Members PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class ForwardToTexture extends PostProcessStep Constructors ForwardToTexture(PostProcessStep.Target target) Default Constructor Declaration public ForwardToTexture(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTexture(Texture texture) Set the input texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture input texture uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/graphics.postprocess.HorizontalBlur.html": {
    "href": "api/graphics.postprocess.HorizontalBlur.html",
    "title": "Class HorizontalBlur",
    "keywords": "Class HorizontalBlur A Post Processing Step that renders the texture with a Horizontal Blur. NOTE: If you want a more blurry texture, consider using Target.ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER to get a smaller framebuffer size and in turn, a more blurrier texture Inheritance java.lang.Object PostProcessStep HorizontalBlur Inherited Members PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class HorizontalBlur extends PostProcessStep Constructors HorizontalBlur(PostProcessStep.Target target) Default Constructor Declaration public HorizontalBlur(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTexture(Texture texture) Set the input texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture input texture uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/graphics.postprocess.html": {
    "href": "api/graphics.postprocess.html",
    "title": "Namespace graphics.postprocess",
    "keywords": "Namespace graphics.postprocess Classes BloomEffect Post Processing Pipeline to apply a bloom effect to a Texture. BrightFilter A Post Processing Step that only renders bright parts of the scene ForwardToTexture A Post Processing Step that renders the texture as-is to another framebuffer. Perfect for debugging steps. NOTE: If you want to forward any texture to the screen, the scene class has a forwardToScreen field that can be used HorizontalBlur A Post Processing Step that renders the texture with a Horizontal Blur. NOTE: If you want a more blurry texture, consider using Target.ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER to get a smaller framebuffer size and in turn, a more blurrier texture PostProcessPipeline This class should be used if you want to chain multiple steps PostProcessQuad PostProcessStep Denotes A Step in Post Processing PostProcessing Some Utility methods VerticalBlur A Post Processing Step that renders the texture with a Vertical Blur. NOTE: If you want a more blurry texture, consider using Target.ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER to get a smaller framebuffer size and in turn, a more blurrier texture WeightedCombine A Post Processing Step that combines two textures multiplying them with corresponding weights and then adding them Enums PostProcessStep.Target Enum to show where to render. Framebuffer gets constructed based on this."
  },
  "api/graphics.postprocess.PostProcessing.html": {
    "href": "api/graphics.postprocess.PostProcessing.html",
    "title": "Class PostProcessing",
    "keywords": "Class PostProcessing Some Utility methods Inheritance java.lang.Object PostProcessing Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class PostProcessing Constructors PostProcessing() Declaration public PostProcessing() Methods finish() Declaration public static void finish() prepare() Declaration public static void prepare()"
  },
  "api/graphics.postprocess.PostProcessPipeline.html": {
    "href": "api/graphics.postprocess.PostProcessPipeline.html",
    "title": "Class PostProcessPipeline",
    "keywords": "Class PostProcessPipeline This class should be used if you want to chain multiple steps Inheritance java.lang.Object PostProcessPipeline Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class PostProcessPipeline Constructors PostProcessPipeline() Declaration public PostProcessPipeline() Methods apply(Texture input) Apply the effect and return the final texture if not rendering to the default framebuffer Declaration public abstract Texture apply(Texture input) Parameters Type Name Description Texture input input texture to bee processed Returns Type Description Texture the final texture if not rendering to the default framebuffer init() Initialize all steps in this pipeline Declaration public abstract void init()"
  },
  "api/graphics.postprocess.PostProcessQuad.html": {
    "href": "api/graphics.postprocess.PostProcessQuad.html",
    "title": "Class PostProcessQuad",
    "keywords": "Class PostProcessQuad Inheritance java.lang.Object PostProcessQuad Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class PostProcessQuad Constructors PostProcessQuad() Creates the GPU resources for the fullscreen quad Declaration public PostProcessQuad() Methods _bindQuad() Binds the quad and enables attributes Declaration public void _bindQuad() _unbindQuad() Unbinds the quad and disables attributes Declaration public void _unbindQuad() getInstance() Get the singleton instance. If it doesn't exist, create it Declaration public static PostProcessQuad getInstance() Returns Type Description"
  },
  "api/graphics.postprocess.PostProcessStep.html": {
    "href": "api/graphics.postprocess.PostProcessStep.html",
    "title": "Class PostProcessStep",
    "keywords": "Class PostProcessStep Denotes A Step in Post Processing Inheritance java.lang.Object PostProcessStep Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class PostProcessStep Constructors PostProcessStep(PostProcessStep.Target target) Declaration public PostProcessStep(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Fields framebuffer The framebuffer to which to render to Declaration public Framebuffer framebuffer Field Value Type Description Framebuffer Methods apply() Run this Step Declaration public Texture apply() Returns Type Description Texture id of the texture if the framebuffer to render to is not default. createFramebuffer() Create Framebuffer based on target Declaration protected Framebuffer createFramebuffer() Returns Type Description Framebuffer createShader() Create the shader to be used for this step Declaration public abstract Shader createShader() Returns Type Description Shader init() Create the shader and framebuffer Declaration public void init() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public abstract void prepare() uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected abstract void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader"
  },
  "api/graphics.postprocess.PostProcessStep.Target.html": {
    "href": "api/graphics.postprocess.PostProcessStep.Target.html",
    "title": "Enum PostProcessStep.Target",
    "keywords": "Enum PostProcessStep.Target Enum to show where to render. Framebuffer gets constructed based on this. Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum PostProcessStep.Target extends Enum<PostProcessStep.Target> Fields Name Description DEFAULT_FRAMEBUFFER ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER ONE_COLOR_TEXTURE_FRAMEBUFFER createFramebuffer Methods Name Description valueOf(String name) values()"
  },
  "api/graphics.postprocess.VerticalBlur.html": {
    "href": "api/graphics.postprocess.VerticalBlur.html",
    "title": "Class VerticalBlur",
    "keywords": "Class VerticalBlur A Post Processing Step that renders the texture with a Vertical Blur. NOTE: If you want a more blurry texture, consider using Target.ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER to get a smaller framebuffer size and in turn, a more blurrier texture Inheritance java.lang.Object PostProcessStep VerticalBlur Inherited Members PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class VerticalBlur extends PostProcessStep Constructors VerticalBlur(PostProcessStep.Target target) Default Constructor Declaration public VerticalBlur(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTexture(Texture texture) Set the input texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture input texture uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/graphics.postprocess.WeightedCombine.html": {
    "href": "api/graphics.postprocess.WeightedCombine.html",
    "title": "Class WeightedCombine",
    "keywords": "Class WeightedCombine A Post Processing Step that combines two textures multiplying them with corresponding weights and then adding them Inheritance java.lang.Object PostProcessStep WeightedCombine Inherited Members PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class WeightedCombine extends PostProcessStep Constructors WeightedCombine(PostProcessStep.Target target) Default Constructor Declaration public WeightedCombine(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTextureA(Texture texture) Set the input texture A's id Declaration public void setTextureA(Texture texture) Parameters Type Name Description Texture texture input texture setTextureB(Texture texture) Set the input texture B's id Declaration public void setTextureB(Texture texture) Parameters Type Name Description Texture texture input texture setWeightA(float weightA) Set the input texture A's weight Declaration public void setWeightA(float weightA) Parameters Type Name Description float weightA input weight setWeightB(float weightB) Set the input texture B's weight Declaration public void setWeightB(float weightB) Parameters Type Name Description float weightB input weight uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/graphics.Primitive.html": {
    "href": "api/graphics.Primitive.html",
    "title": "Enum Primitive",
    "keywords": "Enum Primitive A primitive is a simple shape that contains all the information necessary to prepare an element buffer of that primitive's type. The primitives available are: Quadrilateral Line Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum Primitive extends Enum<Primitive> Fields Name Description LINE QUAD elementCount Number of elements in the primitive elementCreation Puts index data in the provided int buffer openglPrimitive Primitive ID that opengl expects vertexCount Number of vertices in the primitive Methods Name Description valueOf(String name) values()"
  },
  "api/graphics.renderer.DebugRenderer.html": {
    "href": "api/graphics.renderer.DebugRenderer.html",
    "title": "Class DebugRenderer",
    "keywords": "Class DebugRenderer Used to render debug materials, like collision hitboxes, raycasts, or test data in general. Only supports rendering lines. Inheritance java.lang.Object Renderer DebugRenderer Inherited Members Renderer.add(GameObject) Renderer.clean() Renderer.createBatch(int) Renderer.createFramebuffer() Renderer.createShader() Renderer.fetchColorAttachment(int) Renderer.getAvailableBatch(Texture,int) Renderer.init() Renderer.prepare() Renderer.rebuffer() Renderer.remove(GameObject) Renderer.render() Renderer.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class DebugRenderer extends Renderer Constructors DebugRenderer() Declaration public DebugRenderer() Methods add(GameObject gameObject) Add a gameObject to this renderer Declaration public void add(GameObject gameObject) Parameters Type Name Description GameObject gameObject the gameObject Overrides Renderer.add(GameObject gameObject) createBatch(int zIndex) Create a new Batch with appropriate parameters Declaration protected RenderBatch createBatch(int zIndex) Parameters Type Name Description int zIndex Returns Type Description RenderBatch a new batch Overrides Renderer.createBatch(int zIndex) createFramebuffer() Create a framebuffer Declaration protected Framebuffer createFramebuffer() Returns Type Description Framebuffer the created fbo Overrides Renderer.createFramebuffer() createShader() Create a shader Declaration protected Shader createShader() Returns Type Description Shader the created shader Overrides Renderer.createShader() prepare() Prepare for rendering. Do anything like setting background here. Declaration protected void prepare() Overrides Renderer.prepare() rebuffer() Rebuffer all the data into batches Declaration protected void rebuffer() Overrides Renderer.rebuffer() remove(GameObject gameObject) Remove a gameObject from this renderer Declaration public void remove(GameObject gameObject) Parameters Type Name Description GameObject gameObject the gameObject Overrides Renderer.remove(GameObject gameObject) uploadUniforms(Shader shader) Upload the required uniforms Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader the shader Overrides Renderer.uploadUniforms(Shader shader)"
  },
  "api/graphics.renderer.DefaultRenderer.html": {
    "href": "api/graphics.renderer.DefaultRenderer.html",
    "title": "Class DefaultRenderer",
    "keywords": "Class DefaultRenderer Used to render sprites, which are rendered as Primitive.QUAD s with textures. This should be used to render any renderable gameObject . Inheritance java.lang.Object Renderer DefaultRenderer Inherited Members Renderer.add(GameObject) Renderer.clean() Renderer.createBatch(int) Renderer.createFramebuffer() Renderer.createShader() Renderer.fetchColorAttachment(int) Renderer.getAvailableBatch(Texture,int) Renderer.init() Renderer.prepare() Renderer.rebuffer() Renderer.remove(GameObject) Renderer.render() Renderer.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class DefaultRenderer extends Renderer Constructors DefaultRenderer() Declaration public DefaultRenderer() Methods add(GameObject gameObject) Add a gameObject to this renderer Declaration public void add(GameObject gameObject) Parameters Type Name Description GameObject gameObject the GameObject with renderable components Overrides Renderer.add(GameObject gameObject) createBatch(int zIndex) Create a new Batch with appropriate parameters Declaration protected RenderBatch createBatch(int zIndex) Parameters Type Name Description int zIndex Returns Type Description RenderBatch a new batch Overrides Renderer.createBatch(int zIndex) createFramebuffer() Create a framebuffer Declaration protected Framebuffer createFramebuffer() Returns Type Description Framebuffer the created Framebuffer Overrides Renderer.createFramebuffer() createShader() Create a shader Declaration protected Shader createShader() Returns Type Description Shader the created shader Overrides Renderer.createShader() prepare() Prepare for rendering. Do anything like setting background here. Declaration protected void prepare() Overrides Renderer.prepare() rebuffer() Rebuffer all the data into batches Declaration protected void rebuffer() Overrides Renderer.rebuffer() remove(GameObject gameObject) Remove a gameObject from this renderer Declaration public void remove(GameObject gameObject) Parameters Type Name Description GameObject gameObject the GameObject with renderable components Overrides Renderer.remove(GameObject gameObject) uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader the shader Overrides Renderer.uploadUniforms(Shader shader)"
  },
  "api/graphics.renderer.html": {
    "href": "api/graphics.renderer.html",
    "title": "Namespace graphics.renderer",
    "keywords": "Namespace graphics.renderer Classes DebugRenderer Used to render debug materials, like collision hitboxes, raycasts, or test data in general. Only supports rendering lines. DefaultRenderer Used to render sprites, which are rendered as Primitive.QUAD s with textures. This should be used to render any renderable gameObject . LightmapRenderer RenderBatch A render batch is a collection of elements that are \"batched\" together into a single object. This objects conglomerates the vertex data associated with a specified primitive and prepares it to be rendered by it's associated renderer. The pipeline of a RenderBatch object is as follows: The RenderBatch class is extended by another class intended to be a batch of a certain primitive; for this example let's say it's a quadrilateral. The Renderer class is extended by a class intended to render the aforementioned quadrilateral render batch, where the type parameter is specified as our RenderBatch . Now that all classes are set up, a quadrilateral render batch is created, and several quadrilateral vertices are loaded into its data field via an overloaded loadVertexProperties function (which specifies if the quads will have color, what texture they would use, etc.) This is also when element indices are created, which specify in what order the GPU should process/render vertices. This data is then submitted to the GPU, any associated metadata about the vertices and the quads are rendered. Of course, one doesn't necessarily have to use quads for rendering; one could get as inventive as they'd like. The graphics.renderer API pre-specifies some useful renderers (hopefully so that most developers don't have to make their own renderers.) Renderer A renderer is responsible for taking collected data of a specified type, formatting it for a selected shader, and rendering it. Every renderer has an associated RenderBatch to render. The pipeline for processing the metadata of a render batch and drawing batched data is as follows: The Renderer class is extended by another class specified to render a certain type of data batch; for the sake of example, let's use a quadrilateral render batch. A shader is also created with the same vertex properties specified in the render batch. A Shader object is then created, encapsulating the uniform s and layout s of the shader's source code. It is then attached to this renderer. Based on the uniform s of the shader, various bits of data is submitted to the GPU, like camera position, pointlight position, etc. After shader parsing and handling, the data is rendered. A renderer also specifies a framebuffer , which acts as, well, a buffer which GPU pixel data is stored in to be drawn all at once on the monitor. TextRenderer UIRenderer Used to render sprites, which are rendered as Primitive.QUAD s with textures. This should be used to render any renderable gameObject ."
  },
  "api/graphics.renderer.LightmapRenderer.html": {
    "href": "api/graphics.renderer.LightmapRenderer.html",
    "title": "Class LightmapRenderer",
    "keywords": "Class LightmapRenderer Inheritance java.lang.Object Renderer LightmapRenderer Inherited Members Renderer.add(GameObject) Renderer.clean() Renderer.createBatch(int) Renderer.createFramebuffer() Renderer.createShader() Renderer.fetchColorAttachment(int) Renderer.getAvailableBatch(Texture,int) Renderer.init() Renderer.prepare() Renderer.rebuffer() Renderer.remove(GameObject) Renderer.render() Renderer.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class LightmapRenderer extends Renderer Constructors LightmapRenderer() Declaration public LightmapRenderer() Methods add(GameObject gameObject) Add a gameObject to this renderer Declaration public void add(GameObject gameObject) Parameters Type Name Description GameObject gameObject the GameObject with renderable components Overrides Renderer.add(GameObject gameObject) bindLightmap() Declaration public void bindLightmap() createBatch(int zIndex) Create a new Batch with appropriate parameters Declaration protected RenderBatch createBatch(int zIndex) Parameters Type Name Description int zIndex Returns Type Description RenderBatch a new batch Overrides Renderer.createBatch(int zIndex) createFramebuffer() Create a framebuffer Declaration protected Framebuffer createFramebuffer() Returns Type Description Framebuffer the created Framebuffer Overrides Renderer.createFramebuffer() createShader() Create a shader Declaration protected Shader createShader() Returns Type Description Shader the created shader Overrides Renderer.createShader() init() Creates the renderer's shader and framebuffer Declaration public void init() Overrides Renderer.init() prepare() Prepare for rendering. Do anything like setting background here. Declaration protected void prepare() Overrides Renderer.prepare() rebuffer() Rebuffer all the data into batches Declaration protected void rebuffer() Overrides Renderer.rebuffer() remove(GameObject gameObject) Remove a gameObject from this renderer Declaration public void remove(GameObject gameObject) Parameters Type Name Description GameObject gameObject the GameObject with renderable components Overrides Renderer.remove(GameObject gameObject) uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader the shader Overrides Renderer.uploadUniforms(Shader shader)"
  },
  "api/graphics.renderer.RenderBatch.html": {
    "href": "api/graphics.renderer.RenderBatch.html",
    "title": "Class RenderBatch",
    "keywords": "Class RenderBatch A render batch is a collection of elements that are \"batched\" together into a single object. This objects conglomerates the vertex data associated with a specified primitive and prepares it to be rendered by it's associated renderer. The pipeline of a RenderBatch object is as follows: The RenderBatch class is extended by another class intended to be a batch of a certain primitive; for this example let's say it's a quadrilateral. The Renderer class is extended by a class intended to render the aforementioned quadrilateral render batch, where the type parameter is specified as our RenderBatch . Now that all classes are set up, a quadrilateral render batch is created, and several quadrilateral vertices are loaded into its data field via an overloaded loadVertexProperties function (which specifies if the quads will have color, what texture they would use, etc.) This is also when element indices are created, which specify in what order the GPU should process/render vertices. This data is then submitted to the GPU, any associated metadata about the vertices and the quads are rendered. Of course, one doesn't necessarily have to use quads for rendering; one could get as inventive as they'd like. The graphics.renderer API pre-specifies some useful renderers (hopefully so that most developers don't have to make their own renderers.) Inheritance java.lang.Object RenderBatch Implements java.lang.Comparable<graphics.renderer.RenderBatch> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class RenderBatch implements Comparable<RenderBatch> Constructors RenderBatch(int maxBatchSize, int zIndex, Primitive primitive, ShaderDatatype[] attributes) Declaration public RenderBatch(int maxBatchSize, int zIndex, Primitive primitive, ShaderDatatype[] attributes) Parameters Type Name Description int maxBatchSize the maximum number of primitives in a batch int zIndex the zIndex of the batch. Used to sort the batches in order of which sprites appear above others. Primitive primitive the primitive ShaderDatatype [] attributes attributes for the Vertex array Fields data The data which is uploaded to the GPU Declaration protected float[] data Field Value Type Description float [] dataOffset The internal data offset Declaration protected int dataOffset Field Value Type Description int isFull Is this batch full due to filled up geometry Declaration public boolean isFull Field Value Type Description boolean isFull_Textures Is this batch full due to having 8 textures occupied already Declaration public boolean isFull_Textures Field Value Type Description boolean maxBatchSize Max number of primitives a batch can hold Declaration protected final int maxBatchSize Field Value Type Description int primitive The primitive that this batch draws Declaration public final Primitive primitive Field Value Type Description Primitive primitiveVertices Vertices of one primitive Declaration protected float[] primitiveVertices Field Value Type Description float [] textures The List of submitted textures Declaration protected List<Texture> textures Field Value Type Description java.util.List < Texture > vao Vertex Array id Declaration protected int vao Field Value Type Description int vbo Vertex Buffer id Declaration protected int vbo Field Value Type Description int vertexCount How many floats/ints in a single vertex Declaration protected int vertexCount Field Value Type Description int vertexSize How many bytes for a single vertex Declaration protected int vertexSize Field Value Type Description int Methods addTexture(Texture texture) Add a texture to this batch Declaration public int addTexture(Texture texture) Parameters Type Name Description Texture texture the texture to be rendered Returns Type Description int the index at which texture is placed. The texture will be bound to this texture slot. Hence, set the texture attribute to this value. bind() Binds the vertex array and all the textures to the required slots Declaration public void bind() compareTo(RenderBatch a) Declaration public int compareTo(RenderBatch a) Parameters Type Name Description a Returns Type Description int delete() Delete the vertex array, vertex buffer and index buffer (element buffer) Declaration public void delete() finish() Finish setting batch data. upload to gpu Declaration public void finish() getVertexCount() Get the number of vertices to be drawn Declaration public int getVertexCount() Returns Type Description int the number of vertices to be drawn hasTexture(Texture tex) Declaration public boolean hasTexture(Texture tex) Parameters Type Name Description Texture tex Returns Type Description boolean init() Create the GPU resources. Generates a vao, a dynamic vbo, and a static buffer of indices. Declaration public void init() pushColor(Color c) Push four floats to the data array Declaration public void pushColor(Color c) Parameters Type Name Description Color c the color pushFloat(float f) Push a float to the data array Declaration public void pushFloat(float f) Parameters Type Name Description float f the value pushInt(int i) Push an int to the data array Declaration public void pushInt(int i) Parameters Type Name Description int i the value pushVec2(float x, float y) Push two floats to the data array Declaration public void pushVec2(float x, float y) Parameters Type Name Description float x x value float y y value pushVec2(Vector2f v) Push two floats to the data array Declaration public void pushVec2(Vector2f v) Parameters Type Name Description org.joml.Vector2f v the 2d vector pushVec3(float x, float y, float z) Push three floats to the data array Declaration public void pushVec3(float x, float y, float z) Parameters Type Name Description float x x value float y y value float z z value pushVec3(Vector3f v) Push three floats to the data array Declaration public void pushVec3(Vector3f v) Parameters Type Name Description org.joml.Vector3f v the 3d vector pushVec4(float x, float y, float z, float w) Push four floats to the data array Declaration public void pushVec4(float x, float y, float z, float w) Parameters Type Name Description float x x value float y y value float z z value float w w value pushVec4(Vector4f v) Push four floats to the data array Declaration public void pushVec4(Vector4f v) Parameters Type Name Description org.joml.Vector4f v the 4d vector start() Get batch ready for submission of data Declaration public void start() unbind() Declaration public void unbind() zIndex() Declaration public int zIndex() Returns Type Description int Implements java.lang.Comparable<graphics.renderer.RenderBatch>"
  },
  "api/graphics.renderer.Renderer.html": {
    "href": "api/graphics.renderer.Renderer.html",
    "title": "Class Renderer",
    "keywords": "Class Renderer A renderer is responsible for taking collected data of a specified type, formatting it for a selected shader, and rendering it. Every renderer has an associated RenderBatch to render. The pipeline for processing the metadata of a render batch and drawing batched data is as follows: The Renderer class is extended by another class specified to render a certain type of data batch; for the sake of example, let's use a quadrilateral render batch. A shader is also created with the same vertex properties specified in the render batch. A Shader object is then created, encapsulating the uniform s and layout s of the shader's source code. It is then attached to this renderer. Based on the uniform s of the shader, various bits of data is submitted to the GPU, like camera position, pointlight position, etc. After shader parsing and handling, the data is rendered. A renderer also specifies a framebuffer , which acts as, well, a buffer which GPU pixel data is stored in to be drawn all at once on the monitor. Inheritance java.lang.Object Renderer Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class Renderer Constructors Renderer() Declaration public Renderer() Fields batches A list of batches Declaration protected final List<RenderBatch> batches Field Value Type Description java.util.List < RenderBatch > framebuffer Framebuffer to which this renderer will render Declaration public Framebuffer framebuffer Field Value Type Description Framebuffer noRebuffer Declaration protected boolean noRebuffer Field Value Type Description boolean textureSlots Texture slots to be uploaded to the shader. You don't have to upload them in your custom renderer. Declaration protected final int[] textureSlots Field Value Type Description int [] Methods add(GameObject gameObject) Add a gameObject to the renderer, and if it contains a component that affects rendering, like a sprite or light, those are added to a batch. Declaration public void add(GameObject gameObject) Parameters Type Name Description GameObject gameObject the GameObject with renderable components clean() Delete all the Batches. Declaration public void clean() createBatch(int zIndex) Create a new Batch with appropriate parameters Declaration protected abstract RenderBatch createBatch(int zIndex) Parameters Type Name Description int zIndex Returns Type Description RenderBatch a new batch createFramebuffer() Create a framebuffer Declaration protected abstract Framebuffer createFramebuffer() Returns Type Description Framebuffer the created fbo createShader() Create a shader Declaration protected abstract Shader createShader() Returns Type Description Shader the created shader fetchColorAttachment(int index) Get a color attachment texture from the framebuffer Declaration public Texture fetchColorAttachment(int index) Parameters Type Name Description int index index of the required color attachment texture. Will return -1 if there is no attachment at that index. Returns Type Description Texture the texture ID of the attachment getAvailableBatch(Texture texture, int reqdZ) Get the batch in which the current data can be submitted Has to be called PER PRIMITIVE SUBMISSION Declaration public RenderBatch getAvailableBatch(Texture texture, int reqdZ) Parameters Type Name Description Texture texture int reqdZ Returns Type Description RenderBatch init() Creates the renderer's shader and framebuffer Declaration public void init() prepare() Prepare for rendering. Do anything like setting background here. Declaration protected abstract void prepare() rebuffer() Rebuffer all the data into batches Declaration protected abstract void rebuffer() remove(GameObject gameObject) Remove a gameObject from the renderer if it contains the component that gets rendered. Declaration public void remove(GameObject gameObject) Parameters Type Name Description GameObject gameObject the GameObject with renderable componentsl render() Loop through all render batches and render them Declaration public void render() uploadUniforms(Shader shader) Upload the required uniforms Declaration protected abstract void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader the shader"
  },
  "api/graphics.renderer.TextRenderer.html": {
    "href": "api/graphics.renderer.TextRenderer.html",
    "title": "Class TextRenderer",
    "keywords": "Class TextRenderer Inheritance java.lang.Object Renderer TextRenderer Inherited Members Renderer.add(GameObject) Renderer.clean() Renderer.createBatch(int) Renderer.createFramebuffer() Renderer.createShader() Renderer.fetchColorAttachment(int) Renderer.getAvailableBatch(Texture,int) Renderer.init() Renderer.prepare() Renderer.rebuffer() Renderer.remove(GameObject) Renderer.render() Renderer.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class TextRenderer extends Renderer Constructors TextRenderer() Declaration public TextRenderer() Methods add(Text textObject) Add a Text object to this renderer Declaration public void add(Text textObject) Parameters Type Name Description Text textObject the Text with renderable glyphs createBatch(int zIndex) Create a new Batch with appropriate parameters Declaration protected RenderBatch createBatch(int zIndex) Parameters Type Name Description int zIndex Returns Type Description RenderBatch a new batch Overrides Renderer.createBatch(int zIndex) createFramebuffer() Create a framebuffer Declaration protected Framebuffer createFramebuffer() Returns Type Description Framebuffer the created Framebuffer Overrides Renderer.createFramebuffer() createShader() Create a shader Declaration protected Shader createShader() Returns Type Description Shader the created shader Overrides Renderer.createShader() getMaxBatchSize() Declaration public static int getMaxBatchSize() Returns Type Description int prepare() Prepare for rendering. Do anything like setting background here. Declaration protected void prepare() Overrides Renderer.prepare() rebuffer() Rebuffer all the data into batches Declaration protected void rebuffer() Overrides Renderer.rebuffer() remove(Text text) Declaration public void remove(Text text) Parameters Type Name Description Text text render() Loop through all render batches and render them Declaration public void render() Overrides Renderer.render() uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader the shader Overrides Renderer.uploadUniforms(Shader shader)"
  },
  "api/graphics.renderer.UIRenderer.html": {
    "href": "api/graphics.renderer.UIRenderer.html",
    "title": "Class UIRenderer",
    "keywords": "Class UIRenderer Used to render sprites, which are rendered as Primitive.QUAD s with textures. This should be used to render any renderable gameObject . Inheritance java.lang.Object Renderer UIRenderer Inherited Members Renderer.add(GameObject) Renderer.clean() Renderer.createBatch(int) Renderer.createFramebuffer() Renderer.createShader() Renderer.fetchColorAttachment(int) Renderer.getAvailableBatch(Texture,int) Renderer.init() Renderer.prepare() Renderer.rebuffer() Renderer.remove(GameObject) Renderer.render() Renderer.uploadUniforms(Shader) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class UIRenderer extends Renderer Constructors UIRenderer() Declaration public UIRenderer() Methods add(RenderableElement e) Declaration public void add(RenderableElement e) Parameters Type Name Description RenderableElement e UI ElementRenderer addElementRenderer(RenderableElement elementRenderer) Adds the ElementRenderer to a single batch, and creates a new batch if their is no space. Declaration protected void addElementRenderer(RenderableElement elementRenderer) Parameters Type Name Description RenderableElement elementRenderer elementRenderer: The ElementRenderer to be added to a batch createBatch(int zIndex) Create a new Batch with appropriate parameters Declaration protected RenderBatch createBatch(int zIndex) Parameters Type Name Description int zIndex Returns Type Description RenderBatch Overrides Renderer.createBatch(int zIndex) createFramebuffer() Create a framebuffer Declaration protected Framebuffer createFramebuffer() Returns Type Description Framebuffer the created Framebuffer Overrides Renderer.createFramebuffer() createShader() Create a shader Declaration protected Shader createShader() Returns Type Description Shader the created shader Overrides Renderer.createShader() prepare() Prepare for rendering. Do anything like setting background here. Declaration protected void prepare() Overrides Renderer.prepare() rebuffer() Rebuffer all the data into batches Declaration protected void rebuffer() Overrides Renderer.rebuffer() remove(RenderableElement r) Remove an ElementRenderer from this renderer Declaration public void remove(RenderableElement r) Parameters Type Name Description RenderableElement r ElementRenderer uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader the shader Overrides Renderer.uploadUniforms(Shader shader)"
  },
  "api/graphics.Shader.html": {
    "href": "api/graphics.Shader.html",
    "title": "Class Shader",
    "keywords": "Class Shader Inheritance java.lang.Object Shader Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Shader Constructors Shader(String filePath) Loads the shader file at filepath. The shader file should have both shaders. Vertex Shader and fragment shader. #type should be used to separate them. Declaration public Shader(String filePath) Parameters Type Name Description java.lang.String filePath Fields fragmentID Fragment Shader ID Declaration public static int fragmentID Field Value Type Description int vertexID Vertex Shader ID Declaration public static int vertexID Field Value Type Description int Methods attach() Bind the shader program Declaration public void attach() compile() Creates vertex and fragment shader objects and compiles them. Also links them with the shader program Declaration public void compile() detach() Unbind the shader program Declaration public void detach() uploadFloat(String varName, float val) Upload a float to the gpu Declaration public void uploadFloat(String varName, float val) Parameters Type Name Description java.lang.String varName name of the uniform float val the float value to be uploaded uploadFloatArray(String varName, float[] array) Upload a float array to the gpu Declaration public void uploadFloatArray(String varName, float[] array) Parameters Type Name Description java.lang.String varName name of the uniform float [] array the array to be uploaded uploadInt(String varName, int val) Upload an int to the gpu Declaration public void uploadInt(String varName, int val) Parameters Type Name Description java.lang.String varName name of the uniform int val the int value to be uploaded uploadIntArray(String varName, int[] array) Upload a int array to the gpu Declaration public void uploadIntArray(String varName, int[] array) Parameters Type Name Description java.lang.String varName name of the uniform int [] array the array to be uploaded uploadMat3f(String varName, Matrix3f mat3) Upload a 3x3 Matrix to the gpu Declaration public void uploadMat3f(String varName, Matrix3f mat3) Parameters Type Name Description java.lang.String varName name of the uniform org.joml.Matrix3f mat3 the matrix to be uploaded uploadMat4f(String varName, Matrix4f mat4) Upload a 4x4 Matrix to the gpu Declaration public void uploadMat4f(String varName, Matrix4f mat4) Parameters Type Name Description java.lang.String varName name of the uniform org.joml.Matrix4f mat4 the matrix to be uploaded uploadTexture(String varName, int slot) Upload a integer texture sampler to the gpu Declaration public void uploadTexture(String varName, int slot) Parameters Type Name Description java.lang.String varName name of the uniform int slot the texture slot to which the texture is bound uploadVec2f(String varName, Vector2f vec) Upload a 2-d Vector to the gpu Declaration public void uploadVec2f(String varName, Vector2f vec) Parameters Type Name Description java.lang.String varName name of the uniform org.joml.Vector2f vec the vector to be uploaded uploadVec2fArray(String varName, Vector2f[] vec) Upload a 2-d Vector array to the gpu Declaration public void uploadVec2fArray(String varName, Vector2f[] vec) Parameters Type Name Description java.lang.String varName name of the uniform org.joml.Vector2f [] vec the array to be uploaded uploadVec3fArray(String varName, Vector3f[] vec) Upload a 3-d Vector array to the gpu Declaration public void uploadVec3fArray(String varName, Vector3f[] vec) Parameters Type Name Description java.lang.String varName name of the uniform org.joml.Vector3f [] vec the array to be uploaded uploadVec4f(String varName, Vector4f vec) Upload a 4-d Vector to the gpu Declaration public void uploadVec4f(String varName, Vector4f vec) Parameters Type Name Description java.lang.String varName name of the uniform org.joml.Vector4f vec the vector to be uploaded"
  },
  "api/graphics.ShaderDatatype.html": {
    "href": "api/graphics.ShaderDatatype.html",
    "title": "Enum ShaderDatatype",
    "keywords": "Enum ShaderDatatype Represents a datatype in GLSL Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum ShaderDatatype extends Enum<ShaderDatatype> Fields Name Description FLOAT FLOAT2 FLOAT3 FLOAT4 INT INT2 INT3 INT4 MAT3 MAT4 count Number of FLOATS or INTS openglType OpenGL expected type size Number of bytes Methods Name Description valueOf(String name) values()"
  },
  "api/graphics.Sprite.html": {
    "href": "api/graphics.Sprite.html",
    "title": "Class Sprite",
    "keywords": "Class Sprite Contains the texture and UV coordinates used by openGL to render an image Inheritance java.lang.Object Sprite Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Sprite Constructors Sprite(Texture texture) Construct a texture using default texture coordinates. Declaration public Sprite(Texture texture) Parameters Type Name Description Texture texture The texture for this sprite Sprite(Texture texture, Vector2f[] uv) Construct a Sprite using custom texture coordinates (uv). Declaration public Sprite(Texture texture, Vector2f[] uv) Parameters Type Name Description Texture texture The texture for this sprite org.joml.Vector2f [] uv The sprite's texture coords Fields texture The texture for this sprite Declaration protected Texture texture Field Value Type Description Texture Methods getHeight() Get the height of the Sprite Declaration public float getHeight() Returns Type Description float getTexture() Get this sprite's texture Declaration public Texture getTexture() Returns Type Description Texture getTextureCoordinates() Get this sprite's texture coordinates Declaration public Vector2f[] getTextureCoordinates() Returns Type Description org.joml.Vector2f [] getTextureID() Get the texture id of this sprite Declaration public int getTextureID() Returns Type Description int getWidth() Get the width of the Sprite Declaration public float getWidth() Returns Type Description float setTexture(Texture texture) Set this sprite's texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture"
  },
  "api/graphics.Spritesheet.html": {
    "href": "api/graphics.Spritesheet.html",
    "title": "Class Spritesheet",
    "keywords": "Class Spritesheet Inheritance java.lang.Object Spritesheet Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Spritesheet Constructors Spritesheet(Texture texture, int spriteWidth, int spriteHeight, int numSprites, int spacing) Takes a texture, sprite width, height, number of sprites and the pixel spacing between sprites (if applicable), and adds each sprite in the sheet to a List. Declaration public Spritesheet(Texture texture, int spriteWidth, int spriteHeight, int numSprites, int spacing) Parameters Type Name Description Texture texture int spriteWidth int spriteHeight int numSprites int spacing Methods getSize() Returns the integer size of the List of Sprites Declaration public int getSize() Returns Type Description int int size getSprite(int index) Return a single sprite by passing it's index in the sprite list Declaration public Sprite getSprite(int index) Parameters Type Name Description int index of the sprite Returns Type Description Sprite Sprite getSprites() Declaration public List<Sprite> getSprites() Returns Type Description java.util.List < Sprite > entire list of sprites contained in Spritesheet"
  },
  "api/graphics.Texture.html": {
    "href": "api/graphics.Texture.html",
    "title": "Class Texture",
    "keywords": "Class Texture This is a class for an OpenGL texture Inheritance java.lang.Object Texture Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Texture Constructors Texture() Declaration public Texture() Texture(int width, int height, TextureSpec spec) Declaration public Texture(int width, int height, TextureSpec spec) Parameters Type Name Description int width int height TextureSpec spec Texture(String filepath) Load a Texture from a filepath. Recommended to use Assets.loadTexture instead of calling this function Declaration public Texture(String filepath) Parameters Type Name Description java.lang.String filepath filepath of the texture Methods bind() Bind this texture to the currently active texture slot Declaration public void bind() bindToSlot(int unit) Bind this texture to a specific texture slot Declaration public void bindToSlot(int unit) Parameters Type Name Description int unit the texture unit to bind this texture to createTexture(int width, int height, ByteBuffer data) Creates a texture with specified width, height and data. Declaration public Texture createTexture(int width, int height, ByteBuffer data) Parameters Type Name Description int width Width of the texture int height Height of the texture java.nio.ByteBuffer data Picture Data in RGBA format Returns Type Description Texture from the specified data delete() Declaration public void delete() getFilePath() The filepath from which this texture was loaded. Will return \"==== Wrapper ====\" if it is just a wrapper around an id. Declaration public String getFilePath() Returns Type Description java.lang.String filepath from which the texture was loaded getHeight() Get This texture's height. Will be -1 if the instance is just a wrapper Declaration public int getHeight() Returns Type Description int the height of the texture getTextureID() Get the texture's id. Declaration public int getTextureID() Returns Type Description int the id of the texture getWidth() Get This texture's width. Will be -1 if the instance is just a wrapper Declaration public int getWidth() Returns Type Description int the width of the texture loadImageInByteBuffer(String path) A Function to return an image in byteBuffer Declaration public ByteBuffer loadImageInByteBuffer(String path) Parameters Type Name Description java.lang.String path the path to the image Returns Type Description java.nio.ByteBuffer the image in byteBuffer setHeight(int height) Declaration public void setHeight(int height) Parameters Type Name Description int height setId(int id) Declaration public void setId(int id) Parameters Type Name Description int id setParameter(int name, int value) Sets a parameter of the texture. Declaration public void setParameter(int name, int value) Parameters Type Name Description int name Name of the parameter int value Value to set setWidth(int width) Declaration public void setWidth(int width) Parameters Type Name Description int width toFile(String file, int id, int width, int height) Will write a OpenGL Texture to the provided file Declaration public static void toFile(String file, int id, int width, int height) Parameters Type Name Description java.lang.String file path where the image is to be stored with extension int id id of the OpenGL Texture Resource int width width of the texture int height height of the texture unbind() Unbind the texture Declaration public void unbind() uploadData(int internalFormat, int width, int height, int format, ByteBuffer data) Uploads image data with specified internal format, width, height and image format. Declaration public void uploadData(int internalFormat, int width, int height, int format, ByteBuffer data) Parameters Type Name Description int internalFormat Internal format of the image data int width Width of the image int height Height of the image int format Format of the image data java.nio.ByteBuffer data Pixel data of the image uploadData(int width, int height, ByteBuffer data) Uploads image data with specified width and height. Declaration public void uploadData(int width, int height, ByteBuffer data) Parameters Type Name Description int width Width of the image int height Height of the image java.nio.ByteBuffer data Pixel data of the image wrap(int id) Wrap the given id into a texture object Declaration public static Texture wrap(int id) Parameters Type Name Description int id the id to be wrapped Returns Type Description the texture instance"
  },
  "api/graphics.Window.html": {
    "href": "api/graphics.Window.html",
    "title": "Class Window",
    "keywords": "Class Window The Window class handles setup of GLFW Inheritance java.lang.Object Window Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Window Constructors Window(int pwidth, int pheight, String ptitle, boolean recalculateProjectionOnResize) Declaration public Window(int pwidth, int pheight, String ptitle, boolean recalculateProjectionOnResize) Parameters Type Name Description int pwidth int pheight java.lang.String ptitle boolean recalculateProjectionOnResize Window(int pwidth, int pheight, String ptitle, boolean fullscreen, float minSceneLighting, boolean recalculateProjectionOnResize) Declaration public Window(int pwidth, int pheight, String ptitle, boolean fullscreen, float minSceneLighting, boolean recalculateProjectionOnResize) Parameters Type Name Description int pwidth int pheight java.lang.String ptitle boolean fullscreen float minSceneLighting boolean recalculateProjectionOnResize Window(int pwidth, int pheight, String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize) Declaration public Window(int pwidth, int pheight, String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize) Parameters Type Name Description int pwidth int pheight java.lang.String ptitle float minSceneLighting boolean recalculateProjectionOnResize Window(String ptitle) Declaration public Window(String ptitle) Parameters Type Name Description java.lang.String ptitle Window(String ptitle, boolean recalculateProjectionOnResize) Declaration public Window(String ptitle, boolean recalculateProjectionOnResize) Parameters Type Name Description java.lang.String ptitle boolean recalculateProjectionOnResize Window(String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize) Declaration public Window(String ptitle, float minSceneLighting, boolean recalculateProjectionOnResize) Parameters Type Name Description java.lang.String ptitle float minSceneLighting boolean recalculateProjectionOnResize Fields instance Declaration public static Window instance Field Value Type Description Methods currentScene() Declaration public Scene currentScene() Returns Type Description Scene getCamera() Declaration public static Camera getCamera() Returns Type Description Camera getFPS() Declaration public float getFPS() Returns Type Description float getHeight() Declaration public static int getHeight() Returns Type Description int getSceneManager() Declaration public SceneManager getSceneManager() Returns Type Description SceneManager getTitle() Declaration public String getTitle() Returns Type Description java.lang.String getWidth() Declaration public static int getWidth() Returns Type Description int glfwWindow() Declaration public static long glfwWindow() Returns Type Description long setIcon(String path) Declaration public void setIcon(String path) Parameters Type Name Description java.lang.String path setTitle(String title) Declaration public void setTitle(String title) Parameters Type Name Description java.lang.String title showWindow() Declaration public void showWindow()"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Azurite API Documentation",
    "keywords": "Azurite API Documentation Select a class from the navigation bar on the left to view its documentation."
  },
  "api/input.Buttons.html": {
    "href": "api/input.Buttons.html",
    "title": "Class Buttons",
    "keywords": "Class Buttons Inheritance java.lang.Object Buttons Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Buttons Constructors Buttons() Declaration public Buttons() Fields AZ_BUTTON_1 Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_1 Field Value Type Description int AZ_BUTTON_2 Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_2 Field Value Type Description int AZ_BUTTON_3 Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_3 Field Value Type Description int AZ_BUTTON_4 Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_4 Field Value Type Description int AZ_BUTTON_5 Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_5 Field Value Type Description int AZ_BUTTON_6 Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_6 Field Value Type Description int AZ_BUTTON_7 Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_7 Field Value Type Description int AZ_BUTTON_8 Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_8 Field Value Type Description int AZ_BUTTON_LAST Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_LAST Field Value Type Description int AZ_BUTTON_LEFT Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_LEFT Field Value Type Description int AZ_BUTTON_MIDDLE Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_MIDDLE Field Value Type Description int AZ_BUTTON_RIGHT Mouse buttons. See mouse button input for how these are used. Declaration public static final int AZ_BUTTON_RIGHT Field Value Type Description int"
  },
  "api/input.Gamepad.html": {
    "href": "api/input.Gamepad.html",
    "title": "Class Gamepad",
    "keywords": "Class Gamepad Class containing everything related to gamepad input. https://github.com/LWJGL/lwjgl3-wiki/wiki/2.6.3-Input-handling-with-GLFW\\#joystick-input Inheritance java.lang.Object Gamepad Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Gamepad Constructors Gamepad() Declaration public Gamepad() Methods axis(int controllerId, int axis) Declaration public static float axis(int controllerId, int axis) Parameters Type Name Description int controllerId An int representing the ID of a gamepad or controller int axis An int representing the axis to be checked. Returns Type Description float Returns a float representing the directional state of the axis. buttonPressed(int controllerId, int button) Declaration public static boolean buttonPressed(int controllerId, int button) Parameters Type Name Description int controllerId An int representing the ID of a gamepad or controller int button An int representing the button to be checked. Returns Type Description boolean Returns a boolean true if the button is pressed, otherwise, it returns false. controllersAvailable() Declaration public static int controllersAvailable() Returns Type Description int Returns an int with the number of connected controllers."
  },
  "api/input.GamepadButtons.html": {
    "href": "api/input.GamepadButtons.html",
    "title": "Class GamepadButtons",
    "keywords": "Class GamepadButtons Contains easy to type references for button codes used by GLFW input. See gamepad for how these are used. Inheritance java.lang.Object GamepadButtons Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class GamepadButtons Constructors GamepadButtons() Declaration public GamepadButtons() Fields GAMEPAD_A Declaration public static final int GAMEPAD_A Field Value Type Description int GAMEPAD_B Declaration public static final int GAMEPAD_B Field Value Type Description int GAMEPAD_BACK Declaration public static final int GAMEPAD_BACK Field Value Type Description int GAMEPAD_CIRCLE Declaration public static final int GAMEPAD_CIRCLE Field Value Type Description int GAMEPAD_CROSS Declaration public static final int GAMEPAD_CROSS Field Value Type Description int GAMEPAD_DPAD_DOWN Declaration public static final int GAMEPAD_DPAD_DOWN Field Value Type Description int GAMEPAD_DPAD_LEFT Declaration public static final int GAMEPAD_DPAD_LEFT Field Value Type Description int GAMEPAD_DPAD_RIGHT Declaration public static final int GAMEPAD_DPAD_RIGHT Field Value Type Description int GAMEPAD_DPAD_UP Declaration public static final int GAMEPAD_DPAD_UP Field Value Type Description int GAMEPAD_GUIDE Declaration public static final int GAMEPAD_GUIDE Field Value Type Description int GAMEPAD_LAST Declaration public static final int GAMEPAD_LAST Field Value Type Description int GAMEPAD_LEFT_BUMPER Declaration public static final int GAMEPAD_LEFT_BUMPER Field Value Type Description int GAMEPAD_LEFT_STICK_HORIZONTAL Declaration public static final int GAMEPAD_LEFT_STICK_HORIZONTAL Field Value Type Description int GAMEPAD_LEFT_STICK_VERTICAL Declaration public static final int GAMEPAD_LEFT_STICK_VERTICAL Field Value Type Description int GAMEPAD_LEFT_THUMB Declaration public static final int GAMEPAD_LEFT_THUMB Field Value Type Description int GAMEPAD_LEFT_TRIGGER Declaration public static final int GAMEPAD_LEFT_TRIGGER Field Value Type Description int GAMEPAD_RIGHT_BUMPER Declaration public static final int GAMEPAD_RIGHT_BUMPER Field Value Type Description int GAMEPAD_RIGHT_STICK_HORIZONTAL Declaration public static final int GAMEPAD_RIGHT_STICK_HORIZONTAL Field Value Type Description int GAMEPAD_RIGHT_STICK_VERITCAL Declaration public static final int GAMEPAD_RIGHT_STICK_VERITCAL Field Value Type Description int GAMEPAD_RIGHT_THUMB Declaration public static final int GAMEPAD_RIGHT_THUMB Field Value Type Description int GAMEPAD_RIGHT_TRIGGER Declaration public static final int GAMEPAD_RIGHT_TRIGGER Field Value Type Description int GAMEPAD_SQUARE Declaration public static final int GAMEPAD_SQUARE Field Value Type Description int GAMEPAD_START Declaration public static final int GAMEPAD_START Field Value Type Description int GAMEPAD_TRIANGLE Declaration public static final int GAMEPAD_TRIANGLE Field Value Type Description int GAMEPAD_X Declaration public static final int GAMEPAD_X Field Value Type Description int GAMEPAD_Y Declaration public static final int GAMEPAD_Y Field Value Type Description int"
  },
  "api/input.html": {
    "href": "api/input.html",
    "title": "Namespace input",
    "keywords": "Namespace input Classes Buttons Gamepad Class containing everything related to gamepad input. https://github.com/LWJGL/lwjgl3-wiki/wiki/2.6.3-Input-handling-with-GLFW\\#joystick-input GamepadButtons Contains easy to type references for button codes used by GLFW input. See gamepad for how these are used. Keyboard Class containing everything related to keyboard input. Implementations of GLFW key callbacks are all found here. getKey, getKeyDown, getKeyUp, etc... Keys Mouse Class containing everything related to mouse input. Mouse position, past mouse position, mouse dragged, mouse clicked, etc."
  },
  "api/input.Keyboard.html": {
    "href": "api/input.Keyboard.html",
    "title": "Class Keyboard",
    "keywords": "Class Keyboard Class containing everything related to keyboard input. Implementations of GLFW key callbacks are all found here. getKey, getKeyDown, getKeyUp, etc... Inheritance java.lang.Object Keyboard Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Keyboard Constructors Keyboard() Declaration public Keyboard() Fields keystateBitfields A bitfield array to store button states. First bit is key down Second bit is key up Third bit is key held Declaration public static byte[] keystateBitfields Field Value Type Description byte [] Methods getKey(int keycode) Declaration public static boolean getKey(int keycode) Parameters Type Name Description int keycode keycode representing the key to be checked Returns Type Description boolean Returns true if the key is currently pressed or held, otherwise returns false getKeyDown(int keycode) Returns true if a key is was just pressed, then returns false until the key is released and pressed again. Declaration public static boolean getKeyDown(int keycode) Parameters Type Name Description int keycode key-code representing the key to be checked. Returns Type Description boolean Returns true if the key was just pressed, otherwise returns false. getKeyHeld(int keycode) Returns true if a key was held. Declaration public static boolean getKeyHeld(int keycode) Parameters Type Name Description int keycode key-code representing the key to be checked. Returns Type Description boolean Returns true if the key was held, otherwise returns false. getKeyUp(int keycode) Returns true if a key was just released. Declaration public static boolean getKeyUp(int keycode) Parameters Type Name Description int keycode key-code representing the key to be checked. Returns Type Description boolean Returns true if the key was just released, otherwise returns false. keyDownOrHold(int keycode) Declaration public static boolean keyDownOrHold(int keycode) Parameters Type Name Description int keycode Returns Type Description boolean setupCallbacks() Subscribes to key event Declaration public static void setupCallbacks()"
  },
  "api/input.Keys.html": {
    "href": "api/input.Keys.html",
    "title": "Class Keys",
    "keywords": "Class Keys Inheritance java.lang.Object Keys Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Keys Constructors Keys() Declaration public Keys() Fields KEY_0 Printable keys. Declaration public static final int KEY_0 Field Value Type Description int KEY_1 Printable keys. Declaration public static final int KEY_1 Field Value Type Description int KEY_2 Printable keys. Declaration public static final int KEY_2 Field Value Type Description int KEY_3 Printable keys. Declaration public static final int KEY_3 Field Value Type Description int KEY_4 Printable keys. Declaration public static final int KEY_4 Field Value Type Description int KEY_5 Printable keys. Declaration public static final int KEY_5 Field Value Type Description int KEY_6 Printable keys. Declaration public static final int KEY_6 Field Value Type Description int KEY_7 Printable keys. Declaration public static final int KEY_7 Field Value Type Description int KEY_8 Printable keys. Declaration public static final int KEY_8 Field Value Type Description int KEY_9 Printable keys. Declaration public static final int KEY_9 Field Value Type Description int KEY_A Printable keys. Declaration public static final int KEY_A Field Value Type Description int KEY_APOSTROPHE Printable keys. Declaration public static final int KEY_APOSTROPHE Field Value Type Description int KEY_B Printable keys. Declaration public static final int KEY_B Field Value Type Description int KEY_BACKSLASH Printable keys. Declaration public static final int KEY_BACKSLASH Field Value Type Description int KEY_BACKSPACE Function keys. Declaration public static final int KEY_BACKSPACE Field Value Type Description int KEY_C Printable keys. Declaration public static final int KEY_C Field Value Type Description int KEY_CAPS_LOCK Function keys. Declaration public static final int KEY_CAPS_LOCK Field Value Type Description int KEY_COMMA Printable keys. Declaration public static final int KEY_COMMA Field Value Type Description int KEY_D Printable keys. Declaration public static final int KEY_D Field Value Type Description int KEY_DELETE Function keys. Declaration public static final int KEY_DELETE Field Value Type Description int KEY_DOWN Function keys. Declaration public static final int KEY_DOWN Field Value Type Description int KEY_E Printable keys. Declaration public static final int KEY_E Field Value Type Description int KEY_END Function keys. Declaration public static final int KEY_END Field Value Type Description int KEY_ENTER Function keys. Declaration public static final int KEY_ENTER Field Value Type Description int KEY_EQUAL Printable keys. Declaration public static final int KEY_EQUAL Field Value Type Description int KEY_ESCAPE Function keys. Declaration public static final int KEY_ESCAPE Field Value Type Description int KEY_F Printable keys. Declaration public static final int KEY_F Field Value Type Description int KEY_F1 Function keys. Declaration public static final int KEY_F1 Field Value Type Description int KEY_F10 Function keys. Declaration public static final int KEY_F10 Field Value Type Description int KEY_F11 Function keys. Declaration public static final int KEY_F11 Field Value Type Description int KEY_F12 Function keys. Declaration public static final int KEY_F12 Field Value Type Description int KEY_F13 Function keys. Declaration public static final int KEY_F13 Field Value Type Description int KEY_F14 Function keys. Declaration public static final int KEY_F14 Field Value Type Description int KEY_F15 Function keys. Declaration public static final int KEY_F15 Field Value Type Description int KEY_F16 Function keys. Declaration public static final int KEY_F16 Field Value Type Description int KEY_F17 Function keys. Declaration public static final int KEY_F17 Field Value Type Description int KEY_F18 Function keys. Declaration public static final int KEY_F18 Field Value Type Description int KEY_F19 Function keys. Declaration public static final int KEY_F19 Field Value Type Description int KEY_F2 Function keys. Declaration public static final int KEY_F2 Field Value Type Description int KEY_F20 Function keys. Declaration public static final int KEY_F20 Field Value Type Description int KEY_F21 Function keys. Declaration public static final int KEY_F21 Field Value Type Description int KEY_F22 Function keys. Declaration public static final int KEY_F22 Field Value Type Description int KEY_F23 Function keys. Declaration public static final int KEY_F23 Field Value Type Description int KEY_F24 Function keys. Declaration public static final int KEY_F24 Field Value Type Description int KEY_F25 Function keys. Declaration public static final int KEY_F25 Field Value Type Description int KEY_F3 Function keys. Declaration public static final int KEY_F3 Field Value Type Description int KEY_F4 Function keys. Declaration public static final int KEY_F4 Field Value Type Description int KEY_F5 Function keys. Declaration public static final int KEY_F5 Field Value Type Description int KEY_F6 Function keys. Declaration public static final int KEY_F6 Field Value Type Description int KEY_F7 Function keys. Declaration public static final int KEY_F7 Field Value Type Description int KEY_F8 Function keys. Declaration public static final int KEY_F8 Field Value Type Description int KEY_F9 Function keys. Declaration public static final int KEY_F9 Field Value Type Description int KEY_G Printable keys. Declaration public static final int KEY_G Field Value Type Description int KEY_GRAVE_ACCENT Printable keys. Declaration public static final int KEY_GRAVE_ACCENT Field Value Type Description int KEY_H Printable keys. Declaration public static final int KEY_H Field Value Type Description int KEY_HOME Function keys. Declaration public static final int KEY_HOME Field Value Type Description int KEY_I Printable keys. Declaration public static final int KEY_I Field Value Type Description int KEY_INSERT Function keys. Declaration public static final int KEY_INSERT Field Value Type Description int KEY_J Printable keys. Declaration public static final int KEY_J Field Value Type Description int KEY_K Printable keys. Declaration public static final int KEY_K Field Value Type Description int KEY_KP_0 Function keys. Declaration public static final int KEY_KP_0 Field Value Type Description int KEY_KP_1 Function keys. Declaration public static final int KEY_KP_1 Field Value Type Description int KEY_KP_2 Function keys. Declaration public static final int KEY_KP_2 Field Value Type Description int KEY_KP_3 Function keys. Declaration public static final int KEY_KP_3 Field Value Type Description int KEY_KP_4 Function keys. Declaration public static final int KEY_KP_4 Field Value Type Description int KEY_KP_5 Function keys. Declaration public static final int KEY_KP_5 Field Value Type Description int KEY_KP_6 Function keys. Declaration public static final int KEY_KP_6 Field Value Type Description int KEY_KP_7 Function keys. Declaration public static final int KEY_KP_7 Field Value Type Description int KEY_KP_8 Function keys. Declaration public static final int KEY_KP_8 Field Value Type Description int KEY_KP_9 Function keys. Declaration public static final int KEY_KP_9 Field Value Type Description int KEY_KP_ADD Function keys. Declaration public static final int KEY_KP_ADD Field Value Type Description int KEY_KP_DECIMAL Function keys. Declaration public static final int KEY_KP_DECIMAL Field Value Type Description int KEY_KP_DIVIDE Function keys. Declaration public static final int KEY_KP_DIVIDE Field Value Type Description int KEY_KP_ENTER Function keys. Declaration public static final int KEY_KP_ENTER Field Value Type Description int KEY_KP_EQUAL Function keys. Declaration public static final int KEY_KP_EQUAL Field Value Type Description int KEY_KP_MULTIPLY Function keys. Declaration public static final int KEY_KP_MULTIPLY Field Value Type Description int KEY_KP_SUBTRACT Function keys. Declaration public static final int KEY_KP_SUBTRACT Field Value Type Description int KEY_L Printable keys. Declaration public static final int KEY_L Field Value Type Description int KEY_LAST Function keys. Declaration public static final int KEY_LAST Field Value Type Description int KEY_LEFT Function keys. Declaration public static final int KEY_LEFT Field Value Type Description int KEY_LEFT_ALT Function keys. Declaration public static final int KEY_LEFT_ALT Field Value Type Description int KEY_LEFT_BRACKET Printable keys. Declaration public static final int KEY_LEFT_BRACKET Field Value Type Description int KEY_LEFT_CONTROL Function keys. Declaration public static final int KEY_LEFT_CONTROL Field Value Type Description int KEY_LEFT_SHIFT Function keys. Declaration public static final int KEY_LEFT_SHIFT Field Value Type Description int KEY_LEFT_SUPER Function keys. Declaration public static final int KEY_LEFT_SUPER Field Value Type Description int KEY_M Printable keys. Declaration public static final int KEY_M Field Value Type Description int KEY_MENU Function keys. Declaration public static final int KEY_MENU Field Value Type Description int KEY_MINUS Printable keys. Declaration public static final int KEY_MINUS Field Value Type Description int KEY_N Printable keys. Declaration public static final int KEY_N Field Value Type Description int KEY_NUM_LOCK Function keys. Declaration public static final int KEY_NUM_LOCK Field Value Type Description int KEY_O Printable keys. Declaration public static final int KEY_O Field Value Type Description int KEY_P Printable keys. Declaration public static final int KEY_P Field Value Type Description int KEY_PAGE_DOWN Function keys. Declaration public static final int KEY_PAGE_DOWN Field Value Type Description int KEY_PAGE_UP Function keys. Declaration public static final int KEY_PAGE_UP Field Value Type Description int KEY_PAUSE Function keys. Declaration public static final int KEY_PAUSE Field Value Type Description int KEY_PERIOD Printable keys. Declaration public static final int KEY_PERIOD Field Value Type Description int KEY_PRINT_SCREEN Function keys. Declaration public static final int KEY_PRINT_SCREEN Field Value Type Description int KEY_Q Printable keys. Declaration public static final int KEY_Q Field Value Type Description int KEY_R Printable keys. Declaration public static final int KEY_R Field Value Type Description int KEY_RIGHT Function keys. Declaration public static final int KEY_RIGHT Field Value Type Description int KEY_RIGHT_ALT Function keys. Declaration public static final int KEY_RIGHT_ALT Field Value Type Description int KEY_RIGHT_BRACKET Printable keys. Declaration public static final int KEY_RIGHT_BRACKET Field Value Type Description int KEY_RIGHT_CONTROL Function keys. Declaration public static final int KEY_RIGHT_CONTROL Field Value Type Description int KEY_RIGHT_SHIFT Function keys. Declaration public static final int KEY_RIGHT_SHIFT Field Value Type Description int KEY_RIGHT_SUPER Function keys. Declaration public static final int KEY_RIGHT_SUPER Field Value Type Description int KEY_S Printable keys. Declaration public static final int KEY_S Field Value Type Description int KEY_SCROLL_LOCK Function keys. Declaration public static final int KEY_SCROLL_LOCK Field Value Type Description int KEY_SEMICOLON Printable keys. Declaration public static final int KEY_SEMICOLON Field Value Type Description int KEY_SLASH Printable keys. Declaration public static final int KEY_SLASH Field Value Type Description int KEY_SPACE Printable keys. Declaration public static final int KEY_SPACE Field Value Type Description int KEY_T Printable keys. Declaration public static final int KEY_T Field Value Type Description int KEY_TAB Function keys. Declaration public static final int KEY_TAB Field Value Type Description int KEY_U Printable keys. Declaration public static final int KEY_U Field Value Type Description int KEY_UP Function keys. Declaration public static final int KEY_UP Field Value Type Description int KEY_V Printable keys. Declaration public static final int KEY_V Field Value Type Description int KEY_W Printable keys. Declaration public static final int KEY_W Field Value Type Description int KEY_WORLD_1 Printable keys. Declaration public static final int KEY_WORLD_1 Field Value Type Description int KEY_WORLD_2 Printable keys. Declaration public static final int KEY_WORLD_2 Field Value Type Description int KEY_X Printable keys. Declaration public static final int KEY_X Field Value Type Description int KEY_Y Printable keys. Declaration public static final int KEY_Y Field Value Type Description int KEY_Z Printable keys. Declaration public static final int KEY_Z Field Value Type Description int MOD_ALT If this bit is set one or more Alt keys were held down. Declaration public static final int MOD_ALT Field Value Type Description int MOD_CAPS_LOCK If this bit is set the Caps Lock key is enabled and the LOCK_KEY_MODS input mode is set. Declaration public static final int MOD_CAPS_LOCK Field Value Type Description int MOD_CONTROL If this bit is set one or more Control keys were held down. Declaration public static final int MOD_CONTROL Field Value Type Description int MOD_NUM_LOCK If this bit is set the Num Lock key is enabled and the LOCK_KEY_MODS input mode is set. Declaration public static final int MOD_NUM_LOCK Field Value Type Description int MOD_SHIFT If this bit is set one or more Shift keys were held down. Declaration public static final int MOD_SHIFT Field Value Type Description int MOD_SUPER If this bit is set one or more Super keys were held down. Declaration public static final int MOD_SUPER Field Value Type Description int"
  },
  "api/input.Mouse.html": {
    "href": "api/input.Mouse.html",
    "title": "Class Mouse",
    "keywords": "Class Mouse Class containing everything related to mouse input. Mouse position, past mouse position, mouse dragged, mouse clicked, etc. Inheritance java.lang.Object Mouse Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Mouse Constructors Mouse() Declaration public Mouse() Fields mouse Position of the mouse Declaration public static Vector2f mouse Field Value Type Description org.joml.Vector2f mouseButton Array for storing states for mouse buttons Declaration public static boolean[] mouseButton Field Value Type Description boolean [] mouseDragged Is the mouse being dragged Declaration public static boolean mouseDragged Field Value Type Description boolean mouseScroll Mouse Scrolling Values Declaration public static Vector2f mouseScroll Field Value Type Description org.joml.Vector2f mouseX X Position of the mouse Declaration public static long mouseX Field Value Type Description long mouseY Y Position of the mouse Declaration public static long mouseY Field Value Type Description long pmouse Position of the mouse on the previous frame Declaration public static Vector2f pmouse Field Value Type Description org.joml.Vector2f pmouseX X Position of the mouse on the previous frame Declaration public static long pmouseX Field Value Type Description long pmouseY Y Position of the mouse on the previous frame Declaration public static long pmouseY Field Value Type Description long scrollX Mouse Scrolling in X-axis. Declaration public static float scrollX Field Value Type Description float scrollY Mouse Scrolling in Y-axis. Declaration public static float scrollY Field Value Type Description float worldMouse Position of the mouse in world space Declaration public static Vector2f worldMouse Field Value Type Description org.joml.Vector2f Methods clearMouseInput() Clear the mouse state Declaration public static void clearMouseInput() get() Declaration public static Vector2f get() Returns Type Description org.joml.Vector2f getWorldX() Declaration public static float getWorldX() Returns Type Description float Get the mouse position in the world getWorldY() Declaration public static float getWorldY() Returns Type Description float Get the mouse position in the world mouseButtonDown(int button) Get if the queried button is pressed Declaration public static boolean mouseButtonDown(int button) Parameters Type Name Description int button The button. Check input/Buttons.java Returns Type Description boolean Returns whether the button is currently pressed. pollMouseButtons() Apply the latest changes to the mouseButton array Declaration public static void pollMouseButtons() setupCallbacks() Subscribes to mouse scroll event and mouse button event Declaration public static void setupCallbacks() update() Called each frame to update mouse button states and mouse position. Declaration public static void update()"
  },
  "api/io.bin.BinaryIO.html": {
    "href": "api/io.bin.BinaryIO.html",
    "title": "Class BinaryIO",
    "keywords": "Class BinaryIO Some small methods to speed up binary file reading and writing Inheritance java.lang.Object BinaryIO Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class BinaryIO Constructors BinaryIO() Declaration public BinaryIO() Methods readData(File file) Reads byte data from a file. Uses Files#readAllBytes(Path) . Declaration public static ByteBuffer readData(File file) Parameters Type Name Description java.io.File file the file to read Returns Type Description java.nio.ByteBuffer a ByteBuffer containing all read bytes Exceptions Type Condition java.io.IOException readData(URL url, int blockSize) Reads data from an URL in the web. It produces a byte array containing all read data from the source with no trailing zeros. Declaration public static ByteBuffer readData(URL url, int blockSize) Parameters Type Name Description java.net.URL url the web url int blockSize the byte blocks that will be requested at once - bigger blocks might improve speed based on connection Returns Type Description java.nio.ByteBuffer a ByteBuffer containing all read bytes Exceptions Type Condition java.io.IOException writeData(File file, byte[] data) Writes raw bytes to a file. There is no check for an existing file. Declaration public static void writeData(File file, byte[] data) Parameters Type Name Description java.io.File file the file to write to byte [] data the data to write Exceptions Type Condition java.io.IOException"
  },
  "api/io.bin.html": {
    "href": "api/io.bin.html",
    "title": "Namespace io.bin",
    "keywords": "Namespace io.bin Classes BinaryIO Some small methods to speed up binary file reading and writing"
  },
  "api/io.FileFormat.html": {
    "href": "api/io.FileFormat.html",
    "title": "Interface FileFormat<T>",
    "keywords": "Interface FileFormat<T> Can contain all tools for parsing a specific file format from text or byte input to an object. Namespace : Assembly : .dll Syntax public interface FileFormat<T> Type Parameters Name Description T Methods parse(byte[] input) Parse all data in the given input bytes by using an encoding that is either defined within the bytes or might be a default one according to the file format. Declaration public abstract T parse(byte[] input) Parameters Type Name Description byte [] input the input bytes Returns Type Description T the parsed object data parse(byte[] input, Charset charset) Parse all data in the given input bytes by using the defined encoding. Declaration public abstract T parse(byte[] input, Charset charset) Parameters Type Name Description byte [] input the input bytes java.nio.charset.Charset charset the charset to read the bytes Returns Type Description T the parsed object data parse(String input) Parse all data in the given string. Usually an java.nio.charset.StandardCharsets#UTF_8 encoding is expected. Declaration public abstract T parse(String input) Parameters Type Name Description java.lang.String input the input string Returns Type Description T the parsed object data"
  },
  "api/io.FileFormats.html": {
    "href": "api/io.FileFormats.html",
    "title": "Class FileFormats",
    "keywords": "Class FileFormats Inheritance java.lang.Object FileFormats Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class FileFormats Constructors FileFormats() Declaration public FileFormats() Fields XML Simple XML format, based on XMLParser and XMLTokenizer . Declaration public static final FileFormat<XMLElement> XML Field Value Type Description FileFormat < XMLElement >"
  },
  "api/io.html": {
    "href": "api/io.html",
    "title": "Namespace io",
    "keywords": "Namespace io Classes FileFormats Parser<T> Tokenizer Interfaces FileFormat<T> Can contain all tools for parsing a specific file format from text or byte input to an object."
  },
  "api/io.json.html": {
    "href": "api/io.json.html",
    "title": "Namespace io.json",
    "keywords": "Namespace io.json Classes JSONConstructor JSONObject"
  },
  "api/io.json.JSONConstructor.html": {
    "href": "api/io.json.JSONConstructor.html",
    "title": "Class JSONConstructor",
    "keywords": "Class JSONConstructor Inheritance java.lang.Object JSONConstructor Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class JSONConstructor Constructors JSONConstructor() Declaration public JSONConstructor() JSONConstructor(JSONObject jsonObject) Declaration public JSONConstructor(JSONObject jsonObject) Parameters Type Name Description JSONObject jsonObject Methods print() Declaration public void print() saveToFile(String filePath) Declaration public void saveToFile(String filePath) Parameters Type Name Description java.lang.String filePath toJSON(Object obj) Declaration public void toJSON(Object obj) Parameters Type Name Description java.lang.Object obj"
  },
  "api/io.json.JSONObject.html": {
    "href": "api/io.json.JSONObject.html",
    "title": "Class JSONObject",
    "keywords": "Class JSONObject Inheritance java.lang.Object JSONObject Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class JSONObject Constructors JSONObject() Declaration public JSONObject() Methods <T>addList(String propertyName, List<T> list, int numTabs, boolean newLine, boolean comma) Declaration public void <T>addList(String propertyName, List<T> list, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName java.util.List < T > list int numTabs boolean newLine boolean comma addArray(String propertyName, boolean[] array, int numTabs, boolean newLine, boolean comma) Declaration public void addArray(String propertyName, boolean[] array, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName boolean [] array int numTabs boolean newLine boolean comma addArray(String propertyName, char[] array, int numTabs, boolean newLine, boolean comma) Declaration public void addArray(String propertyName, char[] array, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName char [] array int numTabs boolean newLine boolean comma addArray(String propertyName, double[] array, int numTabs, boolean newLine, boolean comma) Declaration public void addArray(String propertyName, double[] array, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName double [] array int numTabs boolean newLine boolean comma addArray(String propertyName, float[] array, int numTabs, boolean newLine, boolean comma) Declaration public void addArray(String propertyName, float[] array, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName float [] array int numTabs boolean newLine boolean comma addArray(String propertyName, int[] array, int numTabs, boolean newLine, boolean comma) Declaration public void addArray(String propertyName, int[] array, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName int [] array int numTabs boolean newLine boolean comma addArray(String propertyName, Object[] array, int numTabs, boolean newLine, boolean comma) Declaration public void addArray(String propertyName, Object[] array, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName java.lang.Object [] array int numTabs boolean newLine boolean comma addArray(String propertyName, String[] array, int numTabs, boolean newLine, boolean comma) Declaration public void addArray(String propertyName, String[] array, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName java.lang.String [] array int numTabs boolean newLine boolean comma addObject(String propertyName, Object obj, int numTabs, boolean newLine, boolean comma) Declaration public void addObject(String propertyName, Object obj, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName java.lang.Object obj int numTabs boolean newLine boolean comma addVar(String propertyName, boolean value, int numTabs, boolean newLine, boolean comma) Declaration public void addVar(String propertyName, boolean value, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName boolean value int numTabs boolean newLine boolean comma addVar(String propertyName, char value, int numTabs, boolean newLine, boolean comma) Declaration public void addVar(String propertyName, char value, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName char value int numTabs boolean newLine boolean comma addVar(String propertyName, double value, int numTabs, boolean newLine, boolean comma) Declaration public void addVar(String propertyName, double value, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName double value int numTabs boolean newLine boolean comma addVar(String propertyName, float value, int numTabs, boolean newLine, boolean comma) Declaration public void addVar(String propertyName, float value, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName float value int numTabs boolean newLine boolean comma addVar(String propertyName, int value, int numTabs, boolean newLine, boolean comma) Declaration public void addVar(String propertyName, int value, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName int value int numTabs boolean newLine boolean comma addVar(String propertyName, String value, int numTabs, boolean newLine, boolean comma) Declaration public void addVar(String propertyName, String value, int numTabs, boolean newLine, boolean comma) Parameters Type Name Description java.lang.String propertyName java.lang.String value int numTabs boolean newLine boolean comma endJSON() Declaration public void endJSON() getJSON() Declaration public String getJSON() Returns Type Description java.lang.String startJSON() Declaration public void startJSON()"
  },
  "api/io.Parser.html": {
    "href": "api/io.Parser.html",
    "title": "Class Parser<T>",
    "keywords": "Class Parser<T> Inheritance java.lang.Object Parser<T> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class Parser<T> Type Parameters Name Description T Constructors Parser() Declaration public Parser() Methods check(List<Token> tokens, int pos, TokenReader[] readers) Match a list of tokens at the given position. Starting at pos, executes {@link this#is(List, int, TokenReader)} to test if all tokens are in the right order. Declaration protected boolean check(List<Token> tokens, int pos, TokenReader[] readers) Parameters Type Name Description java.util.List < Token > tokens the list of tokens int pos the position to start matching TokenReader [] readers the expected list of tokens by using their TokenReader#type() Returns Type Description boolean if the token list matches the expected ones. get(List<Token> tokens, int pos) Helper method to get a value in of the token list without going out of bounds. Declaration protected String get(List<Token> tokens, int pos) Parameters Type Name Description java.util.List < Token > tokens the list of tokens int pos the position Returns Type Description java.lang.String the value at the given position in the list or null if the position is out of bounds is(List<Token> tokens, int pos, TokenReader reader) Match a token. Declaration protected boolean is(List<Token> tokens, int pos, TokenReader reader) Parameters Type Name Description java.util.List < Token > tokens the list of tokens int pos the position to match TokenReader reader the expected token to match using its TokenReader#type() Returns Type Description boolean true, if and only if the token list has a token at the given position that matches the given type parse(List<Token> tokens) Parse an object by taking a chronological list of tokens. Declaration public abstract T parse(List<Token> tokens) Parameters Type Name Description java.util.List < Token > tokens the chronological list of tokens Returns Type Description T the parsed object"
  },
  "api/io.token.html": {
    "href": "api/io.token.html",
    "title": "Namespace io.token",
    "keywords": "Namespace io.token Classes RepetitiveTokenReader Token TokenReader TokenStream A handy structure to perform the lexical analysis on a given String . Uses the Scanner class and TokenReader s reading character by character to tokenize an input."
  },
  "api/io.token.RepetitiveTokenReader.html": {
    "href": "api/io.token.RepetitiveTokenReader.html",
    "title": "Class RepetitiveTokenReader",
    "keywords": "Class RepetitiveTokenReader Inheritance java.lang.Object TokenReader RepetitiveTokenReader Inherited Members TokenReader.canRead(Scanner) TokenReader.compareTo(TokenReader) TokenReader.read(Scanner) TokenReader.toString() TokenReader.type() java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class RepetitiveTokenReader extends TokenReader Constructors RepetitiveTokenReader(String targetType, String target, int limit) Declaration public RepetitiveTokenReader(String targetType, String target, int limit) Parameters Type Name Description java.lang.String targetType java.lang.String target int limit RepetitiveTokenReader(String targetType, String pattern, int optionalPrio, int limit) Declaration public RepetitiveTokenReader(String targetType, String pattern, int optionalPrio, int limit) Parameters Type Name Description java.lang.String targetType java.lang.String pattern int optionalPrio int limit Fields NO_LIMIT Declaration public static final int NO_LIMIT Field Value Type Description int limit Declaration protected final int limit Field Value Type Description int Methods read(Scanner scanner) Declaration public Token read(Scanner scanner) Parameters Type Name Description java.util.Scanner scanner Returns Type Description Token Overrides TokenReader.read(Scanner scanner)"
  },
  "api/io.token.Token.html": {
    "href": "api/io.token.Token.html",
    "title": "Class Token",
    "keywords": "Class Token Inheritance java.lang.Object Token Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Token Constructors Token(String type, String value) Declaration public Token(String type, String value) Parameters Type Name Description java.lang.String type java.lang.String value Methods getType() Declaration public String getType() Returns Type Description java.lang.String getValue() Declaration public String getValue() Returns Type Description java.lang.String toString() Declaration public String toString() Returns Type Description java.lang.String Overrides java.lang.Object.toString()"
  },
  "api/io.token.TokenReader.html": {
    "href": "api/io.token.TokenReader.html",
    "title": "Class TokenReader",
    "keywords": "Class TokenReader Inheritance java.lang.Object TokenReader Implements java.lang.Comparable<io.token.TokenReader> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class TokenReader implements Comparable<TokenReader> Constructors TokenReader(String targetType, String target) Declaration public TokenReader(String targetType, String target) Parameters Type Name Description java.lang.String targetType java.lang.String target TokenReader(String targetType, String pattern, int optionalPrio) Declaration public TokenReader(String targetType, String pattern, int optionalPrio) Parameters Type Name Description java.lang.String targetType java.lang.String pattern int optionalPrio Fields optionalPrio Declaration protected final int optionalPrio Field Value Type Description int target Declaration protected final Pattern target Field Value Type Description java.util.regex.Pattern targetType Declaration protected final String targetType Field Value Type Description java.lang.String Methods canRead(Scanner scanner) Declaration public boolean canRead(Scanner scanner) Parameters Type Name Description java.util.Scanner scanner Returns Type Description boolean compareTo(TokenReader o) Declaration public int compareTo(TokenReader o) Parameters Type Name Description o Returns Type Description int read(Scanner scanner) Declaration public Token read(Scanner scanner) Parameters Type Name Description java.util.Scanner scanner Returns Type Description Token toString() Declaration public String toString() Returns Type Description java.lang.String Overrides java.lang.Object.toString() type() Declaration public String type() Returns Type Description java.lang.String Implements java.lang.Comparable<io.token.TokenReader>"
  },
  "api/io.token.TokenStream.html": {
    "href": "api/io.token.TokenStream.html",
    "title": "Class TokenStream",
    "keywords": "Class TokenStream A handy structure to perform the lexical analysis on a given String . Uses the Scanner class and TokenReader s reading character by character to tokenize an input. Inheritance java.lang.Object TokenStream Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class TokenStream Constructors TokenStream(String input) Create a new TokenStream for a given input String . Also creates an empty token history list {@link this#getHistory()} and the Scanner with the single character delimiter. Declaration public TokenStream(String input) Parameters Type Name Description java.lang.String input the input String Methods e(TokenReader reader) Used for {@link this#eatConditionally(TokenReader, Predicate)} to create a predicate. The predicate will match the given readers type with the last token in the history list. This means the predicate passes, if the latest/most recent eaten token is equal to the given one. Declaration public static Predicate<Token> e(TokenReader reader) Parameters Type Name Description TokenReader reader the reader containing the type to match in history Returns Type Description java.util.function.Predicate < Token > whether the most recent token matches the given one - as predicate eat(TokenReader reader) Try to read a token using the given TokenReader based on the current position of the internal Scanner . This method will read and add a new token to the history, if the TokenReader#canRead(Scanner) method returns true. Declaration public TokenStream eat(TokenReader reader) Parameters Type Name Description TokenReader reader the reader to read the next token Returns Type Description this stream eatConditionally(TokenReader reader, Predicate<Token> previousToken) Try to read a token if the previous token in history matches the given condition. Declaration public TokenStream eatConditionally(TokenReader reader, Predicate<Token> previousToken) Parameters Type Name Description TokenReader reader the reader to read the next token java.util.function.Predicate < Token > previousToken the condition for the previous token Returns Type Description this stream eatHistorically(TokenReader reader, Predicate<LinkedList<Token>> previousToken) Try to read a token if all previous tokens in history match the given condition. Declaration public TokenStream eatHistorically(TokenReader reader, Predicate<LinkedList<Token>> previousToken) Parameters Type Name Description TokenReader reader the reader to read the next token java.util.function.Predicate < java.util.LinkedList < Token >> previousToken the conditions for the previous tokens Returns Type Description this stream eh(TokenReader[] readers) Used for {@link this#eatHistorically(TokenReader, Predicate)} to create a predicate. Calling this method with A,B,C would result in a predicate that matches if the recent history ends with A,B,C. Where C is the most recent entry - therefore the given tokens get matched with the end of the history list. Declaration public static Predicate<LinkedList<Token>> eh(TokenReader[] readers) Parameters Type Name Description TokenReader [] readers the TokenReader s containing the types to match in history Returns Type Description java.util.function.Predicate < java.util.LinkedList < Token >> whether the expected history is matched - as predicate getHistory() The current token history of this stream. Might produce the result at the end of calculation. Declaration public LinkedList<Token> getHistory() Returns Type Description java.util.LinkedList < Token > the current token history list. isOffering() If there is any token left to read. Is identical to Scanner#hasNext() for the internal scanner. Declaration public boolean isOffering() Returns Type Description boolean whether there are characters/tokens left to be read ne(TokenReader reader) Used for {@link this#eatConditionally(TokenReader, Predicate)} to create a predicate. The predicate will NOT match the given readers type with the last token in the history list. This means the predicate passes, if the latest/most recent eaten token is NOT equal to the given one. This method is mostly the opposite to {@link this#e(TokenReader)}, although this predicate also passes, if there is no previous token at all. Declaration public static Predicate<Token> ne(TokenReader reader) Parameters Type Name Description TokenReader reader the reader containing the type to match in history Returns Type Description java.util.function.Predicate < Token > whether the most recent token does not match the given one - as predicate"
  },
  "api/io.Tokenizer.html": {
    "href": "api/io.Tokenizer.html",
    "title": "Class Tokenizer",
    "keywords": "Class Tokenizer Inheritance java.lang.Object Tokenizer Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class Tokenizer Constructors Tokenizer() Declaration public Tokenizer() Methods detectCharset(byte[] input) Read raw input data to determine the charset based on the input - or return a default one. Declaration public abstract Charset detectCharset(byte[] input) Parameters Type Name Description byte [] input the raw input byte Returns Type Description java.nio.charset.Charset the charset somewhere defined in the input data or a default charset tokenize(byte[] input) Tokenize data using the defined encoding in the header, or the default according to the FileFormat if there is none defined and return all tokens. Declaration public List<Token> tokenize(byte[] input) Parameters Type Name Description byte [] input the raw utf-8 input bytes Returns Type Description java.util.List < Token > a list of all tokens while retaining its chronological order. tokenize(byte[] input, Charset charset) Tokenize data using the defined encoding and return all tokens. Declaration public List<Token> tokenize(byte[] input, Charset charset) Parameters Type Name Description byte [] input the raw utf-8 input bytes java.nio.charset.Charset charset Returns Type Description java.util.List < Token > a list of all tokens while retaining its chronological order. tokenize(String input) Reads an input string and extracts all tokens depending on the implementation from it Declaration public abstract List<Token> tokenize(String input) Parameters Type Name Description java.lang.String input the input string data Returns Type Description java.util.List < Token > a list of all tokens while retaining its chronological order."
  },
  "api/io.xml.html": {
    "href": "api/io.xml.html",
    "title": "Namespace io.xml",
    "keywords": "Namespace io.xml Classes XML XMLElement XMLSyntaxException XMLToken Enums XMLTokenType"
  },
  "api/io.xml.XML.html": {
    "href": "api/io.xml.XML.html",
    "title": "Class XML",
    "keywords": "Class XML Inheritance java.lang.Object XML Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class XML Constructors XML() Declaration public XML() Methods parse(byte[] input) Declaration public static XMLElement parse(byte[] input) Parameters Type Name Description byte [] input Returns Type Description XMLElement parse(byte[] input, Charset charset) Declaration public static XMLElement parse(byte[] input, Charset charset) Parameters Type Name Description byte [] input java.nio.charset.Charset charset Returns Type Description XMLElement parse(String input) Declaration public static XMLElement parse(String input) Parameters Type Name Description java.lang.String input Returns Type Description XMLElement parse(List<XMLToken> tokens, int startingPoint) Declaration public static Pair<XMLElement,Integer> parse(List<XMLToken> tokens, int startingPoint) Parameters Type Name Description java.util.List < XMLToken > tokens int startingPoint Returns Type Description Pair < XMLElement , java.lang.Integer > readHeader(byte[] input) Declaration protected static Charset readHeader(byte[] input) Parameters Type Name Description byte [] input Returns Type Description java.nio.charset.Charset tokenize(String input) Declaration protected static List<XMLToken> tokenize(String input) Parameters Type Name Description java.lang.String input Returns Type Description java.util.List < XMLToken > transformValue(String value, boolean isRaw) Declaration public static String transformValue(String value, boolean isRaw) Parameters Type Name Description java.lang.String value boolean isRaw Returns Type Description java.lang.String"
  },
  "api/io.xml.XMLElement.html": {
    "href": "api/io.xml.XMLElement.html",
    "title": "Class XMLElement",
    "keywords": "Class XMLElement Inheritance java.lang.Object XMLElement Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class XMLElement Constructors XMLElement(String comment) Declaration public XMLElement(String comment) Parameters Type Name Description java.lang.String comment XMLElement(String tag, String value) Declaration public XMLElement(String tag, String value) Parameters Type Name Description java.lang.String tag java.lang.String value XMLElement(String tag, List<XMLElement> subElements) Declaration public XMLElement(String tag, List<XMLElement> subElements) Parameters Type Name Description java.lang.String tag java.util.List < XMLElement > subElements XMLElement(String tag, Map<String,String> attributes, String value) Declaration public XMLElement(String tag, Map<String,String> attributes, String value) Parameters Type Name Description java.lang.String tag java.util.Map < java.lang.String , java.lang.String > attributes java.lang.String value XMLElement(String tag, Map<String,String> attributes, List<XMLElement> subElements) Declaration public XMLElement(String tag, Map<String,String> attributes, List<XMLElement> subElements) Parameters Type Name Description java.lang.String tag java.util.Map < java.lang.String , java.lang.String > attributes java.util.List < XMLElement > subElements Methods addAttribute(String name, String value) Declaration public void addAttribute(String name, String value) Parameters Type Name Description java.lang.String name java.lang.String value addSubElement(XMLElement element) Declaration public void addSubElement(XMLElement element) Parameters Type Name Description element getAttributes() Declaration public Map<String,String> getAttributes() Returns Type Description java.util.Map < java.lang.String , java.lang.String > getChildren() Declaration public List<XMLElement> getChildren() Returns Type Description java.util.List < XMLElement > getTag() Declaration public String getTag() Returns Type Description java.lang.String getValue() Declaration public String getValue() Returns Type Description java.lang.String setValue(String value) Declaration public void setValue(String value) Parameters Type Name Description java.lang.String value toString() Declaration public String toString() Returns Type Description java.lang.String Overrides java.lang.Object.toString() toString(boolean fancy) Declaration public String toString(boolean fancy) Parameters Type Name Description boolean fancy Returns Type Description java.lang.String"
  },
  "api/io.xml.XMLParser.html": {
    "href": "api/io.xml.XMLParser.html",
    "title": "Class XMLParser",
    "keywords": "Class XMLParser A simple XML string parsing class. Accepts: - spacing at any allowed position - node, sub nodes and attributes inside nodes - self-closing nodes - comments - different encoding in ?xml header Does not accept e.g.: - namespaces - complex ?xml headers - stylesheet - DTD declaration and data - entities Inheritance java.lang.Object Parser XMLParser Inherited Members Parser.check(List<Token>,int,TokenReader) Parser.get(List<Token>,int) Parser.is(List<Token>,int,TokenReader) Parser.parse(List<Token>) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public final class XMLParser extends Parser<XMLElement> Constructors XMLParser() Declaration public XMLParser() Methods parse(List<Token> tokens) Parse an object by taking a chronological list of tokens. Declaration public XMLElement parse(List<Token> tokens) Parameters Type Name Description java.util.List < Token > tokens Returns Type Description XMLElement Overrides Parser<T>.parse(List<Token> tokens) transformValue(String value, boolean isRaw) Declaration public static String transformValue(String value, boolean isRaw) Parameters Type Name Description java.lang.String value boolean isRaw Returns Type Description java.lang.String"
  },
  "api/io.xml.XMLSyntaxException.html": {
    "href": "api/io.xml.XMLSyntaxException.html",
    "title": "Class XMLSyntaxException",
    "keywords": "Class XMLSyntaxException Inheritance java.lang.Object java.lang.Throwable java.lang.Exception java.lang.RuntimeException XMLSyntaxException Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) java.lang.Throwable.addSuppressed(java.lang.Throwable) java.lang.Throwable.fillInStackTrace() java.lang.Throwable.getCause() java.lang.Throwable.getLocalizedMessage() java.lang.Throwable.getMessage() java.lang.Throwable.getStackTrace() java.lang.Throwable.getSuppressed() java.lang.Throwable.initCause(java.lang.Throwable) java.lang.Throwable.printStackTrace() java.lang.Throwable.printStackTrace(java.io.PrintStream) java.lang.Throwable.printStackTrace(java.io.PrintWriter) java.lang.Throwable.setStackTrace(java.lang.StackTraceElement[]) java.lang.Throwable.toString() Namespace : Assembly : .dll Syntax public class XMLSyntaxException extends RuntimeException Constructors XMLSyntaxException() Declaration public XMLSyntaxException() XMLSyntaxException(String message) Declaration public XMLSyntaxException(String message) Parameters Type Name Description java.lang.String message XMLSyntaxException(String message, Throwable cause) Declaration public XMLSyntaxException(String message, Throwable cause) Parameters Type Name Description java.lang.String message java.lang.Throwable cause XMLSyntaxException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) Declaration public XMLSyntaxException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) Parameters Type Name Description java.lang.String message java.lang.Throwable cause boolean enableSuppression boolean writableStackTrace XMLSyntaxException(Throwable cause) Declaration public XMLSyntaxException(Throwable cause) Parameters Type Name Description java.lang.Throwable cause"
  },
  "api/io.xml.XMLToken.html": {
    "href": "api/io.xml.XMLToken.html",
    "title": "Class XMLToken",
    "keywords": "Class XMLToken Inheritance java.lang.Object XMLToken Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class XMLToken Constructors XMLToken(String value, XMLTokenType tokenType) Declaration public XMLToken(String value, XMLTokenType tokenType) Parameters Type Name Description java.lang.String value XMLTokenType tokenType Methods getTokenType() Declaration public XMLTokenType getTokenType() Returns Type Description XMLTokenType getValue() Declaration public String getValue() Returns Type Description java.lang.String toString() Declaration public String toString() Returns Type Description java.lang.String Overrides java.lang.Object.toString()"
  },
  "api/io.xml.XMLTokenizer.html": {
    "href": "api/io.xml.XMLTokenizer.html",
    "title": "Class XMLTokenizer",
    "keywords": "Class XMLTokenizer Inheritance java.lang.Object Tokenizer XMLTokenizer Inherited Members Tokenizer.detectCharset(byte[]) Tokenizer.tokenize(byte[]) Tokenizer.tokenize(byte[],Charset) Tokenizer.tokenize(String) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public final class XMLTokenizer extends Tokenizer Constructors XMLTokenizer() Declaration public XMLTokenizer() Fields ATTR_EQUALS Declaration public static final TokenReader ATTR_EQUALS Field Value Type Description TokenReader CLOSE_TAG Declaration public static final TokenReader CLOSE_TAG Field Value Type Description TokenReader COMMENT_CONTENT Declaration public static final TokenReader COMMENT_CONTENT Field Value Type Description TokenReader COMMENT_DASHES Declaration public static final TokenReader COMMENT_DASHES Field Value Type Description TokenReader COMMENT_MARK Declaration public static final TokenReader COMMENT_MARK Field Value Type Description TokenReader IDENTIFIER Declaration public static final TokenReader IDENTIFIER Field Value Type Description TokenReader OPEN_TAG Declaration public static final TokenReader OPEN_TAG Field Value Type Description TokenReader QUOTATION Declaration public static final TokenReader QUOTATION Field Value Type Description TokenReader SELF_CLOSE Declaration public static final TokenReader SELF_CLOSE Field Value Type Description TokenReader SPACING Declaration public static final TokenReader SPACING Field Value Type Description TokenReader VALUE Declaration public static final TokenReader VALUE Field Value Type Description TokenReader Methods detectCharset(byte[] input) Read raw input data to determine the charset based on the input - or return a default one. Declaration public Charset detectCharset(byte[] input) Parameters Type Name Description byte [] input Returns Type Description java.nio.charset.Charset Overrides Tokenizer.detectCharset(byte[] input) tokenize(String input) Reads an input string and extracts all tokens depending on the implementation from it Declaration public List<Token> tokenize(String input) Parameters Type Name Description java.lang.String input Returns Type Description java.util.List < Token > Overrides Tokenizer.tokenize(String input)"
  },
  "api/io.xml.XMLTokenType.html": {
    "href": "api/io.xml.XMLTokenType.html",
    "title": "Enum XMLTokenType",
    "keywords": "Enum XMLTokenType Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum XMLTokenType extends Enum<XMLTokenType> Fields Name Description ATTR_EQUALS CLOSE_TAG COMMENT_TAG IDENTIFIER OPEN_COMMENT OPEN_TAG QUOTATION SLASH SPACING Methods Name Description valueOf(String name) values()"
  },
  "api/physics.collision.Collider.html": {
    "href": "api/physics.collision.Collider.html",
    "title": "Interface Collider",
    "keywords": "Interface Collider Describes an object that can collide with others. Namespace : Assembly : .dll Syntax public interface Collider Methods addTag(String tag) Adds a tag to this collider, making it a tagged collider if it isnt already one. Declaration public abstract void addTag(String tag) Parameters Type Name Description java.lang.String tag the new case-sensitive tag to add canCollideWith(Collider collider) Determines whether a collider could potentially intersect with another collider ONLY by their collision layers. This method can be considered part of the broad phase of collision detection. Declaration public abstract boolean canCollideWith(Collider collider) Parameters Type Name Description collider the other collider Returns Type Description boolean true if and only if both objects could potentially collide detectCollision(Collider collider) Determines whether a collider intersects with another collider IGNORING the collision layers. Declaration public abstract CollisionInformation detectCollision(Collider collider) Parameters Type Name Description collider the other collider Returns Type Description CollisionInformation an object containing the result of collision detection getShape() The shape of the collider. Declaration public abstract PrimitiveShape getShape() Returns Type Description PrimitiveShape the shape of the collider hasMask(int layer) Determines whether a collision mask for a specified layer is enabled. Declaration public abstract boolean hasMask(int layer) Parameters Type Name Description int layer the layer from 0 to TOTAL_LAYER-1, the behaviour for layers outside the range is undefined Returns Type Description boolean true if and only if the mask for the specified layer is enabled hasTags() Defines whether a collider is a tagged or an untagged collider. Declaration public abstract boolean hasTags() Returns Type Description boolean true, if and only if that collider contains at least a one tag isOnLayer(int layer) Determines whether the collider exists in a specified layer. Declaration public abstract boolean isOnLayer(int layer) Parameters Type Name Description int layer the layer from 0 to TOTAL_LAYER-1, the behaviour for layers outside the range is undefined Returns Type Description boolean true if and only if the collider exists in the specified layer layers() A short containing all enabled layers encoded as bit mask. Should be usable to compare different masks with each other to check for intersection. Declaration public abstract short layers() Returns Type Description short a short with all layer encoded mask() A short containing all enabled masks encoded as bit mask. Should be usable to compare different masks with each other to check for intersection. Declaration public abstract short mask() Returns Type Description short a short with all masks encoded matchTags(Collider collider) Checks for matching tags with another collider. There are 3 different rules for tag matching: - a collider without tags can only collide with a collider without tags (ignoring tags and only using layers) - a collider without tags can never collide with a tagged collider - a tagged collider can only collide with another tagged object, if there is any intersection comparing both sets of tags Declaration public abstract boolean matchTags(Collider collider) Parameters Type Name Description collider another collider Returns Type Description boolean true, if the colliders are allowed to collide passive() Defines the behaviour of this collider. A passive collider will never get checked against others colliders, however any collider might get checked against it. Declaration public abstract boolean passive() Returns Type Description boolean whether this collider is passive removeTag(String tag) Removes a tag to this collider. If the last tag got removed, this collider becomes an untagged collider. Declaration public abstract void removeTag(String tag) Parameters Type Name Description java.lang.String tag the case-sensitive tag to remove setLayer(int layer, boolean active) Change the colliders presence in a specified layer. Making a collider present in a specified layer will it enable to collide with all collider including the specified layer in their collision mask. Declaration public abstract void setLayer(int layer, boolean active) Parameters Type Name Description int layer the layer from 0 to TOTAL_LAYER-1, the behaviour for layers outside the range is undefined boolean active whether the collider should be present (true) or not (false) setMask(int layer, boolean active) Changes the collision mask entry for a specified layer. Enabling the mask for layer n will allow this collider to collide with any other collider set in the target layer n vise versa. Declaration public abstract void setMask(int layer, boolean active) Parameters Type Name Description int layer the layer from 0 to TOTAL_LAYER-1, the behaviour for layers outside the range is undefined boolean active whether the mask should enabled (true) or disabled (false) tags() All tags assigned to this collider. Declaration public abstract Set<String> tags() Returns Type Description java.util.Set < java.lang.String > an unmodifiable set of all tags assigned to this collider"
  },
  "api/physics.collision.CollisionInformation.html": {
    "href": "api/physics.collision.CollisionInformation.html",
    "title": "Class CollisionInformation",
    "keywords": "Class CollisionInformation A class to pass down information about a collision detection for further response. Inheritance java.lang.Object CollisionInformation Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class CollisionInformation Constructors CollisionInformation(Object data, boolean collision) Declaration public CollisionInformation(Object data, boolean collision) Parameters Type Name Description java.lang.Object data boolean collision Methods collision() Declaration public final boolean collision() Returns Type Description boolean get() Declaration public final Object get() Returns Type Description java.lang.Object"
  },
  "api/physics.collision.html": {
    "href": "api/physics.collision.html",
    "title": "Namespace physics.collision",
    "keywords": "Namespace physics.collision Classes CollisionInformation A class to pass down information about a collision detection for further response. RayCastResult Shapes Util methods to create physics.collision.shape.PrimitiveShape on the fly. Interfaces Collider Describes an object that can collide with others."
  },
  "api/physics.collision.RayCastResult.html": {
    "href": "api/physics.collision.RayCastResult.html",
    "title": "Class RayCastResult",
    "keywords": "Class RayCastResult Inheritance java.lang.Object RayCastResult Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class RayCastResult Constructors RayCastResult() Create a RayCastResult, where the target was not hit. Declaration public RayCastResult() RayCastResult(Vector2f point, Vector2f normal, Vector2f strike, float strikeLength) Create a successful raycast result with details collision information. Declaration public RayCastResult(Vector2f point, Vector2f normal, Vector2f strike, float strikeLength) Parameters Type Name Description org.joml.Vector2f point the point, where the raycast hit org.joml.Vector2f normal the normal on the face of the object that got hit org.joml.Vector2f strike the vector from raycast start to the point float strikeLength the distance from the raycast start to the point Methods didHit() Declaration public boolean didHit() Returns Type Description boolean getNormal() Declaration public Vector2f getNormal() Returns Type Description org.joml.Vector2f getPoint() Declaration public Vector2f getPoint() Returns Type Description org.joml.Vector2f getStrike() Declaration public Vector2f getStrike() Returns Type Description org.joml.Vector2f getStrikeLength() Declaration public float getStrikeLength() Returns Type Description float"
  },
  "api/physics.collision.shape.Circle.html": {
    "href": "api/physics.collision.shape.Circle.html",
    "title": "Class Circle",
    "keywords": "Class Circle The shape implementation of a circle. Inheritance java.lang.Object PrimitiveShape Circle Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PrimitiveShape.adjust() PrimitiveShape.boundingSphere() PrimitiveShape.centroid() PrimitiveShape.faces() PrimitiveShape.getAbsolutePoints() PrimitiveShape.init() PrimitiveShape.initSphere() PrimitiveShape.position() PrimitiveShape.rotateShape(float,RotationType,Vector2f) PrimitiveShape.setPosition(float,float) PrimitiveShape.setPosition(Vector2f) PrimitiveShape.supportPoint(Vector2f) PrimitiveShape.type() PrimitiveShape.vertices() Namespace : Assembly : .dll Syntax public class Circle extends PrimitiveShape Constructors Circle(Vector2f relativeCenter, float radius) Declaration public Circle(Vector2f relativeCenter, float radius) Parameters Type Name Description org.joml.Vector2f relativeCenter float radius Methods adjust() Will be called by PrimitiveShape#setPosition(Vector2f) after the new position was set. Used to recalculate the absolute coordinates. Declaration public void adjust() Overrides PrimitiveShape.adjust() intersection(Circle circle) Check intersection between two circles efficiently without using square roots. Will only produce wrong results originated in missing precision in floating point numbers. Declaration public boolean intersection(Circle circle) Parameters Type Name Description circle the circle to compare to Returns Type Description boolean true if the given circle intersects with this one rayCast(Vector2f start, Vector2f rayDirection, float maxLength) Calculate a raycast against this circle using absolute coordinates. Declaration public RayCastResult rayCast(Vector2f start, Vector2f rayDirection, float maxLength) Parameters Type Name Description org.joml.Vector2f start the starting point of the raycast org.joml.Vector2f rayDirection the direction of the ray, it doesnt have to be normalized, it will be by the method float maxLength the max length of ray, if it can't hit within this range, it doesnt hit Returns Type Description RayCastResult the result of the raycast supportPoint(Vector2f v) According to GJKSM this method is supposed to calculate the point of the shape, that is most in direction of v. The general rule is, the more primitive the shape is, the more efficient this method can be. This method may be described as max{v*x,x element of Shape} for any complex shape. Declaration public Vector2f supportPoint(Vector2f v) Parameters Type Name Description org.joml.Vector2f v Returns Type Description org.joml.Vector2f Overrides PrimitiveShape.supportPoint(Vector2f v)"
  },
  "api/physics.collision.shape.ConvexPolygon.html": {
    "href": "api/physics.collision.shape.ConvexPolygon.html",
    "title": "Class ConvexPolygon",
    "keywords": "Class ConvexPolygon A basic polygon shape. It does not ensure the points to be part of the convex hull, so this object may contain points for a concave shape. If that is the case, this shape won't work correctly for GJKSM collision detection. Inheritance java.lang.Object PrimitiveShape ConvexPolygon Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PrimitiveShape.adjust() PrimitiveShape.boundingSphere() PrimitiveShape.centroid() PrimitiveShape.faces() PrimitiveShape.getAbsolutePoints() PrimitiveShape.init() PrimitiveShape.initSphere() PrimitiveShape.position() PrimitiveShape.rotateShape(float,RotationType,Vector2f) PrimitiveShape.setPosition(float,float) PrimitiveShape.setPosition(Vector2f) PrimitiveShape.supportPoint(Vector2f) PrimitiveShape.type() PrimitiveShape.vertices() Namespace : Assembly : .dll Syntax public class ConvexPolygon extends PrimitiveShape Constructors ConvexPolygon(Vector2f[] relatives) Declaration public ConvexPolygon(Vector2f[] relatives) Parameters Type Name Description org.joml.Vector2f [] relatives"
  },
  "api/physics.collision.shape.Face.html": {
    "href": "api/physics.collision.shape.Face.html",
    "title": "Class Face",
    "keywords": "Class Face Inheritance java.lang.Object Face Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Face Constructors Face(PrimitiveShape parent, Vector2f relativePoint, Vector2f relativeFace) Declaration public Face(PrimitiveShape parent, Vector2f relativePoint, Vector2f relativeFace) Parameters Type Name Description PrimitiveShape parent org.joml.Vector2f relativePoint org.joml.Vector2f relativeFace Methods getAbsoluteFixPoint() Declaration public Vector2f getAbsoluteFixPoint() Returns Type Description org.joml.Vector2f getNormal() Declaration public Vector2f getNormal() Returns Type Description org.joml.Vector2f getRelativeFace() Declaration public Vector2f getRelativeFace() Returns Type Description org.joml.Vector2f getRelativeFixPoint() Declaration public Vector2f getRelativeFixPoint() Returns Type Description org.joml.Vector2f"
  },
  "api/physics.collision.shape.html": {
    "href": "api/physics.collision.shape.html",
    "title": "Namespace physics.collision.shape",
    "keywords": "Namespace physics.collision.shape Classes Circle The shape implementation of a circle. ConvexPolygon A basic polygon shape. It does not ensure the points to be part of the convex hull, so this object may contain points for a concave shape. If that is the case, this shape won't work correctly for GJKSM collision detection. Face Line The shape implementation of a line. Point The GJKSM shape implementation of a single point. PrimitiveShape The PrimitiveShape is implicitly described by all its support vectors. A support vector is a point on the convex hull of a shape, that is furthest in the direction of a specified vector v. This class may contain information about explicit points on the edge too. Quadrilateral The shape implementation of a rectangle. Triangle The shape implementation of a triangle. Enums RotationType ShapeType"
  },
  "api/physics.collision.shape.Line.html": {
    "href": "api/physics.collision.shape.Line.html",
    "title": "Class Line",
    "keywords": "Class Line The shape implementation of a line. Inheritance java.lang.Object PrimitiveShape Line Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PrimitiveShape.adjust() PrimitiveShape.boundingSphere() PrimitiveShape.centroid() PrimitiveShape.faces() PrimitiveShape.getAbsolutePoints() PrimitiveShape.init() PrimitiveShape.initSphere() PrimitiveShape.position() PrimitiveShape.rotateShape(float,RotationType,Vector2f) PrimitiveShape.setPosition(float,float) PrimitiveShape.setPosition(Vector2f) PrimitiveShape.supportPoint(Vector2f) PrimitiveShape.type() PrimitiveShape.vertices() Namespace : Assembly : .dll Syntax public class Line extends PrimitiveShape Constructors Line(Vector2f relativeA, Vector2f relativeB) Declaration public Line(Vector2f relativeA, Vector2f relativeB) Parameters Type Name Description org.joml.Vector2f relativeA org.joml.Vector2f relativeB Methods supportPoint(Vector2f v) According to GJKSM this method is supposed to calculate the point of the shape, that is most in direction of v. The general rule is, the more primitive the shape is, the more efficient this method can be. This method may be described as max{v*x,x element of Shape} for any complex shape. Declaration public Vector2f supportPoint(Vector2f v) Parameters Type Name Description org.joml.Vector2f v Returns Type Description org.joml.Vector2f Overrides PrimitiveShape.supportPoint(Vector2f v)"
  },
  "api/physics.collision.shape.Point.html": {
    "href": "api/physics.collision.shape.Point.html",
    "title": "Class Point",
    "keywords": "Class Point The GJKSM shape implementation of a single point. Inheritance java.lang.Object PrimitiveShape Point Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PrimitiveShape.adjust() PrimitiveShape.boundingSphere() PrimitiveShape.centroid() PrimitiveShape.faces() PrimitiveShape.getAbsolutePoints() PrimitiveShape.init() PrimitiveShape.initSphere() PrimitiveShape.position() PrimitiveShape.rotateShape(float,RotationType,Vector2f) PrimitiveShape.setPosition(float,float) PrimitiveShape.setPosition(Vector2f) PrimitiveShape.supportPoint(Vector2f) PrimitiveShape.type() PrimitiveShape.vertices() Namespace : Assembly : .dll Syntax public class Point extends PrimitiveShape Constructors Point(Vector2f relativePoint) Declaration public Point(Vector2f relativePoint) Parameters Type Name Description org.joml.Vector2f relativePoint Methods supportPoint(Vector2f v) According to GJKSM this method is supposed to calculate the point of the shape, that is most in direction of v. The general rule is, the more primitive the shape is, the more efficient this method can be. This method may be described as max{v*x,x element of Shape} for any complex shape. Declaration public Vector2f supportPoint(Vector2f v) Parameters Type Name Description org.joml.Vector2f v Returns Type Description org.joml.Vector2f Overrides PrimitiveShape.supportPoint(Vector2f v)"
  },
  "api/physics.collision.shape.PrimitiveShape.html": {
    "href": "api/physics.collision.shape.PrimitiveShape.html",
    "title": "Class PrimitiveShape",
    "keywords": "Class PrimitiveShape The PrimitiveShape is implicitly described by all its support vectors. A support vector is a point on the convex hull of a shape, that is furthest in the direction of a specified vector v. This class may contain information about explicit points on the edge too. Inheritance java.lang.Object PrimitiveShape Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class PrimitiveShape Constructors PrimitiveShape(Vector2f[] relatives) Create a polygon of the given coordinates. Declaration protected PrimitiveShape(Vector2f[] relatives) Parameters Type Name Description org.joml.Vector2f [] relatives all relative points on the shape PrimitiveShape(ShapeType type, Vector2f[] relatives) Create a shape. Generally only used as super call from other shape classes. Declaration protected PrimitiveShape(ShapeType type, Vector2f[] relatives) Parameters Type Name Description ShapeType type the type of the target shape org.joml.Vector2f [] relatives the points defining this shape Fields absoluteCentroid The centroid of the shape - the absolute vector (position is already added to it) Declaration protected Vector2f absoluteCentroid Field Value Type Description org.joml.Vector2f absolutes The coordinates of the shape - absolute coordinates (position is already added to it) Declaration protected final Vector2f[] absolutes Field Value Type Description org.joml.Vector2f [] boundingSphere The boundingSphere of this shape represented by a Circle . This sphere is used as broadphase for collision detection, since circle intersection checks does cost way less Declaration protected Circle boundingSphere Field Value Type Description Circle faces All faces of the shape Declaration protected final Face[] faces Field Value Type Description Face [] relativeCentroid The centroid of the shape - the relative vector to an imaginary origin near the shape Declaration protected Vector2f relativeCentroid Field Value Type Description org.joml.Vector2f relatives The coordinates of the shape - relative to an imaginary origin near the shape Declaration protected final Vector2f[] relatives Field Value Type Description org.joml.Vector2f [] vertices The amount of vertices of the shape Declaration protected final int vertices Field Value Type Description int Methods adjust() Will be called by PrimitiveShape#setPosition(Vector2f) after the new position was set. Used to recalculate the absolute coordinates. Declaration public void adjust() boundingSphere() A minimal sphere that contains the original shape. The inner shape is supposed to be fixed inside the sphere and share the same centroid. Declaration public final Circle boundingSphere() Returns Type Description Circle the minimal sphere containing this shape centroid() The center point or weight point of the shape. Declaration public final Vector2f centroid() Returns Type Description org.joml.Vector2f centroid of the shape faces() Declaration public final Face[] faces() Returns Type Description Face [] getAbsolutePoints() Declaration public final Vector2f[] getAbsolutePoints() Returns Type Description org.joml.Vector2f [] init() Requires the relativeCentroid to be set. Calculates all relative faces and relative diagonals for a defined shape Declaration protected final void init() initSphere() Calculates a relative centroid and the boundingSphere for the shape. In some special cases this might be done quicker in a different way. Declaration protected final void initSphere() position() Declaration public final Vector2f position() Returns Type Description org.joml.Vector2f rotateShape(float radianAngle, RotationType type, Vector2f point) Rotate a shape around a specific point and a given radianAngle. Declaration public final boolean rotateShape(float radianAngle, RotationType type, Vector2f point) Parameters Type Name Description float radianAngle the radian angle to rotate the shape RotationType type the type of rotation org.joml.Vector2f point the optional point to rotate around; if type is not RotationType#AROUND_POINT , the point can be null Returns Type Description boolean true, if the rotation was successful setPosition(float x, float y) Declaration public final void setPosition(float x, float y) Parameters Type Name Description float x the x coord float y the y coord setPosition(Vector2f position) Update the shapes position due to external changes, e.g. the related object has moved Declaration public final void setPosition(Vector2f position) Parameters Type Name Description org.joml.Vector2f position the new position of the related object supportPoint(Vector2f v) According to GJKSM this method is supposed to calculate the point of the shape, that is most in direction of v. The general rule is, the more primitive the shape is, the more efficient this method can be. This method may be described as max{v*x,x element of Shape} for any complex shape. Declaration public Vector2f supportPoint(Vector2f v) Parameters Type Name Description org.joml.Vector2f v the direction Returns Type Description org.joml.Vector2f the point of the shape that is most in the direction of v type() A clean description for this shape. Declaration public final ShapeType type() Returns Type Description ShapeType the ShapeType matching this PrimitiveShape vertices() Declaration public final int vertices() Returns Type Description int"
  },
  "api/physics.collision.shape.Quadrilateral.html": {
    "href": "api/physics.collision.shape.Quadrilateral.html",
    "title": "Class Quadrilateral",
    "keywords": "Class Quadrilateral The shape implementation of a rectangle. Inheritance java.lang.Object PrimitiveShape Quadrilateral Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PrimitiveShape.adjust() PrimitiveShape.boundingSphere() PrimitiveShape.centroid() PrimitiveShape.faces() PrimitiveShape.getAbsolutePoints() PrimitiveShape.init() PrimitiveShape.initSphere() PrimitiveShape.position() PrimitiveShape.rotateShape(float,RotationType,Vector2f) PrimitiveShape.setPosition(float,float) PrimitiveShape.setPosition(Vector2f) PrimitiveShape.supportPoint(Vector2f) PrimitiveShape.type() PrimitiveShape.vertices() Namespace : Assembly : .dll Syntax public class Quadrilateral extends PrimitiveShape Constructors Quadrilateral(Vector2f a, Vector2f b, Vector2f c, Vector2f d) Declaration public Quadrilateral(Vector2f a, Vector2f b, Vector2f c, Vector2f d) Parameters Type Name Description org.joml.Vector2f a org.joml.Vector2f b org.joml.Vector2f c org.joml.Vector2f d"
  },
  "api/physics.collision.shape.RotationType.html": {
    "href": "api/physics.collision.shape.RotationType.html",
    "title": "Enum RotationType",
    "keywords": "Enum RotationType Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum RotationType extends Enum<RotationType> Fields Name Description AROUND_CENTER AROUND_ORIGIN AROUND_POINT Methods Name Description valueOf(String name) values()"
  },
  "api/physics.collision.shape.ShapeType.html": {
    "href": "api/physics.collision.shape.ShapeType.html",
    "title": "Enum ShapeType",
    "keywords": "Enum ShapeType Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum ShapeType extends Enum<ShapeType> Fields Name Description CIRCLE LINE POINT POLYGON QUADRILATERAL TRIANGLE Methods Name Description valueOf(String name) values()"
  },
  "api/physics.collision.shape.Triangle.html": {
    "href": "api/physics.collision.shape.Triangle.html",
    "title": "Class Triangle",
    "keywords": "Class Triangle The shape implementation of a triangle. Inheritance java.lang.Object PrimitiveShape Triangle Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PrimitiveShape.adjust() PrimitiveShape.boundingSphere() PrimitiveShape.centroid() PrimitiveShape.faces() PrimitiveShape.getAbsolutePoints() PrimitiveShape.init() PrimitiveShape.initSphere() PrimitiveShape.position() PrimitiveShape.rotateShape(float,RotationType,Vector2f) PrimitiveShape.setPosition(float,float) PrimitiveShape.setPosition(Vector2f) PrimitiveShape.supportPoint(Vector2f) PrimitiveShape.type() PrimitiveShape.vertices() Namespace : Assembly : .dll Syntax public class Triangle extends PrimitiveShape Constructors Triangle(Vector2f relativeA, Vector2f relativeB, Vector2f relativeC) Declaration public Triangle(Vector2f relativeA, Vector2f relativeB, Vector2f relativeC) Parameters Type Name Description org.joml.Vector2f relativeA org.joml.Vector2f relativeB org.joml.Vector2f relativeC"
  },
  "api/physics.collision.Shapes.html": {
    "href": "api/physics.collision.Shapes.html",
    "title": "Class Shapes",
    "keywords": "Class Shapes Util methods to create physics.collision.shape.PrimitiveShape on the fly. Inheritance java.lang.Object Shapes Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Shapes Constructors Shapes() Declaration public Shapes() Methods axisAlignedRectangle(float ax, float ay, float bx, float by) Create an axis aligned rectangle. This will find min corner and max corner and generate both missing points through basic geometry Declaration public static Quadrilateral axisAlignedRectangle(float ax, float ay, float bx, float by) Parameters Type Name Description float ax relative coordinate Ax float ay relative coordinate Ay float bx relative coordinate Bx float by relative coordinate By Returns Type Description Quadrilateral an axis aligned rectangle axisAlignedRectangle(Vector2f a, Vector2f b) Create an axis aligned rectangle. This will find min corner and max corner and generate both missing points through basic geometry Declaration public static Quadrilateral axisAlignedRectangle(Vector2f a, Vector2f b) Parameters Type Name Description org.joml.Vector2f a relative point a org.joml.Vector2f b relative point b Returns Type Description Quadrilateral an axis aligned rectangle circle(float x, float y, float r) Create a circle. Declaration public static Circle circle(float x, float y, float r) Parameters Type Name Description float x the relative x coord of the circles center float y the relative y coord of the circles center float r the radius of the circle Returns Type Description Circle a circle circle(Vector2f center, float radius) Create a circle. Declaration public static Circle circle(Vector2f center, float radius) Parameters Type Name Description org.joml.Vector2f center the relative center of the circle float radius the radius of the circle Returns Type Description Circle a circle circle(Vector2f center, Vector2f circlePosition, float radius) Create a circle. Declaration public static Circle circle(Vector2f center, Vector2f circlePosition, float radius) Parameters Type Name Description org.joml.Vector2f center the absolute center of the circle org.joml.Vector2f circlePosition the current absolute position of the circle's center float radius the radius of the circle Returns Type Description Circle a circle convexPolygon(float[] coordPairs) Create a convex polygon by a given set of coordinate pairs. Declaration public static ConvexPolygon convexPolygon(float[] coordPairs) Parameters Type Name Description float [] coordPairs a dynamic array of coordinates, which must have an even size. Returns Type Description ConvexPolygon a ConvexPolygon over all given points or null if the coordinates have a odd size quadrilateral(Vector2f a, Vector2f b, Vector2f c, Vector2f d) Create a quadrilateral. Declaration public static Quadrilateral quadrilateral(Vector2f a, Vector2f b, Vector2f c, Vector2f d) Parameters Type Name Description org.joml.Vector2f a relative point a org.joml.Vector2f b relative point b org.joml.Vector2f c relative point c org.joml.Vector2f d relative point d Returns Type Description Quadrilateral a quadrilateral triangle(float ax, float ay, float bx, float by, float cx, float cy) Create a triangle. Declaration public static Triangle triangle(float ax, float ay, float bx, float by, float cx, float cy) Parameters Type Name Description float ax relative coordinate Ax float ay relative coordinate Ay float bx relative coordinate Bx float by relative coordinate By float cx relative coordinate Cx float cy relative coordinate Cy Returns Type Description Triangle a triangle triangle(Vector2f a, Vector2f b, Vector2f c) Create a triangle. Declaration public static Triangle triangle(Vector2f a, Vector2f b, Vector2f c) Parameters Type Name Description org.joml.Vector2f a relative point a org.joml.Vector2f b relative point b org.joml.Vector2f c relative point c Returns Type Description Triangle a triangle"
  },
  "api/physics.force.ConstantForce.html": {
    "href": "api/physics.force.ConstantForce.html",
    "title": "Class ConstantForce",
    "keywords": "Class ConstantForce Inheritance java.lang.Object ConstantForce Implements Force Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class ConstantForce implements Force Constructors ConstantForce(String identifier, Vector2f direction) Declaration public ConstantForce(String identifier, Vector2f direction) Parameters Type Name Description java.lang.String identifier org.joml.Vector2f direction Methods direction() The direction and strength of this force as Vector2f . Declaration public Vector2f direction() Returns Type Description org.joml.Vector2f identifier() A unique identifier for this force, can be used as name as well. Declaration public String identifier() Returns Type Description java.lang.String update(float dt) Called with the update cycle of the related object. If assigned to multiple objects, this will be called multiple times per update cycles. The order in the calls happen is undefined and therefore its not recommended to assign a force, which changes over time or in relation to anything else, to multiple objects. Constant forces like gravity however can be reused of course. Declaration public boolean update(float dt) Parameters Type Name Description float dt Returns Type Description boolean Implements Force"
  },
  "api/physics.force.Force.html": {
    "href": "api/physics.force.Force.html",
    "title": "Interface Force",
    "keywords": "Interface Force Can be applied to a ecs.Dynamics and should be a unique instance for each object in most cases. This class is independent from the mass of an object. Each object is Namespace : Assembly : .dll Syntax public interface Force Methods direction() The direction and strength of this force as Vector2f . Declaration public abstract Vector2f direction() Returns Type Description org.joml.Vector2f the force as vector identifier() A unique identifier for this force, can be used as name as well. Declaration public abstract String identifier() Returns Type Description java.lang.String the unique identifier update(float dt) Called with the update cycle of the related object. If assigned to multiple objects, this will be called multiple times per update cycles. The order in the calls happen is undefined and therefore its not recommended to assign a force, which changes over time or in relation to anything else, to multiple objects. Constant forces like gravity however can be reused of course. Declaration public abstract boolean update(float dt) Parameters Type Name Description float dt the delta time passed by the update cycle Returns Type Description boolean whether the force has changed due to this call"
  },
  "api/physics.force.html": {
    "href": "api/physics.force.html",
    "title": "Namespace physics.force",
    "keywords": "Namespace physics.force Classes ConstantForce IncrementalForce Interfaces Force Can be applied to a ecs.Dynamics and should be a unique instance for each object in most cases. This class is independent from the mass of an object. Each object is"
  },
  "api/physics.force.IncrementalForce.html": {
    "href": "api/physics.force.IncrementalForce.html",
    "title": "Class IncrementalForce",
    "keywords": "Class IncrementalForce Inheritance java.lang.Object IncrementalForce Implements Force Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class IncrementalForce implements Force Constructors IncrementalForce(String identifier, Vector2f direction, float increment, float limit) Declaration public IncrementalForce(String identifier, Vector2f direction, float increment, float limit) Parameters Type Name Description java.lang.String identifier org.joml.Vector2f direction float increment float limit Methods direction() The direction and strength of this force as Vector2f . Declaration public Vector2f direction() Returns Type Description org.joml.Vector2f identifier() A unique identifier for this force, can be used as name as well. Declaration public String identifier() Returns Type Description java.lang.String reset() Declaration public void reset() update(float dt) Called with the update cycle of the related object. If assigned to multiple objects, this will be called multiple times per update cycles. The order in the calls happen is undefined and therefore its not recommended to assign a force, which changes over time or in relation to anything else, to multiple objects. Constant forces like gravity however can be reused of course. Declaration public boolean update(float dt) Parameters Type Name Description float dt Returns Type Description boolean Implements Force"
  },
  "api/postprocess.BloomEffect.html": {
    "href": "api/postprocess.BloomEffect.html",
    "title": "Class BloomEffect",
    "keywords": "Class BloomEffect Post Processing Pipeline to apply a bloom effect to a Texture. Inheritance java.lang.Object PostProcessPipeline BloomEffect Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PostProcessPipeline.apply(Texture) PostProcessPipeline.init() Namespace : Assembly : .dll Syntax public class BloomEffect extends PostProcessPipeline Constructors BloomEffect(PostProcessStep.Target dest) To construct a Bloom Effect Pipeline with a bloom of 0.8 Declaration public BloomEffect(PostProcessStep.Target dest) Parameters Type Name Description PostProcessStep.Target dest Where the final texture is to be rendered BloomEffect(PostProcessStep.Target dest, float bloomAmt) To construct a Bloom Effect Pipeline with a bloom of 0.8 Declaration public BloomEffect(PostProcessStep.Target dest, float bloomAmt) Parameters Type Name Description PostProcessStep.Target dest Where the final texture is to be rendered float bloomAmt amount of bloom to be applied Methods apply(Texture input) Apply the bloom effect and return the final texture if not rendering to the default framebuffer Declaration public Texture apply(Texture input) Parameters Type Name Description Texture input input texture to bee processed Returns Type Description Texture the final texture if not rendering to the default framebuffer Overrides PostProcessPipeline.apply(Texture input) init() Initializes all steps in this pipeline Declaration public void init() Overrides PostProcessPipeline.init()"
  },
  "api/postprocess.BrightFilter.html": {
    "href": "api/postprocess.BrightFilter.html",
    "title": "Class BrightFilter",
    "keywords": "Class BrightFilter A Post Processing Step that only renders bright parts of the scene Inheritance java.lang.Object PostProcessStep BrightFilter Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) Namespace : Assembly : .dll Syntax public class BrightFilter extends PostProcessStep Constructors BrightFilter(PostProcessStep.Target target) Default Constructor Declaration public BrightFilter(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTexture(Texture texture) Set the input texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture input texture uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/postprocess.ForwardToTexture.html": {
    "href": "api/postprocess.ForwardToTexture.html",
    "title": "Class ForwardToTexture",
    "keywords": "Class ForwardToTexture A Post Processing Step that renders the texture as-is to another framebuffer. Perfect for debugging steps. NOTE: If you want to forward any texture to the screen, the scene class has a forwardToScreen field that can be used Inheritance java.lang.Object PostProcessStep ForwardToTexture Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) Namespace : Assembly : .dll Syntax public class ForwardToTexture extends PostProcessStep Constructors ForwardToTexture(PostProcessStep.Target target) Default Constructor Declaration public ForwardToTexture(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTexture(Texture texture) Set the input texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture input texture uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/postprocess.HorizontalBlur.html": {
    "href": "api/postprocess.HorizontalBlur.html",
    "title": "Class HorizontalBlur",
    "keywords": "Class HorizontalBlur A Post Processing Step that renders the texture with a Horizontal Blur. NOTE: If you want a more blurry texture, consider using Target.ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER to get a smaller framebuffer size and in turn, a more blurrier texture Inheritance java.lang.Object PostProcessStep HorizontalBlur Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) Namespace : Assembly : .dll Syntax public class HorizontalBlur extends PostProcessStep Constructors HorizontalBlur(PostProcessStep.Target target) Default Constructor Declaration public HorizontalBlur(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTexture(Texture texture) Set the input texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture input texture uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/postprocess.html": {
    "href": "api/postprocess.html",
    "title": "Namespace postprocess",
    "keywords": "Namespace postprocess Classes BloomEffect Post Processing Pipeline to apply a bloom effect to a Texture. BrightFilter A Post Processing Step that only renders bright parts of the scene ForwardToTexture A Post Processing Step that renders the texture as-is to another framebuffer. Perfect for debugging steps. NOTE: If you want to forward any texture to the screen, the scene class has a forwardToScreen field that can be used HorizontalBlur A Post Processing Step that renders the texture with a Horizontal Blur. NOTE: If you want a more blurry texture, consider using Target.ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER to get a smaller framebuffer size and in turn, a more blurrier texture PostProcessPipeline This class should be used if you want to chain multiple steps PostProcessQuad PostProcessStep Denotes A Step in Post Processing PostProcessing Some Utility methods VerticalBlur A Post Processing Step that renders the texture with a Vertical Blur. NOTE: If you want a more blurry texture, consider using Target.ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER to get a smaller framebuffer size and in turn, a more blurrier texture WeightedCombine A Post Processing Step that combines two textures multiplying them with corresponding weights and then adding them Enums PostProcessStep.Target Enum to show where to render. Framebuffer gets constructed based on this."
  },
  "api/postprocess.PostProcessing.html": {
    "href": "api/postprocess.PostProcessing.html",
    "title": "Class PostProcessing",
    "keywords": "Class PostProcessing Some Utility methods Inheritance java.lang.Object PostProcessing Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class PostProcessing Constructors PostProcessing() Declaration public PostProcessing() Methods finish() Declaration public static void finish() prepare() Declaration public static void prepare()"
  },
  "api/postprocess.PostProcessPipeline.html": {
    "href": "api/postprocess.PostProcessPipeline.html",
    "title": "Class PostProcessPipeline",
    "keywords": "Class PostProcessPipeline This class should be used if you want to chain multiple steps Inheritance java.lang.Object PostProcessPipeline Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class PostProcessPipeline Constructors PostProcessPipeline() Declaration public PostProcessPipeline() Methods apply(Texture input) Apply the effect and return the final texture if not rendering to the default framebuffer Declaration public abstract Texture apply(Texture input) Parameters Type Name Description Texture input input texture to bee processed Returns Type Description Texture the final texture if not rendering to the default framebuffer init() Initialize all steps in this pipeline Declaration public abstract void init()"
  },
  "api/postprocess.PostProcessQuad.html": {
    "href": "api/postprocess.PostProcessQuad.html",
    "title": "Class PostProcessQuad",
    "keywords": "Class PostProcessQuad Inheritance java.lang.Object PostProcessQuad Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class PostProcessQuad Constructors PostProcessQuad() Creates the GPU resources for the fullscreen quad Declaration public PostProcessQuad() Methods _bindQuad() Binds the quad and enables attributes Declaration public void _bindQuad() _unbindQuad() Unbinds the quad and disables attributes Declaration public void _unbindQuad() getInstance() Get the singleton instance. If it doesn't exist, create it Declaration public static PostProcessQuad getInstance() Returns Type Description"
  },
  "api/postprocess.PostProcessStep.html": {
    "href": "api/postprocess.PostProcessStep.html",
    "title": "Class PostProcessStep",
    "keywords": "Class PostProcessStep Denotes A Step in Post Processing Inheritance java.lang.Object PostProcessStep Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class PostProcessStep Constructors PostProcessStep(PostProcessStep.Target target) Declaration public PostProcessStep(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Fields framebuffer The framebuffer to which to render to Declaration public Framebuffer framebuffer Field Value Type Description Framebuffer Methods apply() Run this Step Declaration public Texture apply() Returns Type Description Texture id of the texture if the framebuffer to render to is not default. createFramebuffer() Create Framebuffer based on target Declaration protected Framebuffer createFramebuffer() Returns Type Description Framebuffer createShader() Create the shader to be used for this step Declaration public abstract Shader createShader() Returns Type Description Shader init() Create the shader and framebuffer Declaration public void init() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public abstract void prepare() uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected abstract void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader"
  },
  "api/postprocess.PostProcessStep.Target.html": {
    "href": "api/postprocess.PostProcessStep.Target.html",
    "title": "Enum PostProcessStep.Target",
    "keywords": "Enum PostProcessStep.Target Enum to show where to render. Framebuffer gets constructed based on this. Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum PostProcessStep.Target extends Enum<PostProcessStep.Target> Fields Name Description DEFAULT_FRAMEBUFFER ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER ONE_COLOR_TEXTURE_FRAMEBUFFER createFramebuffer Methods Name Description valueOf(String name) values()"
  },
  "api/postprocess.VerticalBlur.html": {
    "href": "api/postprocess.VerticalBlur.html",
    "title": "Class VerticalBlur",
    "keywords": "Class VerticalBlur A Post Processing Step that renders the texture with a Vertical Blur. NOTE: If you want a more blurry texture, consider using Target.ONE_COLOR_HALF_SIZE_TEXTURE_FRAMEBUFFER to get a smaller framebuffer size and in turn, a more blurrier texture Inheritance java.lang.Object PostProcessStep VerticalBlur Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) Namespace : Assembly : .dll Syntax public class VerticalBlur extends PostProcessStep Constructors VerticalBlur(PostProcessStep.Target target) Default Constructor Declaration public VerticalBlur(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTexture(Texture texture) Set the input texture Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture input texture uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/postprocess.WeightedCombine.html": {
    "href": "api/postprocess.WeightedCombine.html",
    "title": "Class WeightedCombine",
    "keywords": "Class WeightedCombine A Post Processing Step that combines two textures multiplying them with corresponding weights and then adding them Inheritance java.lang.Object PostProcessStep WeightedCombine Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) PostProcessStep.apply() PostProcessStep.createFramebuffer() PostProcessStep.createShader() PostProcessStep.init() PostProcessStep.prepare() PostProcessStep.uploadUniforms(Shader) Namespace : Assembly : .dll Syntax public class WeightedCombine extends PostProcessStep Constructors WeightedCombine(PostProcessStep.Target target) Default Constructor Declaration public WeightedCombine(PostProcessStep.Target target) Parameters Type Name Description PostProcessStep.Target target Where the final texture is to be rendered Methods createShader() Create the shader to be used for this step Declaration public Shader createShader() Returns Type Description Shader the created shader Overrides PostProcessStep.createShader() prepare() Prepare the framebuffer by clearing it and binding any textures required Declaration public void prepare() Overrides PostProcessStep.prepare() setTextureA(Texture texture) Set the input texture A's id Declaration public void setTextureA(Texture texture) Parameters Type Name Description Texture texture input texture setTextureB(Texture texture) Set the input texture B's id Declaration public void setTextureB(Texture texture) Parameters Type Name Description Texture texture input texture setWeightA(float weightA) Set the input texture A's weight Declaration public void setWeightA(float weightA) Parameters Type Name Description float weightA input weight setWeightB(float weightB) Set the input texture B's weight Declaration public void setWeightB(float weightB) Parameters Type Name Description float weightB input weight uploadUniforms(Shader shader) Upload uniforms to the shader Declaration protected void uploadUniforms(Shader shader) Parameters Type Name Description Shader shader Overrides PostProcessStep.uploadUniforms(Shader shader)"
  },
  "api/scene.html": {
    "href": "api/scene.html",
    "title": "Namespace scene",
    "keywords": "Namespace scene Classes Scene Abstract class encapsulating the game logic, the gameObjects, the renderers, the physics specifications and all the necessary ecs-related logic. Programming/Interacting with this game engine will usually involve the following boilerplate code: public class Main extends Scene { public static void main(String[] args) { Engine.init(1920, 1080, \"Azurite Engine Demo In Comment\", 1.0f); Engine.scenes().switchScene(new Main()); Engine.showWindow(); } public void awake() { Graphics.setDefaultBackground(Color.BLACK); camera = new Camera(); ... } public void update() { ... } } A simple example of a scene with just a rendered sprite: public class Main extends Scene { GameObject player; Sprite s; public static void main(String[] args) { Engine.init(1920, 1080, \"Azurite Engine Demo In Comment\", 1.0f); Engine.scenes().switchScene(new Main()); Engine.showWindow(); } public void awake() { Graphics.setDefaultBackground(Color.BLACK); camera = new Camera(); player = new GameObject(); s = new Sprite player.addComponent(new SpriteRenderer(s, new Vector2f(100))); } public void update() { if (Keyboard.getKeyDown(GLFW.GLFW_KEY_SPACE)) { player.transform.add(new Vector2f(1, 0)); } } } SceneManager The SceneManager to handle all scenes of an Engine instance. It contains a scene pool and a currently active scene."
  },
  "api/scene.Scene.html": {
    "href": "api/scene.Scene.html",
    "title": "Class Scene",
    "keywords": "Class Scene Abstract class encapsulating the game logic, the gameObjects, the renderers, the physics specifications and all the necessary ecs-related logic. Programming/Interacting with this game engine will usually involve the following boilerplate code: public class Main extends Scene { public static void main(String[] args) { Engine.init(1920, 1080, \"Azurite Engine Demo In Comment\", 1.0f); Engine.scenes().switchScene(new Main()); Engine.showWindow(); } public void awake() { Graphics.setDefaultBackground(Color.BLACK); camera = new Camera(); ... } public void update() { ... } } A simple example of a scene with just a rendered sprite: public class Main extends Scene { GameObject player; Sprite s; public static void main(String[] args) { Engine.init(1920, 1080, \"Azurite Engine Demo In Comment\", 1.0f); Engine.scenes().switchScene(new Main()); Engine.showWindow(); } public void awake() { Graphics.setDefaultBackground(Color.BLACK); camera = new Camera(); player = new GameObject(); s = new Sprite player.addComponent(new SpriteRenderer(s, new Vector2f(100))); } public void update() { if (Keyboard.getKeyDown(GLFW.GLFW_KEY_SPACE)) { player.transform.add(new Vector2f(1, 0)); } } } Inheritance java.lang.Object Scene Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class Scene Constructors Scene() Declaration public Scene() Fields camera Declaration protected Camera camera Field Value Type Description Camera debugRenderer Declaration public DebugRenderer debugRenderer Field Value Type Description DebugRenderer forwardToScreen Declaration protected ForwardToTexture forwardToScreen Field Value Type Description ForwardToTexture lightmapRenderer Declaration public LightmapRenderer lightmapRenderer Field Value Type Description LightmapRenderer renderer Declaration public DefaultRenderer renderer Field Value Type Description DefaultRenderer textRenderer Declaration public TextRenderer textRenderer Field Value Type Description TextRenderer uiRenderer Declaration public UIRenderer uiRenderer Field Value Type Description UIRenderer Methods activate() This method will be called each time this scene becomes active by SceneManager . Will be called right before the first update. Can be used to prepare the scene to be shown after been shown previously to reset to a certain state. Declaration public void activate() addGameObjectToScene(GameObject gameObject) Declaration public void addGameObjectToScene(GameObject gameObject) Parameters Type Name Description GameObject gameObject GameObject to be added. Add a new gameObject to the scene and immediately call its start method. addText(Text t) Declaration public void addText(Text t) Parameters Type Name Description Text t addToRenderers(GameObject gameObject) Add a gameObject to all renderers Declaration public void addToRenderers(GameObject gameObject) Parameters Type Name Description GameObject gameObject the gameObject to be added addUIElement(Element e) Declaration public void addUIElement(Element e) Parameters Type Name Description Element e awake() Runs only once on startup, useful for initializing gameObjects or for first time setup. Declaration public void awake() camera() Declaration public Camera camera() Returns Type Description Camera Returns the scene's instance of Camera clean() This method is called at the end of the program Declaration public void clean() deactivate() This method will be called each time this scene becomes inactive by SceneManager , because of switching to another method or termination of the program. Can be used to preserve the current state of the scene or quickly complete/cancel tasks that were midst execution. Declaration public void deactivate() debugRender() Declaration public void debugRender() getColliders() Declaration public List<Collider> getColliders() Returns Type Description java.util.List < Collider > getGameObjects() Declaration public List<GameObject> getGameObjects() Returns Type Description java.util.List < GameObject > the List of gameObjects contained in the scene. initRenderers() Initialize all renderers Declaration public void initRenderers() isActive() Declaration public boolean isActive() Returns Type Description boolean postProcess(Texture texture) Apply post processing to a texture Declaration public void postProcess(Texture texture) Parameters Type Name Description Texture texture input texture registerCollider(GameObject gameObject) Declaration public final void registerCollider(GameObject gameObject) Parameters Type Name Description GameObject gameObject registerRenderer(Renderer renderer) Register a renderer to this scene Declaration public void registerRenderer(Renderer renderer) Parameters Type Name Description Renderer renderer the renderer to be registered removeGameObjectFromScene(GameObject gameObject) Declaration public void removeGameObjectFromScene(GameObject gameObject) Parameters Type Name Description GameObject gameObject GameObject to be added. render() Declaration public void render() sceneId() Apply post processing to a texture Declaration public final int sceneId() Returns Type Description int startGameObjects() Loops through all gameobjects already in the scene and calls their start methods. Declaration public final void startGameObjects() startUi() Declaration public final void startUi() textRender() Declaration public final void textRender() unregisterCollider(GameObject gameObject) Declaration public final void unregisterCollider(GameObject gameObject) Parameters Type Name Description GameObject gameObject update() This method is called every frame, and can be used to update objects. Declaration public void update() updateGameObjects() Loops through all the gameObjects in the scene and calls their update methods. Declaration public void updateGameObjects() updateUI() Declaration public void updateUI()"
  },
  "api/scene.SceneManager.html": {
    "href": "api/scene.SceneManager.html",
    "title": "Class SceneManager",
    "keywords": "Class SceneManager The SceneManager to handle all scenes of an Engine instance. It contains a scene pool and a currently active scene. Inheritance java.lang.Object SceneManager Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class SceneManager Constructors SceneManager() Declaration public SceneManager() Methods addScene(Scene scene) Adds a scene to the pool of the manager instance. Will call all initialization methods of the scene in preset order Declaration public boolean addScene(Scene scene) Parameters Type Name Description Scene scene Returns Type Description boolean true, if and only if the scene instance is unique in the pool currentScene() The currently active scene. Declaration public Scene currentScene() Returns Type Description Scene debugRender() Declaration public void debugRender() enable() This method is used to enable the sceneManager and call all initialization methods on a possible currentScene. After this method finished, all newly added scenes will call this methods directly. Declaration public void enable() getMinSceneLight() Declaration public float getMinSceneLight() Returns Type Description float postProcess(Texture texture) Declaration public void postProcess(Texture texture) Parameters Type Name Description Texture texture render() Declaration public void render() sceneIds() Creates a new set of all known scene ids. Declaration public Set<Integer> sceneIds() Returns Type Description java.util.Set < java.lang.Integer > setMinSceneLight(float minSceneLight) Declaration public void setMinSceneLight(float minSceneLight) Parameters Type Name Description float minSceneLight switchScene(int id) Switches the current scene to another scene with the given id, which has to be in the scene pool. Declaration public boolean switchScene(int id) Parameters Type Name Description int id the scene id belonging to the target scene to switch to Returns Type Description boolean true if the given scene is now the new current scene switchScene(Scene scene) Switches the current scene to a given one. Declaration public boolean switchScene(Scene scene) Parameters Type Name Description Scene scene the scene to switch to Returns Type Description boolean true if the given scene is now the new current scene update() Declaration public void update() updateGameObjects() Declaration public void updateGameObjects() updateUI() Declaration public void updateUI()"
  },
  "api/scenes.AudioDemo.html": {
    "href": "api/scenes.AudioDemo.html",
    "title": "Class AudioDemo",
    "keywords": "Class AudioDemo Minimal usage example of the AudioListener and AudioSource components. Inheritance java.lang.Object Scene AudioDemo Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Scene.activate() Scene.addGameObjectToScene(GameObject) Scene.addText(Text) Scene.addToRenderers(GameObject) Scene.addUIElement(Element) Scene.awake() Scene.camera() Scene.clean() Scene.deactivate() Scene.debugRender() Scene.getColliders() Scene.getGameObjects() Scene.initRenderers() Scene.isActive() Scene.postProcess(Texture) Scene.registerCollider(GameObject) Scene.registerRenderer(Renderer) Scene.removeGameObjectFromScene(GameObject) Scene.render() Scene.sceneId() Scene.startGameObjects() Scene.startUi() Scene.textRender() Scene.unregisterCollider(GameObject) Scene.update() Scene.updateGameObjects() Scene.updateUI() Namespace : Assembly : .dll Syntax public class AudioDemo extends Scene Constructors AudioDemo() Declaration public AudioDemo() Methods awake() Runs only once on startup, useful for initializing gameObjects or for first time setup. Declaration public void awake() Overrides Scene.awake() main(String[] args) Declaration public static void main(String[] args) Parameters Type Name Description java.lang.String [] args update() This method is called every frame, and can be used to update objects. Declaration public void update() Overrides Scene.update()"
  },
  "api/scenes.DemoPlatformer.html": {
    "href": "api/scenes.DemoPlatformer.html",
    "title": "Class DemoPlatformer",
    "keywords": "Class DemoPlatformer Inheritance java.lang.Object Scene DemoPlatformer Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Scene.activate() Scene.addGameObjectToScene(GameObject) Scene.addText(Text) Scene.addToRenderers(GameObject) Scene.addUIElement(Element) Scene.awake() Scene.camera() Scene.clean() Scene.deactivate() Scene.debugRender() Scene.getColliders() Scene.getGameObjects() Scene.initRenderers() Scene.isActive() Scene.postProcess(Texture) Scene.registerCollider(GameObject) Scene.registerRenderer(Renderer) Scene.removeGameObjectFromScene(GameObject) Scene.render() Scene.sceneId() Scene.startGameObjects() Scene.startUi() Scene.textRender() Scene.unregisterCollider(GameObject) Scene.update() Scene.updateGameObjects() Scene.updateUI() Namespace : Assembly : .dll Syntax public class DemoPlatformer extends Scene Constructors DemoPlatformer() Declaration public DemoPlatformer() Methods awake() Runs only once on startup, useful for initializing gameObjects or for first time setup. Declaration public void awake() Overrides Scene.awake() main(String[] args) Declaration public static void main(String[] args) Parameters Type Name Description java.lang.String [] args postProcess(Texture texture) Apply post processing to a texture Declaration public void postProcess(Texture texture) Parameters Type Name Description Texture texture Overrides Scene.postProcess(Texture texture) update() This method is called every frame, and can be used to update objects. Declaration public void update() Overrides Scene.update()"
  },
  "api/scenes.DemoTopDown.html": {
    "href": "api/scenes.DemoTopDown.html",
    "title": "Class DemoTopDown",
    "keywords": "Class DemoTopDown Inheritance java.lang.Object Scene DemoTopDown Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Scene.activate() Scene.addGameObjectToScene(GameObject) Scene.addText(Text) Scene.addToRenderers(GameObject) Scene.addUIElement(Element) Scene.awake() Scene.camera() Scene.clean() Scene.deactivate() Scene.debugRender() Scene.getColliders() Scene.getGameObjects() Scene.initRenderers() Scene.isActive() Scene.postProcess(Texture) Scene.registerCollider(GameObject) Scene.registerRenderer(Renderer) Scene.removeGameObjectFromScene(GameObject) Scene.render() Scene.sceneId() Scene.startGameObjects() Scene.startUi() Scene.textRender() Scene.unregisterCollider(GameObject) Scene.update() Scene.updateGameObjects() Scene.updateUI() Namespace : Assembly : .dll Syntax public class DemoTopDown extends Scene Constructors DemoTopDown() Declaration public DemoTopDown() Methods awake() Runs only once on startup, useful for initializing gameObjects or for first time setup. Declaration public void awake() Overrides Scene.awake() main(String[] args) Declaration public static void main(String[] args) Parameters Type Name Description java.lang.String [] args postProcess(Texture texture) Apply post processing to a texture Declaration public void postProcess(Texture texture) Parameters Type Name Description Texture texture Overrides Scene.postProcess(Texture texture) update() This method is called every frame, and can be used to update objects. Declaration public void update() Overrides Scene.update()"
  },
  "api/scenes.html": {
    "href": "api/scenes.html",
    "title": "Namespace scenes",
    "keywords": "Namespace scenes Classes AudioDemo Minimal usage example of the AudioListener and AudioSource components. DemoPlatformer DemoTopDown TextRenderingDemo UIRenderingDemo"
  },
  "api/scenes.TextRenderingDemo.html": {
    "href": "api/scenes.TextRenderingDemo.html",
    "title": "Class TextRenderingDemo",
    "keywords": "Class TextRenderingDemo Inheritance java.lang.Object Scene TextRenderingDemo Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Scene.activate() Scene.addGameObjectToScene(GameObject) Scene.addText(Text) Scene.addToRenderers(GameObject) Scene.addUIElement(Element) Scene.awake() Scene.camera() Scene.clean() Scene.deactivate() Scene.debugRender() Scene.getColliders() Scene.getGameObjects() Scene.initRenderers() Scene.isActive() Scene.postProcess(Texture) Scene.registerCollider(GameObject) Scene.registerRenderer(Renderer) Scene.removeGameObjectFromScene(GameObject) Scene.render() Scene.sceneId() Scene.startGameObjects() Scene.startUi() Scene.textRender() Scene.unregisterCollider(GameObject) Scene.update() Scene.updateGameObjects() Scene.updateUI() Namespace : Assembly : .dll Syntax public class TextRenderingDemo extends Scene Constructors TextRenderingDemo() Declaration public TextRenderingDemo() Methods awake() Runs only once on startup, useful for initializing gameObjects or for first time setup. Declaration public void awake() Overrides Scene.awake() main(String[] args) Declaration public static void main(String[] args) Parameters Type Name Description java.lang.String [] args update() This method is called every frame, and can be used to update objects. Declaration public void update() Overrides Scene.update()"
  },
  "api/scenes.UIRenderingDemo.html": {
    "href": "api/scenes.UIRenderingDemo.html",
    "title": "Class UIRenderingDemo",
    "keywords": "Class UIRenderingDemo Inheritance java.lang.Object Scene UIRenderingDemo Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Scene.activate() Scene.addGameObjectToScene(GameObject) Scene.addText(Text) Scene.addToRenderers(GameObject) Scene.addUIElement(Element) Scene.awake() Scene.camera() Scene.clean() Scene.deactivate() Scene.debugRender() Scene.getColliders() Scene.getGameObjects() Scene.initRenderers() Scene.isActive() Scene.postProcess(Texture) Scene.registerCollider(GameObject) Scene.registerRenderer(Renderer) Scene.removeGameObjectFromScene(GameObject) Scene.render() Scene.sceneId() Scene.startGameObjects() Scene.startUi() Scene.textRender() Scene.unregisterCollider(GameObject) Scene.update() Scene.updateGameObjects() Scene.updateUI() Namespace : Assembly : .dll Syntax public class UIRenderingDemo extends Scene Constructors UIRenderingDemo() Declaration public UIRenderingDemo() Methods awake() Runs only once on startup, useful for initializing gameObjects or for first time setup. Declaration public void awake() Overrides Scene.awake() main(String[] args) Declaration public static void main(String[] args) Parameters Type Name Description java.lang.String [] args update() This method is called every frame, and can be used to update objects. Declaration public void update() Overrides Scene.update()"
  },
  "api/tiles.html": {
    "href": "api/tiles.html",
    "title": "Namespace tiles",
    "keywords": "Namespace tiles Classes Tilesystem The Tilesystem class loads a .tmx file (XML file format for the Tiled map editor) and generates a 2D array of GameObjects with SpriteRenderers corresponding to the texture determined by the .tmx file. Currently only Axis-aligned maps are supported (no isometric or hexagonal maps right now). TilesystemSideScroll An example class of a platformer stage and it's tilemap. Eventually I think this should be expanded to a more general API, maybe even with a Scene dedicated to an in-engine way of constructing them (Mario Maker flavoured Azurite?), but that's likely a future plan; I, the mortal JavaDocumentator, don't have insight into the minds of the owners of this game engine (go ask Asher, idk). lol see Tilesystem , this is now deprectated :D -Asher"
  },
  "api/tiles.Spritesheet.html": {
    "href": "api/tiles.Spritesheet.html",
    "title": "Class Spritesheet",
    "keywords": "Class Spritesheet Inheritance java.lang.Object Spritesheet Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Spritesheet Constructors Spritesheet(Texture texture, int spriteWidth, int spriteHeight, int numSprites, int spacing) Takes a texture, sprite width, height, number of sprites and the pixel spacing between sprites (if applicable), and adds each sprite in the sheet to a List. Declaration public Spritesheet(Texture texture, int spriteWidth, int spriteHeight, int numSprites, int spacing) Parameters Type Name Description Texture texture int spriteWidth int spriteHeight int numSprites int spacing Methods getSize() Returns the integer size of the List of Sprites Declaration public int getSize() Returns Type Description int int size getSprite(int index) Return a single sprite by passing it's index in the sprite list Declaration public Sprite getSprite(int index) Parameters Type Name Description int index of the sprite Returns Type Description Sprite Sprite getSprites() Declaration public List<Sprite> getSprites() Returns Type Description java.util.List < Sprite > entire list of sprites contained in Spritesheet"
  },
  "api/tiles.Tilesystem.html": {
    "href": "api/tiles.Tilesystem.html",
    "title": "Class Tilesystem",
    "keywords": "Class Tilesystem The Tilesystem class loads a .tmx file (XML file format for the Tiled map editor) and generates a 2D array of GameObjects with SpriteRenderers corresponding to the texture determined by the .tmx file. Currently only Axis-aligned maps are supported (no isometric or hexagonal maps right now). Inheritance java.lang.Object Tilesystem Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Tilesystem Constructors Tilesystem(String tmxFile, int width, int height) Declaration public Tilesystem(String tmxFile, int width, int height) Parameters Type Name Description java.lang.String tmxFile int width int height Methods getAt(int x, int y, int dimensionWidth, int[] map) Declaration public int getAt(int x, int y, int dimensionWidth, int[] map) Parameters Type Name Description int x int y int dimensionWidth int [] map Returns Type Description int getIndex(int worldX, int worldY) Declaration public int[] getIndex(int worldX, int worldY) Parameters Type Name Description int worldX int worldY Returns Type Description int []"
  },
  "api/tiles.TilesystemSideScroll.html": {
    "href": "api/tiles.TilesystemSideScroll.html",
    "title": "Class TilesystemSideScroll",
    "keywords": "Class TilesystemSideScroll An example class of a platformer stage and it's tilemap. Eventually I think this should be expanded to a more general API, maybe even with a Scene dedicated to an in-engine way of constructing them (Mario Maker flavoured Azurite?), but that's likely a future plan; I, the mortal JavaDocumentator, don't have insight into the minds of the owners of this game engine (go ask Asher, idk). lol see Tilesystem , this is now deprectated :D -Asher Inheritance java.lang.Object TilesystemSideScroll Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class TilesystemSideScroll Constructors TilesystemSideScroll(Spritesheet s, int xTiles, int yTiles, int width, int height, GameObject c, int[] layers) Declaration public TilesystemSideScroll(Spritesheet s, int xTiles, int yTiles, int width, int height, GameObject c, int[] layers) Parameters Type Name Description Spritesheet s int xTiles int yTiles int width int height GameObject c int [] layers Methods getIndex(int worldX, int worldY) Declaration public int[] getIndex(int worldX, int worldY) Parameters Type Name Description int worldX int worldY Returns Type Description int [] getType(int worldX, int worldY) Declaration public int getType(int worldX, int worldY) Parameters Type Name Description int worldX int worldY Returns Type Description int"
  },
  "api/tiles.TMXParser.html": {
    "href": "api/tiles.TMXParser.html",
    "title": "Class TMXParser",
    "keywords": "Class TMXParser What is this? Inheritance java.lang.Object TMXParser Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class TMXParser Constructors TMXParser() Declaration public TMXParser()"
  },
  "api/ui.Alignment.html": {
    "href": "api/ui.Alignment.html",
    "title": "Enum Alignment",
    "keywords": "Enum Alignment Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum Alignment extends Enum<Alignment> Fields Name Description BOTTOM CENTER LEFT RIGHT TOP Methods Name Description valueOf(String name) values()"
  },
  "api/ui.Container.html": {
    "href": "api/ui.Container.html",
    "title": "Class Container",
    "keywords": "Class Container Inheritance java.lang.Object Element Container Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() Namespace : Assembly : .dll Syntax public class Container extends Element Constructors Container() Declaration public Container() Container(float x, float y, float w, float h, ContainerLayout layout) Declaration public Container(float x, float y, float w, float h, ContainerLayout layout) Parameters Type Name Description float x float y float w float h ContainerLayout layout Container(ContainerLayout layout) Declaration public Container(ContainerLayout layout) Parameters Type Name Description ContainerLayout layout Methods addElement(Element element) Adds a new component to this container. Note, that a component can only have one parent container and therefore cannot be added to more than one container. Declaration public boolean addElement(Element element) Parameters Type Name Description Element element the component to add Returns Type Description boolean whether the component was successfully added; false if and only if the component already has a parent draw() Declaration public void draw() Overrides Element.draw() getElements() Get the list of all components Declaration public List<Element> getElements() Returns Type Description java.util.List < Element > a list containing all components in this container getLayout() Get the layout of this container. Declaration public ContainerLayout getLayout() Returns Type Description ContainerLayout the layout of the container postUpdate() Declaration public void postUpdate() Overrides Element.postUpdate() removeComponent(Element element) Removes a component and resets its parent if it has been removed. Declaration public boolean removeComponent(Element element) Parameters Type Name Description Element element the component to remove Returns Type Description boolean true, if the component was removed, false if the component was not contained in this container setEnclosureInsurance(boolean eI) En- or Disable enclosureInsurance. Declaration public void setEnclosureInsurance(boolean eI) Parameters Type Name Description boolean eI the new value setLayout(ContainerLayout layout) Change the layout of the container - null will result in the AbsoluteLayout . Declaration public void setLayout(ContainerLayout layout) Parameters Type Name Description ContainerLayout layout the new layout"
  },
  "api/ui.CursorManager.html": {
    "href": "api/ui.CursorManager.html",
    "title": "Class CursorManager",
    "keywords": "Class CursorManager Inheritance java.lang.Object CursorManager Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class CursorManager Methods activateCursor(int cursorID) Declaration public void activateCursor(int cursorID) Parameters Type Name Description int cursorID deactivateCursor() Declaration public void deactivateCursor() getDefaultCursor() Declaration public int getDefaultCursor() Returns Type Description int getInstance() Declaration public static CursorManager getInstance() Returns Type Description loadCursor(int cursorID) Declaration public void loadCursor(int cursorID) Parameters Type Name Description int cursorID loadCustomCursor(int x, int y, GLFWImage image) Declaration public int loadCustomCursor(int x, int y, GLFWImage image) Parameters Type Name Description int x int y org.lwjgl.glfw.GLFWImage image Returns Type Description int requestCursor(int id) Declaration public static void requestCursor(int id) Parameters Type Name Description int id resetCursor() Declaration public static void resetCursor() setDefaultCursor(int defaultCursor) Declaration public void setDefaultCursor(int defaultCursor) Parameters Type Name Description int defaultCursor"
  },
  "api/ui.Element(class).html": {
    "href": "api/ui.Element(class).html",
    "title": "Class Element",
    "keywords": "Class Element Inheritance java.lang.Object Element Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public abstract class Element Constructors Element() Declaration public Element() Element(Frame frame) Declaration public Element(Frame frame) Parameters Type Name Description Frame frame Fields cursor The cursor id according to CursorManager Declaration protected int cursor Field Value Type Description int enabled Declaration protected final Observable<Boolean> enabled Field Value Type Description Observable < java.lang.Boolean > eventHandler The event handler for mouse events on this component. Is null until {@link this#getEventHandler()} is called for the first time to reduce workload. Declaration protected EventHandler eventHandler Field Value Type Description EventHandler focused Declaration protected final Observable<Boolean> focused Field Value Type Description Observable < java.lang.Boolean > font The font used for text in this element. If the font is null - the parent font is used instead Declaration protected Font font Field Value Type Description Font frame The position and dimension of this component. Declaration protected Frame frame Field Value Type Description Frame layoutInfo Declaration protected Object layoutInfo Field Value Type Description java.lang.Object mouseOverThis Declaration protected boolean mouseOverThis Field Value Type Description boolean visible Declaration protected final Observable<Boolean> visible Field Value Type Description Observable < java.lang.Boolean > zIndex Declaration protected int zIndex Field Value Type Description int Methods draw() Declaration public void draw() getCursor() Get the current cursor. Declaration public int getCursor() Returns Type Description int the current cursor getEnabled() The observable for the enabled state of the component. Declaration public Observable<Boolean> getEnabled() Returns Type Description Observable < java.lang.Boolean > the observable for enabled getEventHandler() Get and/or create an eventhandler for this method. Do not call this, if you just wanna check the eventhandler, use #hasEventHandler() for that. Declaration public EventHandler getEventHandler() Returns Type Description EventHandler the eventhandler of this component. getFocused() The observable for the focused state of the component. Declaration public Observable<Boolean> getFocused() Returns Type Description Observable < java.lang.Boolean > the observable for focused getFont() The font to use for this component. Declaration public Font getFont() Returns Type Description Font the font for this component or the parent font, if this component doesnt have its own. getFrame() The Frame of this component. Contains the position relative to its parent and its size. Declaration public Frame getFrame() Returns Type Description Frame the Frame of this component getHeight() The height of this component. Declaration public float getHeight() Returns Type Description float the height of this component getLayoutInfo() Get optional layout information. Declaration public Object getLayoutInfo() Returns Type Description java.lang.Object layout information if it has been set for this component, otherwise null getParent() Declaration public Container getParent() Returns Type Description Container getVisible() The observable for the visible state of the component. Declaration public Observable<Boolean> getVisible() Returns Type Description Observable < java.lang.Boolean > the observable for visible getWidth() The width of this component. Declaration public float getWidth() Returns Type Description float the width of this component getX() Get the absolute X coordinate of this component. To get relative coordinates use #getFrame() . Declaration public float getX() Returns Type Description float the absolute X coordinate getY() Get the absolute Y coordinate of this component. To get relative coordinates use #getFrame() . Declaration public float getY() Returns Type Description float the absolute Y coordinate hasEventHandler() Check whether this component has an eventhandler. Declaration public boolean hasEventHandler() Returns Type Description boolean true, if and only if this component has an eventhandler isEnabled() A disabled component shall not receive input and might displayed in a greyed out style. Declaration public boolean isEnabled() Returns Type Description boolean whether the component is enabled. isFocused() A focussed component might react to input differently. e.g. a textfield might only receive input if it is focussed. Declaration public boolean isFocused() Returns Type Description boolean whether the component is current focused isMouseOnThis() Tells you if the mouse is currently hovering this component. Declaration public boolean isMouseOnThis() Returns Type Description boolean true, if and only if the mouse is on this component isVisible() An invisible component shall not be drawn to the screen. Declaration public boolean isVisible() Returns Type Description boolean whether the component is visible postUpdate() Declaration public void postUpdate() requestFocus() This method requests the focus for this component from FocusManager . The currently focused component will lose its focus and this component will gain it. Declaration public void requestFocus() setCursor(int id) Set a cursor for this component. The cursor will change for time the mouse is over this component. Declaration public void setCursor(int id) Parameters Type Name Description int id the id of the cursor as specified in CursorManager setEnabled(boolean enabled) Change the enabled state of this component. Declaration public void setEnabled(boolean enabled) Parameters Type Name Description boolean enabled the new state setFocused(boolean focused) This method shall not be used without thought. Please use #requestFocus() instead for most use cases. Declaration protected void setFocused(boolean focused) Parameters Type Name Description boolean focused the new state setFont(Font font) Set the font for this component. Setting the font to null means this component will use the font of its parent container. Declaration public void setFont(Font font) Parameters Type Name Description Font font the new font setLayoutInfo(Object layoutInfo) Set optional layout information. Declaration public void setLayoutInfo(Object layoutInfo) Parameters Type Name Description java.lang.Object layoutInfo the data required for some layouts setParent(Container parent) Declaration protected void setParent(Container parent) Parameters Type Name Description Container parent setVisible(boolean visible) Change the visibility state of this component. Declaration public void setVisible(boolean visible) Parameters Type Name Description boolean visible the new state update() Declaration public void update() zIndex() The z-index, primarily used for the rendering process. Declaration public int zIndex() Returns Type Description int the z-index"
  },
  "api/ui.element(package).html": {
    "href": "api/ui.element(package).html",
    "title": "Namespace ui.element",
    "keywords": "Namespace ui.element Classes Button CheckBox CheckBoxGroup ComboBox Label ProgressBar Slider A bar with a single node on it, that can be slided across the bar. Could be described as value picker as well. TextField Interfaces TextHolder ValueHolder Enums CheckBox.Type"
  },
  "api/ui.element.Button.html": {
    "href": "api/ui.element.Button.html",
    "title": "Class Button",
    "keywords": "Class Button Inheritance java.lang.Object Element RenderableElement Button Implements TextHolder Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() RenderableElement.getColor() RenderableElement.getColorVector() RenderableElement.getRenderFrame() RenderableElement.getTexCoords() RenderableElement.getTexture() RenderableElement.setAlpha(float) RenderableElement.setColor(Color) RenderableElement.setColor(Vector4f) RenderableElement.setRenderFrame(Frame) RenderableElement.setSize(Vector2f) RenderableElement.setSprite(Sprite) RenderableElement.setTexture(Texture) RenderableElement.start() RenderableElement.update(float) Namespace : Assembly : .dll Syntax public class Button extends RenderableElement implements TextHolder Constructors Button(String label, Color backgroundColor, Color labelColor, Frame frame) Declaration public Button(String label, Color backgroundColor, Color labelColor, Frame frame) Parameters Type Name Description java.lang.String label Color backgroundColor Color labelColor Frame frame Button(String label, Sprite texture, Color labelColor, Frame frame) Declaration public Button(String label, Sprite texture, Color labelColor, Frame frame) Parameters Type Name Description java.lang.String label Sprite texture Color labelColor Frame frame Button(String label, String path, Color labelColor, Frame frame) Declaration public Button(String label, String path, Color labelColor, Frame frame) Parameters Type Name Description java.lang.String label java.lang.String path Color labelColor Frame frame Methods getText() Declaration public String getText() Returns Type Description java.lang.String setText(String text) Declaration public void setText(String text) Parameters Type Name Description java.lang.String text update() Declaration public void update() Overrides Element.update() Implements TextHolder"
  },
  "api/ui.element.CheckBox.html": {
    "href": "api/ui.element.CheckBox.html",
    "title": "Class CheckBox",
    "keywords": "Class CheckBox Inheritance java.lang.Object Element RenderableElement CheckBox Implements TextHolder Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() RenderableElement.getColor() RenderableElement.getColorVector() RenderableElement.getRenderFrame() RenderableElement.getTexCoords() RenderableElement.getTexture() RenderableElement.setAlpha(float) RenderableElement.setColor(Color) RenderableElement.setColor(Vector4f) RenderableElement.setRenderFrame(Frame) RenderableElement.setSize(Vector2f) RenderableElement.setSprite(Sprite) RenderableElement.setTexture(Texture) RenderableElement.start() RenderableElement.update(float) Namespace : Assembly : .dll Syntax public class CheckBox extends RenderableElement implements TextHolder Constructors CheckBox(CheckBoxGroup group, int optionIndex, String label, Sprite unchecked, Sprite checked, Frame frame, float yOffset) Declaration public CheckBox(CheckBoxGroup group, int optionIndex, String label, Sprite unchecked, Sprite checked, Frame frame, float yOffset) Parameters Type Name Description CheckBoxGroup group int optionIndex java.lang.String label Sprite unchecked Sprite checked Frame frame float yOffset Methods getCheckedObservable() Declaration public Observable<Boolean> getCheckedObservable() Returns Type Description Observable < java.lang.Boolean > getText() Declaration public String getText() Returns Type Description java.lang.String isChecked() Declaration public boolean isChecked() Returns Type Description boolean setChecked(boolean check) Declaration public void setChecked(boolean check) Parameters Type Name Description boolean check setText(String text) Declaration public void setText(String text) Parameters Type Name Description java.lang.String text Implements TextHolder"
  },
  "api/ui.element.CheckBox.Type.html": {
    "href": "api/ui.element.CheckBox.Type.html",
    "title": "Enum CheckBox.Type",
    "keywords": "Enum CheckBox.Type Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum CheckBox.Type extends Enum<CheckBox.Type> Fields Name Description MULTI_SELECT RADIO_SELECT Methods Name Description valueOf(String name) values()"
  },
  "api/ui.element.CheckBoxGroup.html": {
    "href": "api/ui.element.CheckBoxGroup.html",
    "title": "Class CheckBoxGroup",
    "keywords": "Class CheckBoxGroup Inheritance java.lang.Object Element CheckBoxGroup Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() Namespace : Assembly : .dll Syntax public class CheckBoxGroup extends Element Constructors CheckBoxGroup(CheckBox.Type type, List<String> options, Sprite unchecked, Sprite checked, Vector2f position) Declaration public CheckBoxGroup(CheckBox.Type type, List<String> options, Sprite unchecked, Sprite checked, Vector2f position) Parameters Type Name Description CheckBox.Type type java.util.List < java.lang.String > options Sprite unchecked Sprite checked org.joml.Vector2f position Fields type Declaration protected final CheckBox.Type type Field Value Type Description CheckBox.Type Methods addOption(String option) Declaration public void addOption(String option) Parameters Type Name Description java.lang.String option getOptions() Declaration public List<String> getOptions() Returns Type Description java.util.List < java.lang.String > getSelected() Declaration public List<String> getSelected() Returns Type Description java.util.List < java.lang.String > removeOption(String option) Declaration public void removeOption(String option) Parameters Type Name Description java.lang.String option select(int select) Declaration public void select(int select) Parameters Type Name Description int select update() Declaration public void update() Overrides Element.update()"
  },
  "api/ui.element.ComboBox.html": {
    "href": "api/ui.element.ComboBox.html",
    "title": "Class ComboBox",
    "keywords": "Class ComboBox Inheritance java.lang.Object Element ComboBox Implements TextHolder ValueHolder Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() Namespace : Assembly : .dll Syntax public class ComboBox extends Element implements TextHolder, ValueHolder Constructors ComboBox(List<String> options) Declaration public ComboBox(List<String> options) Parameters Type Name Description java.util.List < java.lang.String > options ComboBox(List<String> options, int selected, String shownText) Declaration public ComboBox(List<String> options, int selected, String shownText) Parameters Type Name Description java.util.List < java.lang.String > options int selected java.lang.String shownText Methods getCurrentText() Declaration public String getCurrentText() Returns Type Description java.lang.String getOptions() Declaration public List<String> getOptions() Returns Type Description java.util.List < java.lang.String > getSelected() Declaration public int getSelected() Returns Type Description int getText() Declaration public String getText() Returns Type Description java.lang.String getValue() Declaration public float getValue() Returns Type Description float isExpanded() Declaration public boolean isExpanded() Returns Type Description boolean setCurrentText(String currentText) Declaration public void setCurrentText(String currentText) Parameters Type Name Description java.lang.String currentText setExpanded(boolean expanded) Declaration public void setExpanded(boolean expanded) Parameters Type Name Description boolean expanded setOptions(List<String> options) Declaration public void setOptions(List<String> options) Parameters Type Name Description java.util.List < java.lang.String > options setSelected(int selected) Declaration public void setSelected(int selected) Parameters Type Name Description int selected setText(String newText) Declaration public void setText(String newText) Parameters Type Name Description java.lang.String newText setValue(float newValue) Declaration public void setValue(float newValue) Parameters Type Name Description float newValue Implements TextHolder ValueHolder"
  },
  "api/ui.element.Label.html": {
    "href": "api/ui.element.Label.html",
    "title": "Class Label",
    "keywords": "Class Label Inheritance java.lang.Object Element Label Implements TextHolder Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() Namespace : Assembly : .dll Syntax public class Label extends Element implements TextHolder Constructors Label(String text) Declaration public Label(String text) Parameters Type Name Description java.lang.String text Methods getText() Declaration public String getText() Returns Type Description java.lang.String setText(String text) Declaration public void setText(String text) Parameters Type Name Description java.lang.String text Implements TextHolder"
  },
  "api/ui.element.ProgressBar.html": {
    "href": "api/ui.element.ProgressBar.html",
    "title": "Class ProgressBar",
    "keywords": "Class ProgressBar Inheritance java.lang.Object Element ProgressBar Implements ValueHolder Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() Namespace : Assembly : .dll Syntax public class ProgressBar extends Element implements ValueHolder Constructors ProgressBar() Declaration public ProgressBar() ProgressBar(float value, Alignment orientation) Declaration public ProgressBar(float value, Alignment orientation) Parameters Type Name Description float value Alignment orientation Methods getOrientation() Declaration public Alignment getOrientation() Returns Type Description Alignment getValue() Declaration public float getValue() Returns Type Description float setOrientation(Alignment orientation) Declaration public void setOrientation(Alignment orientation) Parameters Type Name Description Alignment orientation setValue(float newValue) Declaration public void setValue(float newValue) Parameters Type Name Description float newValue Implements ValueHolder"
  },
  "api/ui.element.Slider.html": {
    "href": "api/ui.element.Slider.html",
    "title": "Class Slider",
    "keywords": "Class Slider A bar with a single node on it, that can be slided across the bar. Could be described as value picker as well. Inheritance java.lang.Object Element Slider Implements ValueHolder Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() Namespace : Assembly : .dll Syntax public class Slider extends Element implements ValueHolder Constructors Slider(float minScale, float maxScale) Declaration public Slider(float minScale, float maxScale) Parameters Type Name Description float minScale float maxScale Slider(float minScale, float maxScale, float currentScale, Alignment orientation) Declaration public Slider(float minScale, float maxScale, float currentScale, Alignment orientation) Parameters Type Name Description float minScale float maxScale float currentScale Alignment orientation Methods getCurrentRelativeScale() The exact current scale as a value between 0 and 1 Declaration public float getCurrentRelativeScale() Returns Type Description float exact current scale. getCurrentScale() Gets the current absolute value between min and max the slider is set on. Declaration public float getCurrentScale() Returns Type Description float the current absolute value getCurrentScaleObservable() Get the observable for the exact current scale value. Declaration public Observable<Float> getCurrentScaleObservable() Returns Type Description Observable < java.lang.Float > the observable for the current scale getMaxScale() The maximum value of this slider Declaration public float getMaxScale() Returns Type Description float the maximum value getMinScale() The minimum value of this slider Declaration public float getMinScale() Returns Type Description float the minimum value getOrientation() Get the current orientation Declaration public Alignment getOrientation() Returns Type Description Alignment the current orientation getValue() Declaration public float getValue() Returns Type Description float setCurrentScale(float currentScale) Set the current scale to a value between 0 and 1 Declaration public void setCurrentScale(float currentScale) Parameters Type Name Description float currentScale the current scale setMaxScale(float maxScale) Change the maximum value Declaration public void setMaxScale(float maxScale) Parameters Type Name Description float maxScale the new maximum value setMinScale(float minScale) Change the minimum value Declaration public void setMinScale(float minScale) Parameters Type Name Description float minScale the new minimum value setOrientation(Alignment orientation) Change the orientation Declaration public void setOrientation(Alignment orientation) Parameters Type Name Description Alignment orientation the new orientation setValue(float newValue) Declaration public void setValue(float newValue) Parameters Type Name Description float newValue Implements ValueHolder"
  },
  "api/ui.element.TextField.html": {
    "href": "api/ui.element.TextField.html",
    "title": "Class TextField",
    "keywords": "Class TextField Inheritance java.lang.Object Element TextField Implements TextHolder Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() Namespace : Assembly : .dll Syntax public class TextField extends Element implements TextHolder Constructors TextField() Declaration public TextField() TextField(String text) Declaration public TextField(String text) Parameters Type Name Description java.lang.String text Methods getText() Declaration public String getText() Returns Type Description java.lang.String setText(String text) Declaration public void setText(String text) Parameters Type Name Description java.lang.String text Implements TextHolder"
  },
  "api/ui.element.TextHolder.html": {
    "href": "api/ui.element.TextHolder.html",
    "title": "Interface TextHolder",
    "keywords": "Interface TextHolder Namespace : Assembly : .dll Syntax public interface TextHolder Methods getText() Declaration public abstract String getText() Returns Type Description java.lang.String setText(String newText) Declaration public abstract void setText(String newText) Parameters Type Name Description java.lang.String newText"
  },
  "api/ui.element.ValueHolder.html": {
    "href": "api/ui.element.ValueHolder.html",
    "title": "Interface ValueHolder",
    "keywords": "Interface ValueHolder Namespace : Assembly : .dll Syntax public interface ValueHolder Methods getValue() Declaration public abstract float getValue() Returns Type Description float setValue(float newValue) Declaration public abstract void setValue(float newValue) Parameters Type Name Description float newValue"
  },
  "api/ui.EventHandler.Event.html": {
    "href": "api/ui.EventHandler.Event.html",
    "title": "Enum EventHandler.Event",
    "keywords": "Enum EventHandler.Event Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum EventHandler.Event extends Enum<EventHandler.Event> Fields Name Description MOUSE_CLICK MOUSE_ENTER MOUSE_HOVER MOUSE_LEAVE Methods Name Description valueOf(String name) values()"
  },
  "api/ui.EventHandler.html": {
    "href": "api/ui.EventHandler.html",
    "title": "Class EventHandler",
    "keywords": "Class EventHandler Inheritance java.lang.Object EventHandler Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class EventHandler Constructors EventHandler(Element parent) Declaration public EventHandler(Element parent) Parameters Type Name Description Element parent Methods callEvent(EventHandler.Event event) Call a specific event. Note: This might lead to unexpected and unwanted behaviour, when used wrongly. Declaration public void callEvent(EventHandler.Event event) Parameters Type Name Description EventHandler.Event event the event to call getElement() Declaration public Element getElement() Returns Type Description Element isMouseButtonClicked(int button) Check, whether a mouse button has been clicked (pressed and released again) in this update loop. Should be used inside the Event#MOUSE_CLICK , will probably lead to false in any other case. Declaration public boolean isMouseButtonClicked(int button) Parameters Type Name Description int button the mouse button to check, e.g. org.lwjgl.glfw.GLFW#GLFW_MOUSE_BUTTON_LEFT Returns Type Description boolean true if and only if the button has been clicked registerListener(EventHandler.Event event, Consumer<EventHandler> listener) Register a new event listener for this event handler and this component. Declaration public void registerListener(EventHandler.Event event, Consumer<EventHandler> listener) Parameters Type Name Description EventHandler.Event event the event to listen for java.util.function.Consumer < EventHandler > listener the listener containing logic to be executed if the specified event happens update() Declaration public void update()"
  },
  "api/ui.FocusManager.html": {
    "href": "api/ui.FocusManager.html",
    "title": "Class FocusManager",
    "keywords": "Class FocusManager Inheritance java.lang.Object FocusManager Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class FocusManager Methods getFocusedComponent() Declaration public Element getFocusedComponent() Returns Type Description Element getInstance() Declaration public static FocusManager getInstance() Returns Type Description requestFocus(Element element) Declaration public static void requestFocus(Element element) Parameters Type Name Description Element element"
  },
  "api/ui.fonts.Font.html": {
    "href": "api/ui.fonts.Font.html",
    "title": "Class Font",
    "keywords": "Class Font This class contains a font texture for drawing text. A lot of credit for the base of this file goes to @SilverTiger on GitHub, his base has been heavily modified to work in Azurite. Inheritance java.lang.Object Font Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Font Constructors Font() Creates a default anti-aliased font with monospaced glyphs and default size 16. Declaration public Font() Font(boolean antiAlias) Creates a default font with monospaced glyphs and default size 16. Declaration public Font(boolean antiAlias) Parameters Type Name Description boolean antiAlias Whether the font should be anti-aliased or not Font(int size) Creates a default anti-aliased font with monospaced glyphs and specified size. Declaration public Font(int size) Parameters Type Name Description int size Font size Font(int size, boolean antiAlias) Creates a default font with monospaced glyphs and specified size. Declaration public Font(int size, boolean antiAlias) Parameters Type Name Description int size Font size boolean antiAlias Whether the font should be anti-aliased or not Font(Font font) Creates an anti-aliased font from an AWT Font. Declaration public Font(Font font) Parameters Type Name Description java.awt.Font font The AWT Font Font(Font font, boolean antiAlias) Creates a font from an AWT Font. Declaration public Font(Font font, boolean antiAlias) Parameters Type Name Description java.awt.Font font The AWT Font boolean antiAlias Whether the font should be anti-aliased or not Font(InputStream in, int size) Creates an anti-aliased Font from an input stream. Declaration public Font(InputStream in, int size) Parameters Type Name Description java.io.InputStream in The input stream int size Font size Font(InputStream in, int size, boolean antiAlias) Creates a Font from an input stream. Declaration public Font(InputStream in, int size, boolean antiAlias) Parameters Type Name Description java.io.InputStream in The input stream int size Font size boolean antiAlias Whether the font should be anti-aliased or not Font(String path, float size, boolean antiAlias) Creates a Font from an input stream. Declaration public Font(String path, float size, boolean antiAlias) Parameters Type Name Description java.lang.String path Path to TTF file float size Font size boolean antiAlias Whether the font should be anti-aliased or not Methods getFontHeight() Declaration public int getFontHeight() Returns Type Description int getGlyphs() Declaration public Map<Character,Glyph> getGlyphs() Returns Type Description java.util.Map < java.lang.Character , Glyph > getHeight(CharSequence text) Gets the height of the specified text. Declaration public int getHeight(CharSequence text) Parameters Type Name Description java.lang.CharSequence text The text Returns Type Description int Height in pixels of the text. getTexture() Declaration public Texture getTexture() Returns Type Description Texture"
  },
  "api/ui.fonts.Glyph.html": {
    "href": "api/ui.fonts.Glyph.html",
    "title": "Class Glyph",
    "keywords": "Class Glyph This class represents a font glyph. Inheritance java.lang.Object Sprite Glyph Inherited Members Sprite.getHeight() Sprite.getTexture() Sprite.getTextureCoordinates() Sprite.getTextureID() Sprite.getWidth() Sprite.setTexture(Texture) java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Glyph extends Sprite Constructors Glyph(int width, int height, int x, int y) Creates a font Glyph. Declaration public Glyph(int width, int height, int x, int y) Parameters Type Name Description int width Width of the Glyph int height Height of the Glyph int x X coordinate on the font texture int y Y coordinate on the font texture Fields height Declaration public final int height Field Value Type Description int uvCoordinates Declaration public Vector2f[] uvCoordinates Field Value Type Description org.joml.Vector2f [] width Declaration public final int width Field Value Type Description int x Declaration public final int x Field Value Type Description int y Declaration public final int y Field Value Type Description int Methods calculateUVs(Texture texture) Declaration public void calculateUVs(Texture texture) Parameters Type Name Description Texture texture getUV() Declaration public Vector2f[] getUV() Returns Type Description org.joml.Vector2f []"
  },
  "api/ui.fonts.GlyphRenderer.html": {
    "href": "api/ui.fonts.GlyphRenderer.html",
    "title": "Class GlyphRenderer",
    "keywords": "Class GlyphRenderer Inheritance java.lang.Object GlyphRenderer Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class GlyphRenderer Constructors GlyphRenderer(Transform transform, Glyph glyph, Text parentText, char c, boolean isSticky, Color color) Create a spriteRenderer using a sprite that is already loaded. Default tint color is white (no tinting visible). Declaration public GlyphRenderer(Transform transform, Glyph glyph, Text parentText, char c, boolean isSticky, Color color) Parameters Type Name Description Transform transform Glyph glyph Text parentText char c boolean isSticky Color color Methods addX(float x) Declaration public void addX(float x) Parameters Type Name Description float x addY(float x) Declaration public void addY(float x) Parameters Type Name Description float x getCharacter() Declaration public char getCharacter() Returns Type Description char getColor() Declaration public Color getColor() Returns Type Description Color type Color in standard RGBA form in the range 0-255 getColorVector() Declaration public Vector4f getColorVector() Returns Type Description org.joml.Vector4f a Vector4f containing the normalized (0-1) color values (R, G, B, and A) getLocalTransform() Declaration public Transform getLocalTransform() Returns Type Description Transform getParentText() Declaration public Text getParentText() Returns Type Description Text getTexCoords() Declaration public Vector2f[] getTexCoords() Returns Type Description org.joml.Vector2f [] Vector2f array of the UV coordinates of the sprite if applicable. getTexture() Declaration public Texture getTexture() Returns Type Description Texture type Texture of the sprite if applicable. isDirty() Used by the renderer to determine if this glyph should be sent back to the GPU to be redrawn. Declaration public boolean isDirty() Returns Type Description boolean true or false if the sprite or color has changes since last draw. isSticky() Declaration public boolean isSticky() Returns Type Description boolean setAlpha(float a) Change the alpha/opacity of the sprite and/or color Declaration public void setAlpha(float a) Parameters Type Name Description float a alpha/opacity setClean() Used by the renderer to reset the state of the GlyphRenderer to clean. Declaration public void setClean() setColor(Color color) Change the color by passing a Color object, converting it to a normalized Vector4f. Declaration public void setColor(Color color) Parameters Type Name Description Color color should be in range of 0-255 setColor(Vector4f color) Change the color by passing a Vector4f Declaration public void setColor(Vector4f color) Parameters Type Name Description org.joml.Vector4f color vector, values should be in the range of 0-1 setDirty() Used by the renderer to reset the state of the GlyphRenderer to dirty. Declaration public void setDirty() update(float dt) Update method called every frame by parent Declaration public void update(float dt) Parameters Type Name Description float dt Engine.deltaTime updatePosition(Vector2f delta) Declaration public void updatePosition(Vector2f delta) Parameters Type Name Description org.joml.Vector2f delta"
  },
  "api/ui.fonts.html": {
    "href": "api/ui.fonts.html",
    "title": "Namespace ui.fonts",
    "keywords": "Namespace ui.fonts Classes Font This class contains a font texture for drawing text. A lot of credit for the base of this file goes to @SilverTiger on GitHub, his base has been heavily modified to work in Azurite. Glyph This class represents a font glyph. GlyphRenderer"
  },
  "api/ui.Frame.html": {
    "href": "api/ui.Frame.html",
    "title": "Class Frame",
    "keywords": "Class Frame Inheritance java.lang.Object Observable Frame Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Observable.getValue() Observable.ignore(Observer<Type>) Observable.ignoreAll() Observable.observe(Observer<Type>) Observable.setValue(Type) Namespace : Assembly : .dll Syntax public class Frame extends Observable<Void> Constructors Frame() Declaration public Frame() Frame(float x, float y, float w, float h) Declaration public Frame(float x, float y, float w, float h) Parameters Type Name Description float x float y float w float h Methods ensureEnclosure(Frame parent) Declaration public void ensureEnclosure(Frame parent) Parameters Type Name Description parent getAsVector() Declaration public Vector4f getAsVector() Returns Type Description org.joml.Vector4f getHeight() Declaration public float getHeight() Returns Type Description float getPosition() Declaration public Vector2f getPosition() Returns Type Description org.joml.Vector2f getScale() Declaration public Vector2f getScale() Returns Type Description org.joml.Vector2f getSubFrame(Alignment alignment) Declaration public Frame getSubFrame(Alignment alignment) Parameters Type Name Description Alignment alignment Returns Type Description getWidth() Declaration public float getWidth() Returns Type Description float getX() Declaration public float getX() Returns Type Description float getY() Declaration public float getY() Returns Type Description float isInFrame(Vector2f coords) Declaration public boolean isInFrame(Vector2f coords) Parameters Type Name Description org.joml.Vector2f coords Returns Type Description boolean set(float x, float y, float w, float h) Declaration public void set(float x, float y, float w, float h) Parameters Type Name Description float x float y float w float h setHeight(float h) Declaration public void setHeight(float h) Parameters Type Name Description float h setWidth(float w) Declaration public void setWidth(float w) Parameters Type Name Description float w setX(float x) Declaration public void setX(float x) Parameters Type Name Description float x setY(float y) Declaration public void setY(float y) Parameters Type Name Description float y toString() Declaration public String toString() Returns Type Description java.lang.String Overrides java.lang.Object.toString()"
  },
  "api/ui.html": {
    "href": "api/ui.html",
    "title": "Namespace ui",
    "keywords": "Namespace ui Classes Container CursorManager Element EventHandler FocusManager Frame Layer RenderableElement UIComponentRenderer is the renderable part of a UI component it can contain a solid color, a semi-transparent color, or a texture. Sprites can be tinted by the color value. Text Enums Alignment EventHandler.Event"
  },
  "api/ui.Layer.html": {
    "href": "api/ui.Layer.html",
    "title": "Class Layer",
    "keywords": "Class Layer Inheritance java.lang.Object Layer Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Layer Constructors Layer() Declaration public Layer() Layer(float x, float y, float width, float height) Declaration public Layer(float x, float y, float width, float height) Parameters Type Name Description float x float y float width float height Methods draw() Declaration public void draw() getLayerFrame() Declaration public Frame getLayerFrame() Returns Type Description Frame isActive() Declaration public boolean isActive() Returns Type Description boolean registerComponent(Element element) Declaration public void registerComponent(Element element) Parameters Type Name Description Element element setActive(boolean active) Declaration public void setActive(boolean active) Parameters Type Name Description boolean active unregisterComponent(Element element) Declaration public void unregisterComponent(Element element) Parameters Type Name Description Element element update() Declaration public void update()"
  },
  "api/ui.layout.AbsoluteLayout.html": {
    "href": "api/ui.layout.AbsoluteLayout.html",
    "title": "Class AbsoluteLayout",
    "keywords": "Class AbsoluteLayout Inheritance java.lang.Object AbsoluteLayout Implements ContainerLayout Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class AbsoluteLayout implements ContainerLayout Constructors AbsoluteLayout() Declaration public AbsoluteLayout() Methods updateComponents(Container container) Declaration public void updateComponents(Container container) Parameters Type Name Description Container container Implements ContainerLayout"
  },
  "api/ui.layout.BoxLayout.html": {
    "href": "api/ui.layout.BoxLayout.html",
    "title": "Class BoxLayout",
    "keywords": "Class BoxLayout Inheritance java.lang.Object BoxLayout Implements ContainerLayout Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class BoxLayout implements ContainerLayout Constructors BoxLayout(BoxLayout.Orientation orientation) Declaration public BoxLayout(BoxLayout.Orientation orientation) Parameters Type Name Description BoxLayout.Orientation orientation Methods updateComponents(Container container) Declaration public void updateComponents(Container container) Parameters Type Name Description Container container Implements ContainerLayout"
  },
  "api/ui.layout.BoxLayout.Orientation.html": {
    "href": "api/ui.layout.BoxLayout.Orientation.html",
    "title": "Enum BoxLayout.Orientation",
    "keywords": "Enum BoxLayout.Orientation Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum BoxLayout.Orientation extends Enum<BoxLayout.Orientation> Fields Name Description HORIZONTAL VERTICAL Methods Name Description valueOf(String name) values()"
  },
  "api/ui.layout.ContainerLayout.html": {
    "href": "api/ui.layout.ContainerLayout.html",
    "title": "Interface ContainerLayout",
    "keywords": "Interface ContainerLayout Namespace : Assembly : .dll Syntax public interface ContainerLayout Methods updateComponents(Container container) Declaration public abstract void updateComponents(Container container) Parameters Type Name Description Container container"
  },
  "api/ui.layout.GridLayout.FillingOrder.html": {
    "href": "api/ui.layout.GridLayout.FillingOrder.html",
    "title": "Enum GridLayout.FillingOrder",
    "keywords": "Enum GridLayout.FillingOrder Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum GridLayout.FillingOrder extends Enum<GridLayout.FillingOrder> Fields Name Description NATURAL_ORDER ROWS_FIRST Methods Name Description getColumn(int i, int columns, int rows) getRow(int i, int columns, int rows) valueOf(String name) values()"
  },
  "api/ui.layout.GridLayout.html": {
    "href": "api/ui.layout.GridLayout.html",
    "title": "Class GridLayout",
    "keywords": "Class GridLayout Inheritance java.lang.Object GridLayout Implements ContainerLayout Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class GridLayout implements ContainerLayout Constructors GridLayout(int rows, int columns) Declaration public GridLayout(int rows, int columns) Parameters Type Name Description int rows int columns Methods getColumns() Declaration public int getColumns() Returns Type Description int getFillingOrder() Declaration public GridLayout.FillingOrder getFillingOrder() Returns Type Description GridLayout.FillingOrder getRows() Declaration public int getRows() Returns Type Description int setColumns(int columns) Declaration public void setColumns(int columns) Parameters Type Name Description int columns setFillingOrder(GridLayout.FillingOrder fillingOrder) Declaration public void setFillingOrder(GridLayout.FillingOrder fillingOrder) Parameters Type Name Description GridLayout.FillingOrder fillingOrder setRows(int rows) Declaration public void setRows(int rows) Parameters Type Name Description int rows updateComponents(Container container) Declaration public void updateComponents(Container container) Parameters Type Name Description Container container Implements ContainerLayout"
  },
  "api/ui.layout.html": {
    "href": "api/ui.layout.html",
    "title": "Namespace ui.layout",
    "keywords": "Namespace ui.layout Classes AbsoluteLayout BoxLayout GridLayout Interfaces ContainerLayout Enums BoxLayout.Orientation GridLayout.FillingOrder"
  },
  "api/ui.RenderableElement.html": {
    "href": "api/ui.RenderableElement.html",
    "title": "Class RenderableElement",
    "keywords": "Class RenderableElement UIComponentRenderer is the renderable part of a UI component it can contain a solid color, a semi-transparent color, or a texture. Sprites can be tinted by the color value. Inheritance java.lang.Object Element RenderableElement Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Element.draw() Element.getCursor() Element.getEnabled() Element.getEventHandler() Element.getFocused() Element.getFont() Element.getFrame() Element.getHeight() Element.getLayoutInfo() Element.getParent() Element.getVisible() Element.getWidth() Element.getX() Element.getY() Element.hasEventHandler() Element.isEnabled() Element.isFocused() Element.isMouseOnThis() Element.isVisible() Element.postUpdate() Element.requestFocus() Element.setCursor(int) Element.setEnabled(boolean) Element.setFocused(boolean) Element.setFont(Font) Element.setLayoutInfo(Object) Element.setParent(Container) Element.setVisible(boolean) Element.update() Element.zIndex() Namespace : Assembly : .dll Syntax public class RenderableElement extends Element Constructors RenderableElement(Color color, Frame frame) Create the spriteRenderer using a Color object, no sprite. Declaration public RenderableElement(Color color, Frame frame) Parameters Type Name Description Color color of type Color, range from 0-255 Frame frame RenderableElement(Sprite sprite, Frame frame) Create a spriteRenderer using a sprite that is already loaded. Default tint color is white (no tinting visible). Declaration public RenderableElement(Sprite sprite, Frame frame) Parameters Type Name Description Sprite sprite Frame frame RenderableElement(String path, Frame frame) Create a spriteRenderer using an image from the fileSystem. Declaration public RenderableElement(String path, Frame frame) Parameters Type Name Description java.lang.String path to the image (ie. \"src/assets/images/pepper.png\") Frame frame RenderableElement(Vector4f color, Frame frame) Create the spriteRenderer using a color vector, no sprite. Declaration public RenderableElement(Vector4f color, Frame frame) Parameters Type Name Description org.joml.Vector4f color of type JOML Vector4f, range from 0-1 Frame frame Fields color Declaration protected Vector4f color Field Value Type Description org.joml.Vector4f defaultColor Declaration protected Vector4f defaultColor Field Value Type Description org.joml.Vector4f hoverColor Declaration public Vector4f hoverColor Field Value Type Description org.joml.Vector4f tintColor Declaration public Vector4f tintColor Field Value Type Description org.joml.Vector4f Methods getColor() Declaration public Color getColor() Returns Type Description Color type Color in standard RGBA form in the range 0-255 getColorVector() Declaration public Vector4f getColorVector() Returns Type Description org.joml.Vector4f a Vector4f containing the normalized (0-1) color values (R, G, B, and A) getRenderFrame() Declaration public Frame getRenderFrame() Returns Type Description Frame getTexCoords() Declaration public Vector2f[] getTexCoords() Returns Type Description org.joml.Vector2f [] Vector2f array of the UV coordinates of the sprite if applicable. getTexture() Declaration public Texture getTexture() Returns Type Description Texture type Texture of the sprite if applicable. setAlpha(float a) Change the alpha/opacity of the sprite and/or color Declaration public void setAlpha(float a) Parameters Type Name Description float a alpha/opacity setColor(Color color) Change the color by passing a Color object, converting it to a normalized Vector4f. Declaration public void setColor(Color color) Parameters Type Name Description Color color should be in range of 0-255 setColor(Vector4f color) Change the color by passing a Vector4f Declaration public void setColor(Vector4f color) Parameters Type Name Description org.joml.Vector4f color vector, values should be in the range of 0-1 setRenderFrame(Frame frame) Declaration public void setRenderFrame(Frame frame) Parameters Type Name Description Frame frame setSize(Vector2f size) Declaration public void setSize(Vector2f size) Parameters Type Name Description org.joml.Vector2f size setSprite(Sprite sprite) Change the sprite contained in the SpriteRenderer Component. Declaration public void setSprite(Sprite sprite) Parameters Type Name Description Sprite sprite setTexture(Texture texture) Set the texture of the Sprite if required. Declaration public void setTexture(Texture texture) Parameters Type Name Description Texture texture the new texture of this sprite start() Initialize the Element, called once after creation. Declaration public void start() update(float dt) Update method called every frame by parent Declaration public void update(float dt) Parameters Type Name Description float dt Engine.deltaTime"
  },
  "api/ui.Text.html": {
    "href": "api/ui.Text.html",
    "title": "Class Text",
    "keywords": "Class Text Inheritance java.lang.Object Text Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Text Constructors Text(String string, float x, float y) Declaration public Text(String string, float x, float y) Parameters Type Name Description java.lang.String string the text to be rendered. float x the X position of the Text object. float y the Y position of the Text object. Text(String string, Color color, float x, float y) Declaration public Text(String string, Color color, float x, float y) Parameters Type Name Description java.lang.String string the text to be rendered. Color color the graphics.Color object that contains your prefered RGBA color. float x the X position of the Text object. float y the Y position of the Text object. Text(String string, Font font, Color color, float x, float y) Declaration public Text(String string, Font font, Color color, float x, float y) Parameters Type Name Description java.lang.String string the text to be rendered. Font font the ui.fonts.Font object that contains your preferred .ttf font file. Color color the graphics.Color object that contains your prefered RGBA color. float x the X position of the Text object. float y the Y position of the Text object. Text(String string, Font font, Color color, float x, float y, int zIndex, boolean isSticky, boolean isCentered) Declaration public Text(String string, Font font, Color color, float x, float y, int zIndex, boolean isSticky, boolean isCentered) Parameters Type Name Description java.lang.String string the text to be rendered. Font font the ui.fonts.Font object that contains your preferred .ttf font file. Color color the graphics.Color object that contains your prefered RGBA color. float x the X position of the Text object. float y the Y position of the Text object. int zIndex the Z-Index of the Text Object (currently can only be set on creation, this will change in the future). boolean isSticky boolean determining whether the text sticks in one position regardless of the camera position (isSticky = true) or if it will move in world space. boolean isCentered boolean determining whether the text is left aligned or center aligned. This can be changed after creation using .setCentered(). Methods addX(float x) Add to the existing X position incrementally each time this method is called. Declaration public void addX(float x) Parameters Type Name Description float x amount to increment X position by. addY(float y) Add to the existing Y position incrementally each time this method is called. Declaration public void addY(float y) Parameters Type Name Description float y amount to increment Y position by. change(String string) This method is called when the user wants to modify the string in the Text object. This can be called anytime after object creation. Declaration public void change(String string) Parameters Type Name Description java.lang.String string the text to change the current string to. getGlyphRenderers() Declaration public ArrayList<GlyphRenderer> getGlyphRenderers() Returns Type Description java.util.ArrayList < GlyphRenderer > getHeight() Declaration public float getHeight() Returns Type Description float getLongestLineWidth() Declaration public float getLongestLineWidth() Returns Type Description float getText() Declaration public String getText() Returns Type Description java.lang.String getX() Declaration public float getX() Returns Type Description float getY() Declaration public float getY() Returns Type Description float isCentered() Declaration public boolean isCentered() Returns Type Description boolean boolean value of isCentered. rainbowify() Applies a rainbow effect to the Text, gradually changing the color of each Glyph in a rainbow. Declaration public void rainbowify() setCentered(boolean centered) Allows the user to change the text alignment after creation. Declaration public void setCentered(boolean centered) Parameters Type Name Description boolean centered boolean isCentered. setColor(Color color) Set the color of the entire Text object. Declaration public void setColor(Color color) Parameters Type Name Description Color color RGBA Color object. setPosition(float x, float y) Allows the user to change the position of the Text object. Declaration public void setPosition(float x, float y) Parameters Type Name Description float x x position float y y position setPosition(Vector2f position) Allows the user to change the position of the Text object. Declaration public void setPosition(Vector2f position) Parameters Type Name Description org.joml.Vector2f position Vector2f containing new position data. setX(float x) Declaration public void setX(float x) Parameters Type Name Description float x setY(float y) Declaration public void setY(float y) Parameters Type Name Description float y update() Update method called for every text object by the scene.Scene.updateUI() method. This should not be called by general users. Declaration public void update() zIndex() Declaration public int zIndex() Returns Type Description int"
  },
  "api/util.Assets.html": {
    "href": "api/util.Assets.html",
    "title": "Class Assets",
    "keywords": "Class Assets The Assets class contains methods to assist in loading common resources used by the engine from the filesystem as well as HashMaps to keep track of loaded resources. If the same path is loaded again via the Assets class, it will call the item up from the hashmap rather than reload it. Inheritance java.lang.Object Assets Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Assets Constructors Assets() Declaration public Assets() Methods getAudioBuffer(String path) Declaration public static AudioBuffer getAudioBuffer(String path) Parameters Type Name Description java.lang.String path Returns Type Description AudioBuffer getDataFile(String path) Loads a text file from the filesystem and returns it in a String Declaration public static ByteBuffer getDataFile(String path) Parameters Type Name Description java.lang.String path to data file Returns Type Description java.nio.ByteBuffer returns type String getShader(String path) Loads a shader from the filesystem, compiles it, then returns type Shader. Declaration public static Shader getShader(String path) Parameters Type Name Description java.lang.String path to GLSL shader resource Returns Type Description Shader returns type Shader getTexture(String path) Loads a image from the filesystem, and returns a Texture. Declaration public static Texture getTexture(String path) Parameters Type Name Description java.lang.String path to Texture resource (usually a .png file) Returns Type Description Texture returns type Texture loadSpritesheet(String path, int spriteWidth, int spriteHeight, int numSprites, int spacing) Loads a image from the filesystem, and returns a Spritesheet object. Declaration public static Spritesheet loadSpritesheet(String path, int spriteWidth, int spriteHeight, int numSprites, int spacing) Parameters Type Name Description java.lang.String path to Texture resource (usually a .png file) int spriteWidth of each sprite int spriteHeight of each sprite int numSprites of sprites in the sheet int spacing spacing between sprites (0 if no spacing) Returns Type Description Spritesheet returns type Spritesheet"
  },
  "api/util.debug.DebugLine.html": {
    "href": "api/util.debug.DebugLine.html",
    "title": "Class DebugLine",
    "keywords": "Class DebugLine Represents a Line which can be rendered by DebugRenderer The most basic primitive for Debug Rendering Inheritance java.lang.Object DebugLine Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class DebugLine Constructors DebugLine(Vector2f start, Vector2f end) Creates a line with a given start and end point with a White color Declaration public DebugLine(Vector2f start, Vector2f end) Parameters Type Name Description org.joml.Vector2f start start point of the line org.joml.Vector2f end end point of the line DebugLine(Vector2f start, Vector2f end, Color color) Creates a line with a given start and end point and the specified color Declaration public DebugLine(Vector2f start, Vector2f end, Color color) Parameters Type Name Description org.joml.Vector2f start start point of the line org.joml.Vector2f end end point of the line Color color color of the line Fields color Color of the line Declaration public Color color Field Value Type Description Color dirty Were any values of the above changed. Declaration public boolean dirty Field Value Type Description boolean end End point of the line Declaration public Vector2f end Field Value Type Description org.joml.Vector2f start Start point for the line Declaration public Vector2f start Field Value Type Description org.joml.Vector2f Methods isDirty() Were any values changed. Declaration public boolean isDirty() Returns Type Description boolean markClean() Mark this line clean so renderer doesn't update the values of this line Declaration public void markClean() markDirty() Mark this line dirty so renderer can reflect changed values Declaration public void markDirty()"
  },
  "api/util.debug.DebugPrimitive.html": {
    "href": "api/util.debug.DebugPrimitive.html",
    "title": "Class DebugPrimitive",
    "keywords": "Class DebugPrimitive A Primitive that consists of a bunch of lines. These lines are rendered by the DebugRenderer Inheritance java.lang.Object DebugPrimitive Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class DebugPrimitive Constructors DebugPrimitive(DebugLine[] lines) Create a primitive with the given lines Declaration public DebugPrimitive(DebugLine[] lines) Parameters Type Name Description DebugLine [] lines the lines making up the primitive Fields lines The lines making up this primitive Declaration protected DebugLine[] lines Field Value Type Description DebugLine [] Methods getLines() Get the lines making up the primitive Declaration public DebugLine[] getLines() Returns Type Description DebugLine []"
  },
  "api/util.debug.DebugRect.html": {
    "href": "api/util.debug.DebugRect.html",
    "title": "Class DebugRect",
    "keywords": "Class DebugRect A Rectangle Primitive for the Debug Renderer Inheritance java.lang.Object DebugPrimitive DebugRect Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) DebugPrimitive.getLines() Namespace : Assembly : .dll Syntax public class DebugRect extends DebugPrimitive Constructors DebugRect(float x, float y, float width, float height, Color color) Constructs the Rectangle at given x, y location with width and height and specified color Declaration public DebugRect(float x, float y, float width, float height, Color color) Parameters Type Name Description float x x position of the rect float y y position of the rect float width width of the rect float height height of the rect Color color color of the rect Methods reset(float x, float y, float width, float height) Recalculates start and end points of the lines Declaration public void reset(float x, float y, float width, float height) Parameters Type Name Description float x x position of the rect float y y position of the rect float width width of the rect float height height of the rect"
  },
  "api/util.debug.html": {
    "href": "api/util.debug.html",
    "title": "Namespace util.debug",
    "keywords": "Namespace util.debug Classes DebugLine Represents a Line which can be rendered by DebugRenderer The most basic primitive for Debug Rendering DebugPrimitive A Primitive that consists of a bunch of lines. These lines are rendered by the DebugRenderer DebugRect A Rectangle Primitive for the Debug Renderer"
  },
  "api/util.Engine.html": {
    "href": "api/util.Engine.html",
    "title": "Class Engine",
    "keywords": "Class Engine The Engine class initializes the Window and the game loop. It can also be used to access some globally used classes like the scene manager and Window. Inheritance java.lang.Object Engine Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public final class Engine Methods deltaTime() Declaration public static float deltaTime() Returns Type Description float enableLogFiles(File folderPath, int logLevel) Enables a parallel thread saving the logging history every LoggingThread#CYCLE seconds to a file named after the calling datetime of this method into the specified folder. Everytime the instances shuts down ( Engine#isRunning() is false), the file is closed and won't be touched again. Declaration public static void enableLogFiles(File folderPath, int logLevel) Parameters Type Name Description java.io.File folderPath the path of the folder to save the log files to int logLevel Log#FATAL_ONLY , Log#WARNINGS , Log#NO_DEBUG , Log#ALL getDeltaTime() Declaration public float getDeltaTime() Returns Type Description float getInstance() Get the global unique instance of the Engine object. Declaration public static Engine getInstance() Returns Type Description getWindow() Declaration public Window getWindow() Returns Type Description Window init(int windowWidth, int windowHeight, String windowTitle) Start the engine, and initialize GLFW. Declaration public static void init(int windowWidth, int windowHeight, String windowTitle) Parameters Type Name Description int windowWidth Width of the window to be created int windowHeight Height of the window to be created java.lang.String windowTitle Title of the window to be created init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting) Start the engine, and initialize GLFW. Declaration public static void init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting) Parameters Type Name Description int windowWidth Width of the window to be created int windowHeight Height of the window to be created java.lang.String windowTitle Title of the window to be created float minSceneLighting float from 0-1 indicating the minimum scene light level init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting, boolean recalculateProjectionOnResize) Declaration public static void init(int windowWidth, int windowHeight, String windowTitle, float minSceneLighting, boolean recalculateProjectionOnResize) Parameters Type Name Description int windowWidth int windowHeight java.lang.String windowTitle float minSceneLighting boolean recalculateProjectionOnResize init(String windowTitle) Start the engine, and initialize GLFW. Declaration public static void init(String windowTitle) Parameters Type Name Description java.lang.String windowTitle Title of the window to be created init(String windowTitle, float minSceneLighting) Start the engine, and initialize GLFW. This will create a fullscreen window. Declaration public static void init(String windowTitle, float minSceneLighting) Parameters Type Name Description java.lang.String windowTitle Title of the window to be created float minSceneLighting float from 0-1 indicating the minimum scene light level interrupt(int code) Cuts off the engine and exits out of the program immediately with saving the logs. Declaration public void interrupt(int code) Parameters Type Name Description int code the exit code isRunning() Declaration public static boolean isRunning() Returns Type Description boolean millisRunning() Declaration public static double millisRunning() Returns Type Description double Returns the number of milliseconds since the engine started. (since the first call) scenes() Declaration public static SceneManager scenes() Returns Type Description SceneManager showWindow() Declaration public static void showWindow() updateDeltaTime(float deltaTime) Declaration public static void updateDeltaTime(float deltaTime) Parameters Type Name Description float deltaTime window() Declaration public static Window window() Returns Type Description Window windowStopped() Not meant to be called. Only used for Window to stop the engine. Declaration public void windowStopped()"
  },
  "api/util.html": {
    "href": "api/util.html",
    "title": "Namespace util",
    "keywords": "Namespace util Classes Assets The Assets class contains methods to assist in loading common resources used by the engine from the filesystem as well as HashMaps to keep track of loaded resources. If the same path is loaded again via the Assets class, it will call the item up from the hashmap rather than reload it. Engine The Engine class initializes the Window and the game loop. It can also be used to access some globally used classes like the scene manager and Window. Log Logging utility to print colored and labeled errors with class references. Always call the methods of this class directly and do not nest it inside other functions, because it will mess up the stacktrace and would therefore display a wrong source. Logging modes: - FATAL -> only fatal errors and major problems are reported; this is the minimal setting - WARNINGS -> includes fatal errors and minor warnings; useful for detecting common issues - NO_DEBUG -> displays all information except for hard debug logs; for integrity checks - ALL -> shows all logs including hard debug for a detailed overview over vital systems LoggingThread MathUtils An util class containing a lot of useful methods to do maths and physics calculations. Observable<Type> Standard observable model. OrderPreservingList<T> A LinkedList override to create an order-preserving list to improve speed in a special use case: You want to remove and add object from/to a list and keep the elements in the list sorted without having to re-sort each time. Pair<L,R> A Pair is a tupel of two different values with potentially two different types. Transform Represents the position in X and Y coordinates, rotation and the scale (width and height) Triple<L,M,R> A Triple is a tupel of three different values with potentially three different types. Interfaces Observer<Type> Standard observer model."
  },
  "api/util.Log.html": {
    "href": "api/util.Log.html",
    "title": "Class Log",
    "keywords": "Class Log Logging utility to print colored and labeled errors with class references. Always call the methods of this class directly and do not nest it inside other functions, because it will mess up the stacktrace and would therefore display a wrong source. Logging modes: - FATAL -> only fatal errors and major problems are reported; this is the minimal setting - WARNINGS -> includes fatal errors and minor warnings; useful for detecting common issues - NO_DEBUG -> displays all information except for hard debug logs; for integrity checks - ALL -> shows all logs including hard debug for a detailed overview over vital systems Inheritance java.lang.Object Log Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Log Constructors Log() Declaration public Log() Fields ALL Declaration public static final int ALL Field Value Type Description int CL_BLUE Declaration public static final String CL_BLUE Field Value Type Description java.lang.String CL_CYAN Declaration public static final String CL_CYAN Field Value Type Description java.lang.String CL_GRAY Declaration public static final String CL_GRAY Field Value Type Description java.lang.String CL_GREEN Declaration public static final String CL_GREEN Field Value Type Description java.lang.String CL_ORANGE Declaration public static final String CL_ORANGE Field Value Type Description java.lang.String CL_PURPLE Declaration public static final String CL_PURPLE Field Value Type Description java.lang.String CL_RED Declaration public static final String CL_RED Field Value Type Description java.lang.String FATAL_ONLY Declaration public static final int FATAL_ONLY Field Value Type Description int NO_DEBUG Declaration public static final int NO_DEBUG Field Value Type Description int WARNINGS Declaration public static final int WARNINGS Field Value Type Description int Methods crash(Exception e) Report a crash of the engine and log the actual exception. Declaration public static void crash(Exception e) Parameters Type Name Description java.lang.Exception e the exception causing the crash debug(String log) Printed on level Log#ALL only. Use this method to print a detailed debug message about vital information in the system. Includes the source class of the method call in the log. Declaration public static void debug(String log) Parameters Type Name Description java.lang.String log the information to be logged debug(String log, boolean printSource) Printed on level Log#ALL only. Use this method to print a detailed debug message about vital information in the system. May be used to exclude the source class of the method call from the log. Declaration public static void debug(String log, boolean printSource) Parameters Type Name Description java.lang.String log the information to be logged boolean printSource if set to false, the source class is excluded; if set to true, the call is identical to Log#debug(String) debug(String log, int stepUp) Printed on level Log#ALL only. Use this method to print a detailed debug message about vital information in the system. Includes the source class of the method call in the log as well as a second source class further down the stacktrace. Declaration public static void debug(String log, int stepUp) Parameters Type Name Description java.lang.String log the information to be logged int stepUp the amount of steps to take starting at the default calling class to reach the second class to log; e.g. if the stacktrace is A -> B -> C -> D -> debug then D would be the default calling class and a stepUp of 2 would specify B as the second one to log. fatal(String error) Printed on all four levels Log#ALL , Log#NO_DEBUG , Log#WARNINGS and Log#FATAL_ONLY . Use this method to document fatal failures in vital functions. Includes the source class of the method call in the log. Declaration public static void fatal(String error) Parameters Type Name Description java.lang.String error the error to be logged fatal(String error, boolean printSource) Printed on all four levels Log#ALL , Log#NO_DEBUG , Log#WARNINGS and Log#FATAL_ONLY . Use this method to document fatal failures in vital functions. May be used to exclude the source class of the method call from the log. Declaration public static void fatal(String error, boolean printSource) Parameters Type Name Description java.lang.String error the error to be logged boolean printSource if set to false, the source class is excluded; if set to true, the call is identical to Log#fatal(String) fatal(String error, int stepUp) Printed on all four levels Log#ALL , Log#NO_DEBUG , Log#WARNINGS and Log#FATAL_ONLY . Use this method to document fatal failures in vital functions. Includes the source class of the method call in the log as well as a second source class further down the stacktrace. Declaration public static void fatal(String error, int stepUp) Parameters Type Name Description java.lang.String error the error to be logged int stepUp the amount of steps to take starting at the default calling class to reach the second class to log; e.g. if the stacktrace is A -> B -> C -> D -> debug then D would be the default calling class and a stepUp of 2 would specify B as the second one to log. info(String info) Printed on levels Log#ALL and Log#NO_DEBUG only. Use this method to notify of regular system events like successful loading operations for example. Includes the source class of the method call in the log. Declaration public static void info(String info) Parameters Type Name Description java.lang.String info the information to be logged info(String info, boolean printSource) Printed on levels Log#ALL and Log#NO_DEBUG only. Use this method to notify of regular system events like successful loading operations for example. May be used to exclude the source class of the method call from the log. Declaration public static void info(String info, boolean printSource) Parameters Type Name Description java.lang.String info the information to be logged boolean printSource if set to false, the source class is excluded; if set to true, the call is identical to Log#info(String) info(String info, int stepUp) Printed on levels Log#ALL and Log#NO_DEBUG only. Use this method to notify of regular system events like successful loading operations for example. Includes the source class of the method call in the log as well as a second source class further down the stacktrace. Declaration public static void info(String info, int stepUp) Parameters Type Name Description java.lang.String info the information to be logged int stepUp the amount of steps to take starting at the default calling class to reach the second class to log; e.g. if the stacktrace is A -> B -> C -> D -> debug then D would be the default calling class and a stepUp of 2 would specify B as the second one to log. p(String text) Always printed. Use this method to make temporary manual debugging messages, that should get removed before any major update or release. Includes the source class of the method call in the log. Declaration public static void p(String text) Parameters Type Name Description java.lang.String text the debug to be logged p(String text, int stepUp) Always printed. Use this method to make temporary manual debugging messages, that should get removed before any major update or release. Includes the source class of the method call in the log as well as a second source class further down the stacktrace. Declaration public static void p(String text, int stepUp) Parameters Type Name Description java.lang.String text the debug to be logged int stepUp the amount of steps to take starting at the default calling class to reach the second class to log; e.g. if the stacktrace is A -> B -> C -> D -> debug then D would be the default calling class and a stepUp of 2 would specify B as the second one to log. setLogLevel(int logLevel) Set the log level to filter the amount of logs printed to the terminal Declaration public static void setLogLevel(int logLevel) Parameters Type Name Description int logLevel Log#FATAL_ONLY , Log#WARNINGS , Log#NO_DEBUG , Log#ALL startLogging(File path, int logLevel) Starts a thread for saving the log into a file. the saved log may have a different logging level than the printed one. Declaration public static synchronized void startLogging(File path, int logLevel) Parameters Type Name Description java.io.File path the folder path for the log file to be saved to int logLevel the logging level for the saved file Exceptions Type Condition java.io.IOException if any issue happens during the creation and saving of the log file warn(String warn) Printed on levels Log#ALL , Log#NO_DEBUG and Log#WARNINGS . Use this method to warn about unintended behaviour that might lead to bugs that aren't spotted yet. Includes the source class of the method call in the log. Declaration public static void warn(String warn) Parameters Type Name Description java.lang.String warn the warning to be logged warn(String warn, boolean printSource) Printed on levels Log#ALL , Log#NO_DEBUG and Log#WARNINGS . Use this method to warn about unintended behaviour that might lead to bugs that aren't spotted yet. May be used to exclude the source class of the method call from the log. Declaration public static void warn(String warn, boolean printSource) Parameters Type Name Description java.lang.String warn the warning to be logged boolean printSource if set to false, the source class is excluded; if set to true, the call is identical to Log#warn(String) warn(String warn, int stepUp) Printed on levels Log#ALL , Log#NO_DEBUG and Log#WARNINGS . Use this method to warn about unintended behaviour that might lead to bugs that aren't spotted yet. Includes the source class of the method call in the log as well as a second source class further down the stacktrace. Declaration public static void warn(String warn, int stepUp) Parameters Type Name Description java.lang.String warn the warning to be logged int stepUp the amount of steps to take starting at the default calling class to reach the second class to log; e.g. if the stacktrace is A -> B -> C -> D -> debug then D would be the default calling class and a stepUp of 2 would specify B as the second one to log."
  },
  "api/util.Logger.html": {
    "href": "api/util.Logger.html",
    "title": "Class Logger",
    "keywords": "Class Logger Logging utility to print colored and labeled errors with class references. Inheritance java.lang.Object Logger Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Logger Constructors Logger() Declaration public Logger() Methods debugLog(String log) Logs debug information in format: [{Class calling the method}] {info} Declaration public static void debugLog(String log) Parameters Type Name Description java.lang.String log The string passed to log. logAssetError(String error) Logs asset errors in format: [ASSET ERROR] [{Class calling the method}] {error} Then, exits with exit value: -1 Declaration public static void logAssetError(String error) Parameters Type Name Description java.lang.String error The asset error message passed to log. logEngineError() Declaration public static void logEngineError() logFatal(String error) Logs fatal errors in format: [FATAL] [{Class calling the method}] {error} Then, exits with exit value: -1 Declaration public static void logFatal(String error) Parameters Type Name Description java.lang.String error The fatal error message passed to log. logInfo(String info) Logs information in format: [INFO] [{Class calling the method}] {info} Declaration public static void logInfo(String info) Parameters Type Name Description java.lang.String info The string passed to log. logSystemCompatibilityError() Declaration public static void logSystemCompatibilityError()"
  },
  "api/util.LoggingThread.html": {
    "href": "api/util.LoggingThread.html",
    "title": "Class LoggingThread",
    "keywords": "Class LoggingThread Inheritance java.lang.Object java.lang.Thread LoggingThread Inherited Members java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) java.lang.Thread.activeCount() java.lang.Thread.checkAccess() java.lang.Thread.clone() java.lang.Thread.countStackFrames() java.lang.Thread.currentThread() java.lang.Thread.dumpStack() java.lang.Thread.enumerate(java.lang.Thread[]) java.lang.Thread.getAllStackTraces() java.lang.Thread.getContextClassLoader() java.lang.Thread.getDefaultUncaughtExceptionHandler() java.lang.Thread.getId() java.lang.Thread.getName() java.lang.Thread.getPriority() java.lang.Thread.getStackTrace() java.lang.Thread.getState() java.lang.Thread.getThreadGroup() java.lang.Thread.getUncaughtExceptionHandler() java.lang.Thread.holdsLock(java.lang.Object) java.lang.Thread.interrupt() java.lang.Thread.interrupted() java.lang.Thread.isAlive() java.lang.Thread.isDaemon() java.lang.Thread.isInterrupted() java.lang.Thread.join() java.lang.Thread.join(long) java.lang.Thread.join(long,int) java.lang.Thread.onSpinWait() java.lang.Thread.resume() java.lang.Thread.run() java.lang.Thread.setContextClassLoader(java.lang.ClassLoader) java.lang.Thread.setDaemon(boolean) java.lang.Thread.setDefaultUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler) java.lang.Thread.setName(java.lang.String) java.lang.Thread.setPriority(int) java.lang.Thread.setUncaughtExceptionHandler(java.lang.Thread.UncaughtExceptionHandler) java.lang.Thread.sleep(long) java.lang.Thread.sleep(long,int) java.lang.Thread.start() java.lang.Thread.stop() java.lang.Thread.suspend() java.lang.Thread.toString() java.lang.Thread.yield() Namespace : Assembly : .dll Syntax public class LoggingThread extends Thread Constructors LoggingThread(File path, int logLevel) Declaration public LoggingThread(File path, int logLevel) Parameters Type Name Description java.io.File path int logLevel Fields CYCLE Declaration public static int CYCLE Field Value Type Description int LOG_NAME Declaration public static String LOG_NAME Field Value Type Description java.lang.String Methods init() Declaration public boolean init() Returns Type Description boolean Exceptions Type Condition java.io.IOException log(String log, int logLevel) Declaration public void log(String log, int logLevel) Parameters Type Name Description java.lang.String log int logLevel run() Declaration public void run() Overrides java.lang.Thread.run() save() Declaration protected void save() setLogLevel(int logLevel) Declaration public void setLogLevel(int logLevel) Parameters Type Name Description int logLevel"
  },
  "api/util.MathUtils.html": {
    "href": "api/util.MathUtils.html",
    "title": "Class MathUtils",
    "keywords": "Class MathUtils An util class containing a lot of useful methods to do maths and physics calculations. Inheritance java.lang.Object MathUtils Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class MathUtils Constructors MathUtils() Declaration public MathUtils() Methods boundingSphere(Vector2f centroid, Vector2f[] vertices) Calculates the radius of a minimum sphere that contains the given polygon and shares the same centroid. Declaration public static float boundingSphere(Vector2f centroid, Vector2f[] vertices) Parameters Type Name Description org.joml.Vector2f centroid the centroid of the polygon org.joml.Vector2f [] vertices the vertices of the polygon Returns Type Description float the minimum sphere containing the polygon constrain(float value, float min, float max) Takes a float value clamps/constrains it between a minimum and maximum. Declaration public static float constrain(float value, float min, float max) Parameters Type Name Description float value Input to be constrained float min Minimum possible value float max Maximum possible value Returns Type Description float Constrained value as a float. constrain(int value, int min, int max) Takes an integer value clamps/constrains it between a minimum and maximum. Declaration public static int constrain(int value, int min, int max) Parameters Type Name Description int value Input to be constrained int min Minimum possible value int max Maximum possible value Returns Type Description int Constrained value as an int. convexHull(Vector2f[] points) Calculates the convex hull of a given set of points using Jarvis March. The result will have the same length as the input, but not all of them have to be filled in depending on the input. If the input set is just a set of points already defining a convex polygon, the points are just sorted. Declaration public static Vector2f[] convexHull(Vector2f[] points) Parameters Type Name Description org.joml.Vector2f [] points the set of points forming the convex shape Returns Type Description org.joml.Vector2f [] a sorted array of points forming the convex hull of all input points copy(Vector2f[] original) Make a dereferenced copy of a vector array Declaration public static Vector2f[] copy(Vector2f[] original) Parameters Type Name Description org.joml.Vector2f [] original the original array Returns Type Description org.joml.Vector2f [] a array containing a copy of each vector dist(float x1, float y1, float x2, float y2) Returns the distance between two sets of X and Y coordinates. Declaration public static float dist(float x1, float y1, float x2, float y2) Parameters Type Name Description float x1 First X coordinate float y1 First Y coordinate float x2 Second X coordinate float y2 Second Y coordinate Returns Type Description float Returns the distance as a float. dist(Vector2f pos1, Vector2f pos2) Returns the distance between two sets of X and Y coordinates in the form of \"physics.Vector2\"s. Declaration public static float dist(Vector2f pos1, Vector2f pos2) Parameters Type Name Description org.joml.Vector2f pos1 First physics.Vector2 position org.joml.Vector2f pos2 Second physics.Vector2 position Returns Type Description float Returns the distance as a float. encode(int data) Encodes a given input into a short. Note, that the range of Short is 16 bytes and therefore only 0-14 (15 different values) can be encoded. Any value that is not within this range, will lead to undefined behaviour. Declaration public static short encode(int data) Parameters Type Name Description int data the integer in range to encode Returns Type Description short the encoded data as a short encode(int[] data) Encodes all given input into a short. Note, that the range of Short is 16 bytes and therefore only 0-14 (15 different values) can be encoded. Any value that is not within this range, will lead to undefined behaviour. Declaration public static short encode(int[] data) Parameters Type Name Description int [] data a list of integers in no particular order Returns Type Description short the encoded data as a short expandingPolytopeAlgorithm(PrimitiveShape shapeA, PrimitiveShape shapeB, Vector2f[] simplex) The EPA algorithm to find a penetration vector of two given shapes and the result of the GJK algorithm. Since it depends on the GJK algorithm, this algorithm will fail in an undefined way, if the shapes do not actually collide. Declaration public static Optional<Vector2f> expandingPolytopeAlgorithm(PrimitiveShape shapeA, PrimitiveShape shapeB, Vector2f[] simplex) Parameters Type Name Description PrimitiveShape shapeA the first shape PrimitiveShape shapeB the second shape, that collides with the first one org.joml.Vector2f [] simplex the simplex returned by GJK or any simplex inside both shapes borders enclosing the overlapping area of both shapes Returns Type Description java.util.Optional < org.joml.Vector2f > the penetration vector of both shapes, if there is one found within a series of steps fastFloor(double x) Flooring a value fast by using casting instead of actual calculation. Declaration public static int fastFloor(double x) Parameters Type Name Description double x the value to floor Returns Type Description int the floored integer value fastFloor(float x) Flooring a value fast by using casting instead of actual calculation. Declaration public static int fastFloor(float x) Parameters Type Name Description float x the value to floor Returns Type Description int the floored integer value fastRandom(int pos, int seed) An alternative randomization method. Based on noise generation and hashing techniques - it generates a random value using a position and a seed. - Could also be used as one dimensional value noise. - Guarantees reproducible results for identical inputs. - The seed is less significant than the position. Declaration public static float fastRandom(int pos, int seed) Parameters Type Name Description int pos the position in the spectrum. int seed the seed used for fixing the spectrum Returns Type Description float a reproducible randomized number between 0 and 1 fastRandom(long pos, long seed) An alternative randomization method. Based on noise generation and hashing techniques - it generates a random value using a position and a seed. - Could also be used as one dimensional value noise. - Guarantees reproducible results for identical inputs. - The seed is less significant than the position. Declaration public static double fastRandom(long pos, long seed) Parameters Type Name Description long pos the position in the spectrum. long seed the seed used for fixing the spectrum Returns Type Description double a reproducible randomized number between 0 and 1 gjksmCollision(PrimitiveShape shapeA, PrimitiveShape shapeB) Calculates whether a shape collides/overlaps with another shape using their support function only. The support function of a shape calculates the furthest point in a set direction. By GJKSM it is required, that both given shapes are convex shapes. If you wanna test concave shapes, you will have to split them into convex shapes first. This method is based on the GJKSM invariant named by and after GJK the basic underlying principle Stelly a gamedev working at valve (at least at the time) and Muratori reducing its compexity down to testing instead of heavy math. This algorithm below is adjusted to 2d space instead of 3d space and therefore some checks arent necessary, since an unfinished triangle (3 points, 2 vectors) already determines collision. This algorithm was implemented and alternated on 19th of June by Julius K. Declaration public static CollisionInformation gjksmCollision(PrimitiveShape shapeA, PrimitiveShape shapeB) Parameters Type Name Description PrimitiveShape shapeA shape a PrimitiveShape shapeB shape b Returns Type Description CollisionInformation whether shape a and shape b intersect inCircle(float inX, float inY, float circleX, float circleY, float radius) Checks if a set of X and Y coordinates are inside of a circle. Declaration public static boolean inCircle(float inX, float inY, float circleX, float circleY, float radius) Parameters Type Name Description float inX X position of point to check float inY Y position of point to check float circleX X position of circle float circleY Y position of circle float radius Radius of circle Returns Type Description boolean Returns true if the point is inside the circle, otherwise returns false. inCircle(Vector2f in, float circleX, float circleY, float radius) Checks if a set of X and Y coordinates are inside of a circle. Declaration public static boolean inCircle(Vector2f in, float circleX, float circleY, float radius) Parameters Type Name Description org.joml.Vector2f in physics.org.joml.Vector2f containing coordinates of point to check float circleX X position of circle float circleY Y position of circle float radius Radius of circle Returns Type Description boolean Returns true if the point is inside the circle, otherwise returns false. inCircle(Vector2f in, Vector2f circle, float radius) Checks if a set of X and Y coordinates are inside of a circle. Declaration public static boolean inCircle(Vector2f in, Vector2f circle, float radius) Parameters Type Name Description org.joml.Vector2f in physics.Vector2f containing coordinates of point to check org.joml.Vector2f circle physics.Vector2f containing coordinates of the center of the circle float radius Radius of circle Returns Type Description boolean Returns true if the point is inside the circle, otherwise returns false. inRect(float inX, float inY, float rectX, float rectY, float rectWidth, float rectHeight) Checks if a set of X and Y coordinates are inside of a rectangle. Declaration public static boolean inRect(float inX, float inY, float rectX, float rectY, float rectWidth, float rectHeight) Parameters Type Name Description float inX X position of point to check float inY Y position of point to check float rectX X position of rectangle float rectY Y position of rectangle float rectWidth Width of rectangle float rectHeight Height of rectangle Returns Type Description boolean Returns true if the point is inside the rectangle, otherwise returns false. inRect(Vector2f in, float rectX, float rectY, float rectWidth, float rectHeight) Checks if a set of X and Y coordinates are inside of a rectangle. Declaration public static boolean inRect(Vector2f in, float rectX, float rectY, float rectWidth, float rectHeight) Parameters Type Name Description org.joml.Vector2f in physics.Vector2f containing coordinates of point to check float rectX X position of rectangle float rectY Y position of rectangle float rectWidth Width of rectangle float rectHeight Height of rectangle Returns Type Description boolean Returns true if the point is inside the rectangle, otherwise returns false. lerp(float start, float end, float amt) Linearly interpolates between floats by a certain amount. Declaration public static float lerp(float start, float end, float amt) Parameters Type Name Description float start starting value float end ending value float amt amount to interpolate (0-1) Returns Type Description float returns a float that is the lerp of the two values by the amount. map(float value, float start1, float stop1, float start2, float stop2) Re-maps a number from one range to another. Declaration public static float map(float value, float start1, float stop1, float start2, float stop2) Parameters Type Name Description float value Number to me re-mapped float start1 Lowest number of first range float stop1 Highest number of first range float start2 Lowest number of second range float stop2 Highest number of second range Returns Type Description float Returns the re-mapped value as a float. maxDotPoint(Vector2f[] convexShapePoints, Vector2f direction) Finds the point with the highest dot product in a shape to a given direction d, by doing a simple max search over all dot products dot(a,d) where a element of A. Can be used as support function for all convex polygons defined by a finite number of points. Declaration public static Vector2f maxDotPoint(Vector2f[] convexShapePoints, Vector2f direction) Parameters Type Name Description org.joml.Vector2f [] convexShapePoints all points on the convex shape org.joml.Vector2f direction the direction/reach to look for a point Returns Type Description org.joml.Vector2f the point with the highest dot product by the given direction maxDotPointMinkDiff(PrimitiveShape shapeA, PrimitiveShape shapeB, Vector2f direction) Calculates the maximum point of a convex shape C in a specific direction, where C is considered the minkowskiDiff(A,B). Declaration public static Vector2f maxDotPointMinkDiff(PrimitiveShape shapeA, PrimitiveShape shapeB, Vector2f direction) Parameters Type Name Description PrimitiveShape shapeA PrimitiveShape shapeB org.joml.Vector2f direction Returns Type Description org.joml.Vector2f the maximum point in a specific direction polygonCentroid(Vector2f[] vertices) Calculate the centroid of a polygon. Declaration public static Vector2f polygonCentroid(Vector2f[] vertices) Parameters Type Name Description org.joml.Vector2f [] vertices the vertices of the polygon Returns Type Description org.joml.Vector2f the centroid of a polygon radian(float degree) Transforms an angle from degree into radian. Declaration public static float radian(float degree) Parameters Type Name Description float degree the angle in degree Returns Type Description float the radian angle random(float min, float max) Generates a random number from a range of floats. Declaration public static float random(float min, float max) Parameters Type Name Description float min Minimum possible output float max Maximum possible output Returns Type Description float returns a random float from the range passed. randomInt(int min, int max) Generates a random number from a range of ints. Declaration public static int randomInt(int min, int max) Parameters Type Name Description int min Minimum possible output int max Maximum possible output Returns Type Description int returns a random int from the range passed. rayCastIntersection(Vector2f pointA, Vector2f rayA, Vector2f pointB, Vector2f rayB) Cast two rays and see if they intersect. The solution will be calculated based on endless rays with a fixpoint and a ray direction. If a there is intersection point of both ray, they arent parallel and the factors x and y are calculated, so that intersection = pointA+x*rayA = pointB+y*rayB is valid. To ensure a finite ray, the conditions 0 <= x <= 1 and 0 <= y <= 1 are checked. Declaration public static Optional<Pair<Vector2f,Vector2f>> rayCastIntersection(Vector2f pointA, Vector2f rayA, Vector2f pointB, Vector2f rayB) Parameters Type Name Description org.joml.Vector2f pointA the starting point of ray 1 org.joml.Vector2f rayA the direction and length of ray 1 org.joml.Vector2f pointB the starting point of ray 2 org.joml.Vector2f rayB the direction and length of ray 2 Returns Type Description java.util.Optional < Pair < org.joml.Vector2f , org.joml.Vector2f >> a pair containing the intersection point first and a vector with factors x and y rayCastIntersectionPoint(Vector2f pointA, Vector2f rayA, Vector2f pointB, Vector2f rayB) Cast two rays and see if they intersect. Declaration public static Optional<Vector2f> rayCastIntersectionPoint(Vector2f pointA, Vector2f rayA, Vector2f pointB, Vector2f rayB) Parameters Type Name Description org.joml.Vector2f pointA the starting point of ray 1 org.joml.Vector2f rayA the direction and length of ray 1 org.joml.Vector2f pointB the starting point of ray 2 org.joml.Vector2f rayB the direction and length of ray 2 Returns Type Description java.util.Optional < org.joml.Vector2f > the intersection point rayCastToLineIntersectionPoint(Vector2f rayStart, Vector2f rayDirectionAndLength, Vector2f linePointA, Vector2f linePointB) Cast a ray against a fixed line and see if they intersect. Declaration public static Optional<Vector2f> rayCastToLineIntersectionPoint(Vector2f rayStart, Vector2f rayDirectionAndLength, Vector2f linePointA, Vector2f linePointB) Parameters Type Name Description org.joml.Vector2f rayStart the starting point of the ray org.joml.Vector2f rayDirectionAndLength the direction and length of the ray org.joml.Vector2f linePointA the start point of the line org.joml.Vector2f linePointB the end point of the line Returns Type Description java.util.Optional < org.joml.Vector2f > the intersection point rectInRect(Transform t1, Transform t2) Checks if a rectangle is completely inside of another rectangle. Declaration public static boolean rectInRect(Transform t1, Transform t2) Parameters Type Name Description Transform t1 Transform t2 Returns Type Description boolean returns boolean true if t1 is inside of t2 rotateAroundOrigin(Vector2f point, float radianAngle) Rotates a point around the origin of the system. Declaration public static Vector2f rotateAroundOrigin(Vector2f point, float radianAngle) Parameters Type Name Description org.joml.Vector2f point the point to rotate float radianAngle the radian angle to rotate Returns Type Description org.joml.Vector2f a new point that is rotated by radianAngle starting from the given point rotateAroundPoint(Vector2f point, Vector2f relativeOrigin, float radianAngle) Rotates a point around a given point in the same system. Declaration public static Vector2f rotateAroundPoint(Vector2f point, Vector2f relativeOrigin, float radianAngle) Parameters Type Name Description org.joml.Vector2f point the point to rotate org.joml.Vector2f relativeOrigin the point to rotate around float radianAngle the radian angle to rotate Returns Type Description org.joml.Vector2f a new point that is rotated by radianAngle around the given relativeOrigin point starting from the given point round(float x) This is for people who are too lazy to even import Math, but do want to import util.Utils. ¯\\_(\\u30c4)_/¯ Declaration public static float round(float x) Parameters Type Name Description float x Number to be rounded Returns Type Description float Returns the rounded number \"x\". shiftOverwrite(float[] array, int fromIndex, int toIndex) Shifts a part of the array to overwrite the given region (fromIndex, toIndex) FromIndex is INCLUSIVE, ToIndex is EXCLUSIVE Declaration public static int shiftOverwrite(float[] array, int fromIndex, int toIndex) Parameters Type Name Description float [] array the array from which the region has to be removed int fromIndex start of the region int toIndex end of the region Returns Type Description int the new effective length solveSimultaneousEquations(Matrix3x2f linearSystem) A universal linear system solver for two dimensional linear systems. Works usually by shifting the left 2x2 matrix to an identity matrix and read the results on the right side. This method here is using a mathematical approach and is designed to find only one result, if there is none, it may result in some kind of infinity. For more than 1 result the behaviour is undefined. Primarily used to find the intersection point of two lines or rays. Declaration public static Vector2f solveSimultaneousEquations(Matrix3x2f linearSystem) Parameters Type Name Description org.joml.Matrix3x2f linearSystem the two dimensional linear system Returns Type Description org.joml.Vector2f the solution of linear system, Matrix3x2f#m20 will be x and Matrix3x2f#m21 will be y in the result vector"
  },
  "api/util.Observable.html": {
    "href": "api/util.Observable.html",
    "title": "Class Observable<Type>",
    "keywords": "Class Observable<Type> Standard observable model. Inheritance java.lang.Object Observable<Type> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Observable<Type> Type Parameters Name Description Type Constructors Observable() Declaration public Observable() Observable(Type defValue) Declaration public Observable(Type defValue) Parameters Type Name Description Type defValue Methods getValue() Declaration public Type getValue() Returns Type Description Type ignore(Observer<Type> observer) Remove an observer from this observable. Declaration public void ignore(Observer<Type> observer) Parameters Type Name Description Observer < Type > observer the observer to remove ignoreAll() Removes all observers from this observable Declaration public void ignoreAll() observe(Observer<Type> observer) Add an observer to this observable. Declaration public void observe(Observer<Type> observer) Parameters Type Name Description Observer < Type > observer the observer to add setValue(Type value) Declaration public synchronized void setValue(Type value) Parameters Type Name Description Type value"
  },
  "api/util.Observer.html": {
    "href": "api/util.Observer.html",
    "title": "Interface Observer<Type>",
    "keywords": "Interface Observer<Type> Standard observer model. Namespace : Assembly : .dll Syntax public interface Observer<Type> Type Parameters Name Description Type Methods notify(Type newVal) This method gets called by an Observable if the value has been changed Declaration public abstract void notify(Type newVal) Parameters Type Name Description Type newVal the new value of the observed variable"
  },
  "api/util.OrderPreservingList.html": {
    "href": "api/util.OrderPreservingList.html",
    "title": "Class OrderPreservingList<T>",
    "keywords": "Class OrderPreservingList<T> A LinkedList override to create an order-preserving list to improve speed in a special use case: You want to remove and add object from/to a list and keep the elements in the list sorted without having to re-sort each time. Inheritance java.lang.Object java.util.AbstractCollection java.util.AbstractList java.util.ArrayList OrderPreservingList<T> Inherited Members java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) java.util.AbstractCollection.containsAll(java.util.Collection<?>) java.util.AbstractCollection.toString() java.util.ArrayList.<T>toArray(T[]) java.util.ArrayList.add(E) java.util.ArrayList.add(int,E) java.util.ArrayList.addAll(int,java.util.Collection<? extends E>) java.util.ArrayList.addAll(java.util.Collection<? extends E>) java.util.ArrayList.clear() java.util.ArrayList.clone() java.util.ArrayList.contains(java.lang.Object) java.util.ArrayList.ensureCapacity(int) java.util.ArrayList.equals(java.lang.Object) java.util.ArrayList.forEach(java.util.function.Consumer<? super E>) java.util.ArrayList.get(int) java.util.ArrayList.hashCode() java.util.ArrayList.indexOf(java.lang.Object) java.util.ArrayList.isEmpty() java.util.ArrayList.iterator() java.util.ArrayList.lastIndexOf(java.lang.Object) java.util.ArrayList.listIterator() java.util.ArrayList.listIterator(int) java.util.ArrayList.remove(int) java.util.ArrayList.remove(java.lang.Object) java.util.ArrayList.removeAll(java.util.Collection<?>) java.util.ArrayList.removeIf(java.util.function.Predicate<? super E>) java.util.ArrayList.removeRange(int,int) java.util.ArrayList.replaceAll(java.util.function.UnaryOperator<E>) java.util.ArrayList.retainAll(java.util.Collection<?>) java.util.ArrayList.set(int,E) java.util.ArrayList.size() java.util.ArrayList.sort(java.util.Comparator<? super E>) java.util.ArrayList.spliterator() java.util.ArrayList.subList(int,int) java.util.ArrayList.toArray() java.util.ArrayList.trimToSize() Namespace : Assembly : .dll Syntax public class OrderPreservingList<T> extends ArrayList<T> Type Parameters Name Description T Constructors OrderPreservingList() Declaration public OrderPreservingList() OrderPreservingList(Collection<T> data) Declaration public OrderPreservingList(Collection<T> data) Parameters Type Name Description java.util.Collection < T > data Methods add(T t) Declaration public boolean add(T t) Parameters Type Name Description T t Returns Type Description boolean Overrides java.util.ArrayList.add(E) add(int index, T element) Declaration public void add(int index, T element) Parameters Type Name Description int index T element Overrides java.util.ArrayList.add(int,E) addAll(int index, Collection<? extends T> c) Declaration public boolean addAll(int index, Collection<? extends T> c) Parameters Type Name Description int index java.util.Collection < ? extends T > c Returns Type Description boolean Overrides java.util.ArrayList.addAll(int,java.util.Collection<? extends E>) addAll(Collection<? extends T> c) Declaration public boolean addAll(Collection<? extends T> c) Parameters Type Name Description java.util.Collection < ? extends T > c Returns Type Description boolean Overrides java.util.ArrayList.addAll(java.util.Collection<? extends E>) set(int index, T element) Declaration public T set(int index, T element) Parameters Type Name Description int index T element Returns Type Description T Overrides java.util.ArrayList.set(int,E)"
  },
  "api/util.Pair.html": {
    "href": "api/util.Pair.html",
    "title": "Class Pair<L,R>",
    "keywords": "Class Pair<L,R> A Pair is a tupel of two different values with potentially two different types. Inheritance java.lang.Object Pair<L,R> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Pair<L,R> Type Parameters Name Description L R Constructors Pair() Create a Pair with no values. Declaration public Pair() Pair(L left, R right) Create a Pair of two values. Declaration public Pair(L left, R right) Parameters Type Name Description L left first value R right second value Methods <RR>extend(RR right) Extends this Pair with a third value to a triple. Declaration public Triple<L,R,RR> <RR>extend(RR right) Parameters Type Name Description RR right Returns Type Description Triple < L , R , RR > getLeft() Declaration public L getLeft() Returns Type Description L getRight() Declaration public R getRight() Returns Type Description R setLeft(L left) Declaration public void setLeft(L left) Parameters Type Name Description L left setRight(R right) Declaration public void setRight(R right) Parameters Type Name Description R right"
  },
  "api/util.safety.html": {
    "href": "api/util.safety.html",
    "title": "Namespace util.safety",
    "keywords": "Namespace util.safety Classes Preconditions"
  },
  "api/util.safety.Preconditions.html": {
    "href": "api/util.safety.Preconditions.html",
    "title": "Class Preconditions",
    "keywords": "Class Preconditions Inheritance java.lang.Object Preconditions Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public final class Preconditions Constructors Preconditions() Declaration public Preconditions() Methods <T>nonNull(T obj) Improve code stability by doing non-null checks inline. Declaration public static T <T>nonNull(T obj) Parameters Type Name Description T obj any object expected to be non-null Returns Type Description T the object, if and only if its not null. throws a NullPointerException otherwise. <T>nonNull(String name, T obj) Improve code stability by doing non-null checks inline. Declaration public static T <T>nonNull(String name, T obj) Parameters Type Name Description java.lang.String name the name of the object to improve locating process T obj any object expected to be non-null Returns Type Description T the object, if and only if its not null. throws a NullPointerException otherwise. ensureMainThread(String location) Test if the current call is executed in the main thread. This is especially necessary if you run a mac, since mac doesnt like OpenGl calls in ANY thread except the first one. This method does NOT provide a valid exception if the whole program wasnt launched with VM argument -XstartOnFirstThread, because only with this argument, its guaranteed that the main thread is actually is the first. Declaration public static void ensureMainThread(String location) Parameters Type Name Description java.lang.String location"
  },
  "api/util.specs.FramebufferSpec.html": {
    "href": "api/util.specs.FramebufferSpec.html",
    "title": "Class FramebufferSpec",
    "keywords": "Class FramebufferSpec Specification for a framebuffer Inheritance java.lang.Object FramebufferSpec Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class FramebufferSpec Constructors FramebufferSpec(TextureSpec[] textureSpecs) Declaration public FramebufferSpec(TextureSpec[] textureSpecs) Parameters Type Name Description TextureSpec [] textureSpecs FramebufferTextureSpec...: what kind of attachments do you want? Fields attachments Declaration public TextureSpec[] attachments Field Value Type Description TextureSpec []"
  },
  "api/util.specs.html": {
    "href": "api/util.specs.html",
    "title": "Namespace util.specs",
    "keywords": "Namespace util.specs Classes FramebufferSpec Specification for a framebuffer TextureSpec Specification for the framebuffer's attachment textures Enums TextureSpec.TextureFormat What type of data is to be stored in the attachment TextureSpec.TextureResizeFilterType How will the texture be resized if it has to be rendered to a bigger area or smaller area TextureSpec.TextureWrapFilterType How will the texture be wrapped"
  },
  "api/util.specs.TextureSpec.html": {
    "href": "api/util.specs.TextureSpec.html",
    "title": "Class TextureSpec",
    "keywords": "Class TextureSpec Specification for the framebuffer's attachment textures Inheritance java.lang.Object TextureSpec Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class TextureSpec Constructors TextureSpec() Declaration public TextureSpec() TextureSpec(TextureSpec.TextureFormat format) Declaration public TextureSpec(TextureSpec.TextureFormat format) Parameters Type Name Description TextureSpec.TextureFormat format TextureSpec(TextureSpec.TextureFormat format, TextureSpec.TextureResizeFilterType minificationFilter, TextureSpec.TextureResizeFilterType magnificationFilter) Declaration public TextureSpec(TextureSpec.TextureFormat format, TextureSpec.TextureResizeFilterType minificationFilter, TextureSpec.TextureResizeFilterType magnificationFilter) Parameters Type Name Description TextureSpec.TextureFormat format TextureSpec.TextureResizeFilterType minificationFilter TextureSpec.TextureResizeFilterType magnificationFilter TextureSpec(TextureSpec.TextureFormat format, TextureSpec.TextureResizeFilterType minificationFilter, TextureSpec.TextureResizeFilterType magnificationFilter, TextureSpec.TextureWrapFilterType wrapFilters) Declaration public TextureSpec(TextureSpec.TextureFormat format, TextureSpec.TextureResizeFilterType minificationFilter, TextureSpec.TextureResizeFilterType magnificationFilter, TextureSpec.TextureWrapFilterType wrapFilters) Parameters Type Name Description TextureSpec.TextureFormat format TextureSpec.TextureResizeFilterType minificationFilter TextureSpec.TextureResizeFilterType magnificationFilter TextureSpec.TextureWrapFilterType wrapFilters TextureSpec(TextureSpec.TextureFormat format, TextureSpec.TextureResizeFilterType minificationFilter, TextureSpec.TextureResizeFilterType magnificationFilter, TextureSpec.TextureWrapFilterType rFilter, TextureSpec.TextureWrapFilterType sFilter, TextureSpec.TextureWrapFilterType tFilter) Declaration public TextureSpec(TextureSpec.TextureFormat format, TextureSpec.TextureResizeFilterType minificationFilter, TextureSpec.TextureResizeFilterType magnificationFilter, TextureSpec.TextureWrapFilterType rFilter, TextureSpec.TextureWrapFilterType sFilter, TextureSpec.TextureWrapFilterType tFilter) Parameters Type Name Description TextureSpec.TextureFormat format TextureSpec.TextureResizeFilterType minificationFilter TextureSpec.TextureResizeFilterType magnificationFilter TextureSpec.TextureWrapFilterType rFilter TextureSpec.TextureWrapFilterType sFilter TextureSpec.TextureWrapFilterType tFilter Fields format Declaration public final TextureSpec.TextureFormat format Field Value Type Description TextureSpec.TextureFormat magnificationFilter Declaration public final TextureSpec.TextureResizeFilterType magnificationFilter Field Value Type Description TextureSpec.TextureResizeFilterType minificationFilter Declaration public final TextureSpec.TextureResizeFilterType minificationFilter Field Value Type Description TextureSpec.TextureResizeFilterType rFilter Declaration public final TextureSpec.TextureWrapFilterType rFilter Field Value Type Description TextureSpec.TextureWrapFilterType sFilter Declaration public final TextureSpec.TextureWrapFilterType sFilter Field Value Type Description TextureSpec.TextureWrapFilterType tFilter Declaration public final TextureSpec.TextureWrapFilterType tFilter Field Value Type Description TextureSpec.TextureWrapFilterType"
  },
  "api/util.specs.TextureSpec.TextureFormat.html": {
    "href": "api/util.specs.TextureSpec.TextureFormat.html",
    "title": "Enum TextureSpec.TextureFormat",
    "keywords": "Enum TextureSpec.TextureFormat What type of data is to be stored in the attachment Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum TextureSpec.TextureFormat extends Enum<TextureSpec.TextureFormat> Fields Name Description DEPTH DEPTH24STENCIL8 NONE RED_INTEGER RED_UNSIGNED_INTEGER RGBA8 datatype format internalFormat isDepth Methods Name Description valueOf(String name) values()"
  },
  "api/util.specs.TextureSpec.TextureResizeFilterType.html": {
    "href": "api/util.specs.TextureSpec.TextureResizeFilterType.html",
    "title": "Enum TextureSpec.TextureResizeFilterType",
    "keywords": "Enum TextureSpec.TextureResizeFilterType How will the texture be resized if it has to be rendered to a bigger area or smaller area Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum TextureSpec.TextureResizeFilterType extends Enum<TextureSpec.TextureResizeFilterType> Fields Name Description LINEAR LINEAR_MIPMAP_LINEAR LINEAR_MIPMAP_NEAREST NEAREST NEAREST_MIPMAP_LINEAR NEAREST_MIPMAP_NEAREST appliesToMagFilter glType Methods Name Description valueOf(String name) values()"
  },
  "api/util.specs.TextureSpec.TextureWrapFilterType.html": {
    "href": "api/util.specs.TextureSpec.TextureWrapFilterType.html",
    "title": "Enum TextureSpec.TextureWrapFilterType",
    "keywords": "Enum TextureSpec.TextureWrapFilterType How will the texture be wrapped Inherited Members java.lang.Enum.<T>valueOf(java.lang.Class<T>,java.lang.String) java.lang.Enum.clone() java.lang.Enum.compareTo(E) java.lang.Enum.equals(java.lang.Object) java.lang.Enum.finalize() java.lang.Enum.getDeclaringClass() java.lang.Enum.hashCode() java.lang.Enum.name() java.lang.Enum.ordinal() java.lang.Enum.toString() java.lang.Object.getClass() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public enum TextureSpec.TextureWrapFilterType extends Enum<TextureSpec.TextureWrapFilterType> Fields Name Description CLAMP_TO_BORDER CLAMP_TO_EDGE MIRRORED_REPEAT MIRROR_CLAMP_TO_EDGE REPEAT glType Methods Name Description valueOf(String name) values()"
  },
  "api/util.Transform.html": {
    "href": "api/util.Transform.html",
    "title": "Class Transform",
    "keywords": "Class Transform Represents the position in X and Y coordinates, rotation and the scale (width and height) Inheritance java.lang.Object Transform Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Transform Constructors Transform() Creates a new empty transform. Declaration public Transform() Transform(float x, float y, float w, float h) Declaration public Transform(float x, float y, float w, float h) Parameters Type Name Description float x X coordinate of the object float y Y coordinate of the object float w width of the object float h height of the object Transform(float x, float y, float r, float w, float h) Declaration public Transform(float x, float y, float r, float w, float h) Parameters Type Name Description float x X coordinate of the object float y Y coordinate of the object float r Rotation of the object in degrees float w width of the object float h height of the object Transform(Vector2f position) If only the position is passed, the scale is not, scale is created as an empty Vector2f. Declaration public Transform(Vector2f position) Parameters Type Name Description org.joml.Vector2f position X and Y coordinates as a Vector2f Transform(Vector2f position, float rotation) If only the position is passed, the scale is not, scale is created as an empty Vector2f. Declaration public Transform(Vector2f position, float rotation) Parameters Type Name Description org.joml.Vector2f position X and Y coordinates as a Vector2f float rotation Rotation of the object in degrees Transform(Vector2f position, float rotation, Vector2f scale) Declaration public Transform(Vector2f position, float rotation, Vector2f scale) Parameters Type Name Description org.joml.Vector2f position X and Y coordinates as a Vector2f float rotation Rotation of the object in degrees org.joml.Vector2f scale scale (width and height) of the object as a Vector2f Transform(Vector2f position, Vector2f scale) Declaration public Transform(Vector2f position, Vector2f scale) Parameters Type Name Description org.joml.Vector2f position X and Y coordinates as a Vector2f org.joml.Vector2f scale scale (width and height) of the object as a Vector2f Transform(Transform transform) Create a copy of a transform instance Declaration public Transform(Transform transform) Parameters Type Name Description transform the transform instance Fields scale Declaration public Vector2f scale Field Value Type Description org.joml.Vector2f Methods addRotationDegree(float r) Declaration public void addRotationDegree(float r) Parameters Type Name Description float r addRotationRadians(float r) Declaration public void addRotationRadians(float r) Parameters Type Name Description float r addX(float x) Declaration public void addX(float x) Parameters Type Name Description float x addY(float y) Declaration public void addY(float y) Parameters Type Name Description float y copy() Declaration public Transform copy() Returns Type Description Returns a new transform which is identical to this object, can be used to copy into a new physics.Transform object. copy(Transform to) Takes a reference to an external transform, and copies this physics.Transform to it. Declaration public void copy(Transform to) Parameters Type Name Description to The physics.Transform to be changed. equals(Object o) Checks to see if to Transforms are equal. Declaration public boolean equals(Object o) Parameters Type Name Description java.lang.Object o Transform to be checked for equality against this instance of util.Transform. Returns Type Description boolean Returns true if instances are the same, otherwise returns false. Overrides java.lang.Object.equals(java.lang.Object) getHeight() Declaration public float getHeight() Returns Type Description float getPosition() Declaration public Vector2f getPosition() Returns Type Description org.joml.Vector2f getRotation() Declaration public float getRotation() Returns Type Description float getRotationRadians() Declaration public float getRotationRadians() Returns Type Description float getScale() Declaration public Vector2f getScale() Returns Type Description org.joml.Vector2f getWidth() Declaration public float getWidth() Returns Type Description float getX() Declaration public float getX() Returns Type Description float getY() Declaration public float getY() Returns Type Description float setPosition(Vector2f position) Declaration public void setPosition(Vector2f position) Parameters Type Name Description org.joml.Vector2f position setRotation(float r) Declaration public void setRotation(float r) Parameters Type Name Description float r setRotationRadians(float r) Declaration public void setRotationRadians(float r) Parameters Type Name Description float r setScale(Vector2f scale) Declaration public void setScale(Vector2f scale) Parameters Type Name Description org.joml.Vector2f scale setX(float x) Declaration public void setX(float x) Parameters Type Name Description float x setY(float y) Declaration public void setY(float y) Parameters Type Name Description float y"
  },
  "api/util.Triple.html": {
    "href": "api/util.Triple.html",
    "title": "Class Triple<L,M,R>",
    "keywords": "Class Triple<L,M,R> A Triple is a tupel of three different values with potentially three different types. Inheritance java.lang.Object Triple<L,M,R> Inherited Members java.lang.Object.clone() java.lang.Object.equals(java.lang.Object) java.lang.Object.finalize() java.lang.Object.getClass() java.lang.Object.hashCode() java.lang.Object.notify() java.lang.Object.notifyAll() java.lang.Object.toString() java.lang.Object.wait() java.lang.Object.wait(long) java.lang.Object.wait(long,int) Namespace : Assembly : .dll Syntax public class Triple<L,M,R> Type Parameters Name Description L M R Constructors Triple() Creates a Triple with no values. Declaration public Triple() Triple(L left, M middle, R right) Creates a triple of three values. Declaration public Triple(L left, M middle, R right) Parameters Type Name Description L left first value M middle second value R right third value Methods getLeft() Declaration public L getLeft() Returns Type Description L getMiddle() Declaration public M getMiddle() Returns Type Description M getRight() Declaration public R getRight() Returns Type Description R setLeft(L left) Declaration public void setLeft(L left) Parameters Type Name Description L left setMiddle(M middle) Declaration public void setMiddle(M middle) Parameters Type Name Description M middle setRight(R right) Declaration public void setRight(R right) Parameters Type Name Description R right"
  },
  "guides/intro.html": {
    "href": "guides/intro.html",
    "title": "Getting Started",
    "keywords": "Getting Started Prerequisites OpenGL capable graphics card (minimum core 330 ) OpenGL capable graphics driver Linux nouveau drivers for nvidia cards do not currently work, you will have to install proprietary drivers. FOSS AMD Drivers for linux do work. Java 1.8 Project Setup To begin contributing, create a fork of this repository. Using intellj, import this project from existing sources as a gradle project. Build gradle, then run the Main scene (located in the scenes package). Follow this link for tutorials on cloning and importing to either Intellj or Eclipse."
  },
  "guides/setup.html": {
    "href": "guides/setup.html",
    "title": "Azurite Project Setup Guide",
    "keywords": "Azurite Project Setup Guide This is just filler for now. Code Samples BoilerPlate Code: public class Main extends Scene { public static void main(String[] args) { Engine.init(1920, 1080, \"Azurite Engine Demo In Comment\", 1.0f); Engine.scenes().switchScene(new Main(), true); Engine.showWindow(); } public void awake() { camera = new Camera(); ... } public void update() { ... } } Simple example with sprites: public class Main extends Scene { GameObject player; Sprite s; public static void main(String[] args) { Engine.init(1920, 1080, \"Azurite Engine Demo In Comment\", 1.0f); Engine.scenes().switchScene(new Main(), true); Engine.showWindow(); } public void awake() { camera = new Camera(); player = new GameObject(); s = new Sprite player.addComponent(new SpriteRenderer(s, new Vector2f(100))); } public void update() { if (Keyboard.getKeyDown(GLFW.GLFW_KEY_SPACE)) player.transform.add(new Vector2f(1, 0)); } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Azurite",
    "keywords": "Azurite Azurite is a 2D Java game engine built by the Games with Gabe Discord / YouTube community. Explore the docs · Watch the introduction video · Check the Project Board <!-- TABLE OF CONTENTS --> Table of Contents Features Built With Code samples Getting Started Prerequisites Project Setup Documentation Issues License Contact Features Modern OpenGL through the LWJGL 3 library for fast GPU rendering. Entity Component System Built With LWJGL 3 Code Samples BoilerPlate Code: public class Main extends Scene { public static void main(String[] args) { Engine.init(1920, 1080, \"Azurite Engine Demo In Comment\", 1.0f); Engine.scenes().switchScene(new Main(), true); Engine.showWindow(); } public void awake() { camera = new Camera(); ... } public void update() { ... } } Simple example with sprites: public class Main extends Scene { GameObject player; Sprite s; public static void main(String[] args) { Engine.init(1920, 1080, \"Azurite Engine Demo In Comment\", 1.0f); Engine.scenes().switchScene(new Main(), true); Engine.showWindow(); } public void awake() { camera = new Camera(); player = new GameObject(); s = new Sprite player.addComponent(new SpriteRenderer(s, new Vector2f(100))); } public void update() { if (Keyboard.getKeyDown(GLFW.GLFW_KEY_SPACE)) player.transform.add(new Vector2f(1, 0)); } } Getting Started Prerequisites OpenGL capable graphics card (minimum core 330 ) OpenGL capable graphics driver Linux nouveau drivers for nvidia cards do not currently work, you will have to install proprietary drivers. FOSS AMD Drivers for linux do work. Java 1.8 Project Setup To begin contributing, create a fork of this repository. Using intellj, import this project from existing sources as a gradle project. Build gradle, then run the Main scene (located in the scenes package). Follow this link for tutorials on cloning and importing to either Intellj or Eclipse. Documentation Documentatation (Heavy WIP) Javadocs Contributing guidelines Azurite Code style License Copyright (c) 2021 MIT License Contact Discord Server in the #azurite-development channel"
  }
}